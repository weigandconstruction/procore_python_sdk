# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from procore_sdk.models.coordination_issue_sync_response_errors_inner import CoordinationIssueSyncResponseErrorsInner

class TestCoordinationIssueSyncResponseErrorsInner(unittest.TestCase):
    """CoordinationIssueSyncResponseErrorsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoordinationIssueSyncResponseErrorsInner:
        """Test CoordinationIssueSyncResponseErrorsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoordinationIssueSyncResponseErrorsInner`
        """
        model = CoordinationIssueSyncResponseErrorsInner()
        if include_optional:
            return CoordinationIssueSyncResponseErrorsInner(
                uuid = '0b1a32a7-9cf4-4e53-bef4-3d70201b709a',
                title = 'Plumbing Issue on second floor',
                description = 'Plumbing conflicts with light fixtures',
                status = 'open',
                creation_source = 'navisworks',
                location_id = 5,
                assignee_id = 624,
                coordination_issue_file_id = 8,
                drawing_revision_id = 9,
                bim_model_id = 19,
                due_date = '2018-08-16',
                origin = procore_sdk.models.body_104_coordination_issue_origin.Body_104_coordination_issue_origin(
                    title = 'My BcfTopic', 
                    origin_id = '7b3c8752-e03e-417f-bb57-46bb5aca1139', 
                    origin_type = 'BcfTopic', 
                    deep_link_url = 'https://some-company.com/bcf-topics/156', ),
                attachment_upload_uuids = [
                    '1ZE258W9K804SAJJZX19JVAB3R'
                    ],
                attachments = [
                    ''
                    ],
                viewpoints = [
                    procore_sdk.models.coordination_issue_sync_response_errors_inner_all_of_viewpoints_inner.CoordinationIssueSyncResponse_errors_inner_allOf_viewpoints_inner(
                        snapshot_upload_uuid = '1ZE146W9K804SAJJZX19JVAD0R', 
                        snapshot = '', 
                        name = 'Mechanical Conflict View', 
                        camera_data = '{"Type":"Camera","Scale":1,"Up":[0,0,1],"Front":[0,1,2.22],"Right":[1,0,0],"Position":[36.48,22.38,68.27],"View":[-0.11,-0.14,-0.98]}', 
                        redlines_data = '{"Type":"RedlineCollection","Values":[{"Type":"RedlineEllipse","Thickness":3,"Color":[1,0,0],"MinPoint":[-0.131,0.202],"MaxPoint":[0.144,0.024]}]}', 
                        sections_data = '{"Type":"ClipPlaneSet","Version":1"}', )
                    ],
                errors = procore_sdk.models.rest_v10_work_order_contracts_work_order_contract_id_line_items_sync_patch_200_response_errors_inner_all_of_errors.RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch_200_response_errors_inner_allOf_errors(
                    field_name = [
                        ''
                        ], )
            )
        else:
            return CoordinationIssueSyncResponseErrorsInner(
                title = 'Plumbing Issue on second floor',
        )
        """

    def testCoordinationIssueSyncResponseErrorsInner(self):
        """Test CoordinationIssueSyncResponseErrorsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
