# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch200_response_inner import RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner

class TestRestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner(unittest.TestCase):
    """RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner:
        """Test RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner`
        """
        model = RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner()
        if include_optional:
            return RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner(
                accident_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                call_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                delay_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                delivery_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                dumpster_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                equipment_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                inspection_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                manpower_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                daily_construction_report_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                notes_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                plan_revision_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                productivity_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                quantity_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                safety_violation_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                timecard_entry = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                visitor_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                waste_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ],
                work_log = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_bulk_updates_bulk_update_patch_200_response_inner_accident_log_inner.RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch_200_response_inner_accident_log_inner(
                        id = 123, 
                        status = 'approved', 
                        success = True, 
                        error = 'Log type is invalid', )
                    ]
            )
        else:
            return RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner(
        )
        """

    def testRestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner(self):
        """Test RestV10ProjectsProjectIdDailyLogsBulkUpdatesBulkUpdatePatch200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
