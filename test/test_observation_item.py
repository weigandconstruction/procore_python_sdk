# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from procore_sdk.models.observation_item import ObservationItem

class TestObservationItem(unittest.TestCase):
    """ObservationItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ObservationItem:
        """Test ObservationItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ObservationItem`
        """
        model = ObservationItem()
        if include_optional:
            return ObservationItem(
                id = 56,
                created_at = '2012-10-23T21:39:40Z',
                closed_at = '2012-10-23T21:39:40Z',
                deleted_at = '2017-07-29T21:39:40Z',
                updated_at = '2012-10-24T21:39:40Z',
                number = '87',
                name = 'Personnel not wearing full PPE',
                description = 'Worker was seen not wearing their hard hat',
                description_rich_text = '<p>Worker was seen not wearing their hard hat</p>',
                status = 'initiated',
                priority = 'High',
                date_notified = 'Wed Feb 17 00:00:00 UTC 2016',
                due_date = 'Mon Feb 22 00:00:00 UTC 2016',
                personal = False,
                origin = procore_sdk.models.observation_origin.Observation origin(
                    type = 'inspection', 
                    payload = procore_sdk.models.origin_payload.Origin Payload(
                        checklist_item_id = 42, 
                        checklist_list_id = 42, 
                        coordination_issue_id = 1231, 
                        coordination_issue_number = 42, 
                        incident_action_id = 53, 
                        incident_id = 53, 
                        bim_model_id = 63, 
                        bim_model_name = 'Combined Model', ), ),
                assignee = procore_sdk.models.observation_item_assignee.Observation Item Assignee(
                    id = 9378, 
                    name = 'Katrina Smith', 
                    vendor = procore_sdk.models.observation_item_assignee_vendor.Observation_Item_Assignee_vendor(
                        id = 2675, 
                        name = 'Brick and Morty', ), ),
                created_by = procore_sdk.models.rest_v10_projects_project_id_work_logs_get_200_response_inner_created_by.RestV10ProjectsProjectIdWorkLogsGet_200_response_inner_created_by(
                    id = 160586, 
                    login = 'carl.contractor@example.com', 
                    name = 'Carl Contractor', ),
                location = procore_sdk.models.location.Location(
                    id = 15504, 
                    name = '1space>1 space', 
                    node_name = '1 space', 
                    parent_id = 788866, 
                    created_at = '2016-08-01T23:33:54Z', 
                    updated_at = '2016-08-01T23:33:54Z', ),
                specification_section = procore_sdk.models.observation_item_specification_section.Observation_Item_specification_section(
                    id = 56, 
                    description = '', 
                    number = '42', 
                    latest_revision_url = 'link_to_pdf', ),
                trade = procore_sdk.models.trade.Trade(
                    id = 999, 
                    name = '09 - acoustical panels', 
                    active = True, 
                    updated_at = '2016-08-01T23:33:54Z', ),
                type = procore_sdk.models.observation_type.Observation Type(
                    id = 9, 
                    category = 'Commissioning', 
                    category_key = 'work_to_complete', 
                    name = 'Commissioning', 
                    active = True, 
                    company_active = True, 
                    parent_inactive = False, 
                    in_use = False, 
                    kind = 'project', 
                    name_translations = procore_sdk.models.observation_type_name_translations.Observation_Type_name_translations(
                        en = 'Commissioning', 
                        es = 'Puesta en marcha', 
                        fr_ca = 'Mise en service', 
                        en_au = 'Commissioning', ), 
                    localized_name = 'Commissioning', ),
                custom_fields = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields(
                    custom_field_%{custom_field_string_definition_id} = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields_custom_field___custom_field_string_definition_id_.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields_custom_field___custom_field_string_definition_id_(
                        data_type = 'string', 
                        value = 'custom field value', ), 
                    custom_field_%{custom_field_decimal_definition_id} = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields_custom_field___custom_field_decimal_definition_id_.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields_custom_field___custom_field_decimal_definition_id_(
                        data_type = 'decimal', 
                        value = 2.2, ), 
                    custom_field_%{custom_field_boolean_definition_id} = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields_custom_field___custom_field_boolean_definition_id_.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields_custom_field___custom_field_boolean_definition_id_(
                        data_type = 'boolean', 
                        value = True, ), 
                    custom_field_%{custom_field_lov_entry_definition_id} = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields_custom_field___custom_field_lov_entry_definition_id_.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields_custom_field___custom_field_lov_entry_definition_id_(
                        data_type = 'lov_entry', 
                        value = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields_custom_field___custom_field_lov_entry_definition_id__value.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields_custom_field___custom_field_lov_entry_definition_id__value(
                            id = 1, 
                            label = 'Open', ), ), 
                    custom_field_%{custom_field_lov_entries_definition_id} = procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get_200_response_inner_custom_fields_custom_field___custom_field_lov_entries_definition_id_.RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet_200_response_inner_custom_fields_custom_field___custom_field_lov_entries_definition_id_(
                        data_type = 'lov_entries', ), )
            )
        else:
            return ObservationItem(
        )
        """

    def testObservationItem(self):
        """Test ObservationItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
