# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from procore_sdk.models.bid import Bid

class TestBid(unittest.TestCase):
    """Bid unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Bid:
        """Test Bid
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Bid`
        """
        model = Bid()
        if include_optional:
            return Bid(
                id = 75414,
                bid_package_id = 91011,
                bid_package_title = 'Test Bid Documents Email Link from Correspondence',
                bid_form_title = 'Bid Form Title',
                awarded = False,
                bidders_can_add_line_items = False,
                bid_status = 'not_invited',
                company_id = 2342,
                invitation_last_sent_at = '2012-10-23T21:39:40Z',
                is_bidder_committed = True,
                lump_sum_amount = 200.5,
                lump_sum_enabled = False,
                submitted = True,
                created_at = '2012-10-23T21:39:40Z',
                updated_at = '2012-10-24T21:39:40Z',
                due_date = '2016-12-13T03:00Z',
                bidder_comments = 'See Attached Proposal',
                bid_requester = procore_sdk.models.bid_bid_requester.Bid_bid_requester(
                    company = 'Demo Company 1', 
                    contact = 'John Doe ((503)744-3200 ext. 1234)', 
                    company_address = '123 Campus Way Carpinteria, CA 91303', 
                    company_phone = '8051231234', 
                    company_website = 'https://www.procore.com/', 
                    email_address = 'joe.doe@example.com', 
                    first_name = 'Joe', 
                    last_name = 'Doe', 
                    mobile_phone = '8051231234', 
                    vendor_address = '6309 Carpinteria Ave.', 
                    business_phone = '8051231234', 
                    fax_number = '8051231234', ),
                deleted_at = '2017-07-29T21:39:40Z',
                bidder_notes = 'Test Bid Notes',
                attachments_count = 1,
                recipient_ids = [
                    1443234
                    ],
                recipient_list = [
                    procore_sdk.models.bid_recipient_list_inner.Bid_recipient_list_inner(
                        first = 'John', 
                        last = 'Doe', 
                        email = 'j.doe@example.com', 
                        numbers = 'Office: N/A, Mobile: 805.123.1234', )
                    ],
                recipient_list_with_email_and_number = Jane Doe, jane.doe@example.com, Office N/A, Mobile N/A,
                mailto = 'procore-f1234@example.com',
                bidder_inclusion = 'See Attached Proposal',
                bidder_exclusion = 'Please note I could not supply pricing on tapware or toilets.',
                bid_convertible_to_subcontract = True,
                bid_convertible_to_purchase_order = True,
                contract_button_disabled_reason = 'One cost code must be associated with this lump sum bid.',
                po_button_disabled_reason = 'Cost codes on bid cannot be divisions for purchase order conversion.',
                links = procore_sdk.models.bid_links.Bid_links(
                    uploads = 'https://app.procore.com/upload', 
                    cost_codes = 'https://app.procore.com/cost_codes', 
                    bid_pdf = '/rest/v1.0/companies/16/bids/67.pdf', ),
                vendor = procore_sdk.models.bid_vendor.Bid_vendor(
                    id = 75414, 
                    name = 'Demo Company 1', 
                    avatar_url = 'https://s3.amazonaws.com/pro-core.com/prostore/20160422154654_production_397508974.png?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2100610164&Signature=CEHFF%2BS3hvSqrzFRAULDZhI7Es4%3D', 
                    trades = 'General Conditions', ),
                project = procore_sdk.models.bid_project.Bid_project(
                    name = 'Project 1', 
                    address = 'One Space Way<br>Risa SB12<br>United States', ),
                bid_items = [
                    procore_sdk.models.bid_bid_items_inner.Bid_bid_items_inner(
                        amount = 100000.0, 
                        bid_form_item_id = 223345, 
                        cost_code_id = 32780682, 
                        cost_code_name = 'Wood Sub-floors', 
                        cost_code_number = '00-01 39-12', 
                        id = 223345, 
                        included = True, 
                        quantity = '15.0', 
                        unit_cost = '900.0', 
                        uom = 'each', )
                    ],
                cost_codes = [
                    procore_sdk.models.timecard_entry_full_cost_code.TimecardEntry_full_cost_code(
                        id = 12345, 
                        name = 'Earthwork', )
                    ],
                attachments = [
                    procore_sdk.models.bid_attachments_inner.Bid_attachments_inner(
                        id = 5324, 
                        item_type = 'Bid', 
                        prostore_file_id = 1234, 
                        url = 'http://www.example.com/', 
                        name = 'january_receipt_copy.jpg', )
                    ],
                attachments_zip_streaming_url = 'http://www.example.com/'
            )
        else:
            return Bid(
        )
        """

    def testBid(self):
        """Test Bid"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
