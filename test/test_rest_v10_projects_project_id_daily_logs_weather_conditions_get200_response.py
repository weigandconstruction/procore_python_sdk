# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get200_response import RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response

class TestRestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response(unittest.TestCase):
    """RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response:
        """Test RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response`
        """
        model = RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response()
        if include_optional:
            return RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response(
                sky = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get_200_response_sky_inner.RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet_200_response_sky_inner(
                        key = 'Clear', 
                        value = 'Dégagé', )
                    ],
                ground = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get_200_response_ground_inner.RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet_200_response_ground_inner(
                        key = 'Dry', 
                        value = 'Sec', )
                    ],
                calamity = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get_200_response_calamity_inner.RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet_200_response_calamity_inner(
                        key = 'Earthquake', 
                        value = 'Séisme', )
                    ],
                wind = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get_200_response_wind_inner.RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet_200_response_wind_inner(
                        key = 'Calm', 
                        value = 'Calme', )
                    ],
                temperature = [
                    procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get_200_response_temperature_inner.RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet_200_response_temperature_inner(
                        key = 'Very Hot', 
                        value = 'Très chaud', )
                    ]
            )
        else:
            return RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response(
        )
        """

    def testRestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response(self):
        """Test RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
