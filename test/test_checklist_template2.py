# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from procore_sdk.models.checklist_template2 import ChecklistTemplate2

class TestChecklistTemplate2(unittest.TestCase):
    """ChecklistTemplate2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChecklistTemplate2:
        """Test ChecklistTemplate2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChecklistTemplate2`
        """
        model = ChecklistTemplate2()
        if include_optional:
            return ChecklistTemplate2(
                id = 142,
                name = 'Window Inspection',
                synced_to = procore_sdk.models.checklist_template_1_synced_to.Checklist_Template_1_synced_to(
                    company_id = 23, 
                    list_template_id = 12, ),
                company_description = 'Checklist for windows',
                description = 'Checklist for circular windows',
                created_at = '2014-12-10T23:36:30Z',
                updated_at = '2014-12-11T04:58:42Z',
                alternative_response_set_id = 1234,
                sections = [
                    procore_sdk.models.checklist_template_section.Checklist Template Section(
                        id = 142, 
                        name = 'Fall Protection and Perimeter Protection', 
                        position = 2, 
                        items = [
                            procore_sdk.models.checklist_template_item.Checklist Template Item(
                                id = 2, 
                                name = 'Item 1', 
                                position = 1, 
                                section_id = 21, 
                                details = '+/- 1 degrees', 
                                response_set = procore_sdk.models.checklist_item_response_set.ChecklistItemResponseSet(
                                    id = 1, 
                                    name = 'Safety Responses', 
                                    created_at = '2012-10-02T21:00Z', 
                                    updated_at = '2012-10-02T21:00Z', 
                                    responses = [
                                        procore_sdk.models.checklist_response.Checklist Response(
                                            id = 1, 
                                            item_status_id = 1, 
                                            name = 'Safe - Knowledge', 
                                            corresponding_status = 'yes', )
                                        ], ), 
                                response_type_id = 12, 
                                type = procore_sdk.models.checklist_template_item_type.Checklist_Template_Item_type(
                                    id = 1, 
                                    category = 'multiple choice', 
                                    name = 'default', ), )
                            ], 
                        synced_to = procore_sdk.models.checklist_template_section_synced_to.Checklist_Template_Section_synced_to(
                            company_id = 23, 
                            list_template_id = 12, ), )
                    ],
                inspection_type = procore_sdk.models.inspection_type.Inspection Type(
                    id = 142, 
                    name = 'Safety Compliance', 
                    created_at = '2014-12-10T23:36:30Z', 
                    updated_at = '2014-12-11T04:58:42Z', 
                    audit_transaction_timestamp = '2014-12-11T04:58:42Z', 
                    source_id = 1, 
                    deleted_at = '2014-12-11T04:58:42Z', 
                    company_id = 388, 
                    is_deletable = True, ),
                trade = procore_sdk.models.trade.Trade(
                    id = 999, 
                    name = '09 - acoustical panels', 
                    active = True, 
                    updated_at = '2016-08-01T23:33:54Z', ),
                created_by = procore_sdk.models.rest_v10_projects_project_id_work_logs_get_200_response_inner_created_by.RestV10ProjectsProjectIdWorkLogsGet_200_response_inner_created_by(
                    id = 160586, 
                    login = 'carl.contractor@example.com', 
                    name = 'Carl Contractor', ),
                company_attachments = [
                    procore_sdk.models.rest_v10_work_order_contracts_post_201_response_attachments_inner.RestV10WorkOrderContractsPost_201_response_attachments_inner(
                        id = 5324, 
                        url = 'http://www.example.com/', 
                        filename = 'january_receipt_copy.jpg', )
                    ],
                attachments = [
                    procore_sdk.models.rest_v10_work_order_contracts_post_201_response_attachments_inner.RestV10WorkOrderContractsPost_201_response_attachments_inner(
                        id = 5324, 
                        url = 'http://www.example.com/', 
                        filename = 'january_receipt_copy.jpg', )
                    ],
                response_set = procore_sdk.models.checklist_default_response_set.ChecklistDefaultResponseSet(
                    conforming_response = 'Pass', 
                    deficient_response = 'Fail', 
                    global = True, )
            )
        else:
            return ChecklistTemplate2(
        )
        """

    def testChecklistTemplate2(self):
        """Test ChecklistTemplate2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
