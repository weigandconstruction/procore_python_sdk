# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.body111 import Body111
from procore_sdk.models.checklist import Checklist
from procore_sdk.models.checklist3 import Checklist3
from procore_sdk.models.checklist5 import Checklist5
from procore_sdk.models.checklist_body import ChecklistBody
from procore_sdk.models.checklist_body1 import ChecklistBody1
from procore_sdk.models.checklist_list_group import ChecklistListGroup
from procore_sdk.models.rest_v10_checklist_lists_get200_response_inner import RestV10ChecklistListsGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_checklist_lists_id_patch_request import RestV10ProjectsProjectIdChecklistListsIdPatchRequest
from procore_sdk.models.rest_v10_projects_project_id_checklist_lists_post_request import RestV10ProjectsProjectIdChecklistListsPostRequest
from procore_sdk.models.rest_v11_projects_project_id_checklist_lists_id_patch_request import RestV11ProjectsProjectIdChecklistListsIdPatchRequest
from procore_sdk.models.rest_v11_projects_project_id_checklist_lists_post_request import RestV11ProjectsProjectIdChecklistListsPostRequest

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class QualitySafetyInspectionsChecklistsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_checklist_lists_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_view: Annotated[Optional[StrictStr], Field(description="If 'recycle', return deleted Checklists.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[StrictInt], Field(description="Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Returns item(s) matching the specified search query string.")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ChecklistListsGet200ResponseInner]:
        """(Deprecated) List Checklists

        Lists Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_view: If 'recycle', return deleted Checklists.
        :type filters_view: str
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)
        :type filters_location_id: int
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_search: Returns item(s) matching the specified search query string.
        :type filters_search: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/checklist/lists is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_view=filters_view,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_search=filters_search,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ChecklistListsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_checklist_lists_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_view: Annotated[Optional[StrictStr], Field(description="If 'recycle', return deleted Checklists.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[StrictInt], Field(description="Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Returns item(s) matching the specified search query string.")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ChecklistListsGet200ResponseInner]]:
        """(Deprecated) List Checklists

        Lists Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_view: If 'recycle', return deleted Checklists.
        :type filters_view: str
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)
        :type filters_location_id: int
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_search: Returns item(s) matching the specified search query string.
        :type filters_search: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/checklist/lists is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_view=filters_view,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_search=filters_search,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ChecklistListsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_checklist_lists_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_view: Annotated[Optional[StrictStr], Field(description="If 'recycle', return deleted Checklists.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[StrictInt], Field(description="Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Returns item(s) matching the specified search query string.")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) List Checklists

        Lists Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_view: If 'recycle', return deleted Checklists.
        :type filters_view: str
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)
        :type filters_location_id: int
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_search: Returns item(s) matching the specified search query string.
        :type filters_search: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/checklist/lists is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_view=filters_view,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_search=filters_search,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ChecklistListsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_checklist_lists_get_serialize(
        self,
        procore_company_id,
        project_id,
        filters_view,
        filters_inspection_type_id,
        filters_point_of_contact_id,
        filters_inspector_id,
        filters_list_template_id,
        filters_location_id,
        filters_spec_section_id,
        filters_responsible_contractor_id,
        filters_status,
        filters_trade_id,
        filters_search,
        filters_due_at,
        filters_created_at,
        filters_updated_at,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[inspection_type_id]': 'csv',
            'filters[point_of_contact_id]': 'csv',
            'filters[inspector_id]': 'csv',
            'filters[list_template_id]': 'csv',
            'filters[spec_section_id]': 'csv',
            'filters[responsible_contractor_id]': 'csv',
            'filters[status]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if filters_view is not None:
            
            _query_params.append(('filters[view]', filters_view))
            
        if filters_inspection_type_id is not None:
            
            _query_params.append(('filters[inspection_type_id]', filters_inspection_type_id))
            
        if filters_point_of_contact_id is not None:
            
            _query_params.append(('filters[point_of_contact_id]', filters_point_of_contact_id))
            
        if filters_inspector_id is not None:
            
            _query_params.append(('filters[inspector_id]', filters_inspector_id))
            
        if filters_list_template_id is not None:
            
            _query_params.append(('filters[list_template_id]', filters_list_template_id))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id]', filters_location_id))
            
        if filters_spec_section_id is not None:
            
            _query_params.append(('filters[spec_section_id]', filters_spec_section_id))
            
        if filters_responsible_contractor_id is not None:
            
            _query_params.append(('filters[responsible_contractor_id]', filters_responsible_contractor_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id]', filters_trade_id))
            
        if filters_search is not None:
            
            _query_params.append(('filters[search]', filters_search))
            
        if filters_due_at is not None:
            if isinstance(filters_due_at, datetime):
                _query_params.append(
                    (
                        'filters[due_at]',
                        filters_due_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[due_at]', filters_due_at))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/checklist/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_checklist_lists_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) Delete Checklist

        Deletes Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_checklist_lists_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) Delete Checklist

        Deletes Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_checklist_lists_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Delete Checklist

        Deletes Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_checklist_lists_id_delete_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_checklist_lists_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist3:
        """(Deprecated) Show Checklist

        Retrieves Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist3",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_checklist_lists_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist3]:
        """(Deprecated) Show Checklist

        Retrieves Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist3",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_checklist_lists_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Show Checklist

        Retrieves Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist3",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_checklist_lists_id_get_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_checklist_lists_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        checklist_body1: ChecklistBody1,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist3:
        """(Deprecated) Update Checklist

        Updates Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param checklist_body1: (required)
        :type checklist_body1: ChecklistBody1
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            checklist_body1=checklist_body1,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist3",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_checklist_lists_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        checklist_body1: ChecklistBody1,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist3]:
        """(Deprecated) Update Checklist

        Updates Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param checklist_body1: (required)
        :type checklist_body1: ChecklistBody1
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            checklist_body1=checklist_body1,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist3",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_checklist_lists_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        checklist_body1: ChecklistBody1,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Update Checklist

        Updates Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param checklist_body1: (required)
        :type checklist_body1: ChecklistBody1
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /rest/v1.0/checklist/lists/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            checklist_body1=checklist_body1,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist3",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_checklist_lists_id_patch_serialize(
        self,
        procore_company_id,
        id,
        checklist_body1,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if checklist_body1 is not None:
            _body_params = checklist_body1


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_checklist_lists_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        checklist_body: ChecklistBody,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist3:
        """(Deprecated) Create Checklist

        Creates Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param checklist_body: (required)
        :type checklist_body: ChecklistBody
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("POST /rest/v1.0/checklist/lists is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            checklist_body=checklist_body,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist3",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_checklist_lists_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        checklist_body: ChecklistBody,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist3]:
        """(Deprecated) Create Checklist

        Creates Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param checklist_body: (required)
        :type checklist_body: ChecklistBody
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("POST /rest/v1.0/checklist/lists is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            checklist_body=checklist_body,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist3",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_checklist_lists_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        checklist_body: ChecklistBody,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Create Checklist

        Creates Inspection Checklist in a specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param checklist_body: (required)
        :type checklist_body: ChecklistBody
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("POST /rest/v1.0/checklist/lists is deprecated.", DeprecationWarning)

        _param = self._rest_v10_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            checklist_body=checklist_body,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist3",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_checklist_lists_post_serialize(
        self,
        procore_company_id,
        checklist_body,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if checklist_body is not None:
            _body_params = checklist_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/checklist/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_template_id: Annotated[Optional[List[StrictStr]], Field(description="Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Checklist5]:
        """List Checklists (Inspections)

        Lists Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_template_id: Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
        :type filters_template_id: List[str]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_template_id=filters_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Checklist5]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_template_id: Annotated[Optional[List[StrictStr]], Field(description="Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Checklist5]]:
        """List Checklists (Inspections)

        Lists Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_template_id: Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
        :type filters_template_id: List[str]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_template_id=filters_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Checklist5]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_template_id: Annotated[Optional[List[StrictStr]], Field(description="Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Checklists (Inspections)

        Lists Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_template_id: Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
        :type filters_template_id: List[str]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_template_id=filters_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Checklist5]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_id,
        filters_inspection_date,
        filters_inspection_type_id,
        filters_inspector_id,
        filters_template_id,
        filters_location_id,
        filters_managed_equipment_id,
        filters_point_of_contact_id,
        filters_spec_section_id,
        filters_responsible_contractor_id,
        filters_closed_by_id,
        filters_status,
        filters_trade_id,
        filters_query,
        filters_due_at,
        filters_created_at,
        filters_updated_at,
        filters_closed_at,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[id]': 'csv',
            'filters[inspection_type_id]': 'csv',
            'filters[inspector_id]': 'csv',
            'filters[template_id]': 'csv',
            'filters[location_id]': 'csv',
            'filters[point_of_contact_id]': 'csv',
            'filters[spec_section_id]': 'csv',
            'filters[responsible_contractor_id]': 'csv',
            'filters[closed_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id]', filters_id))
            
        if filters_inspection_date is not None:
            if isinstance(filters_inspection_date, date):
                _query_params.append(
                    (
                        'filters[inspection_date]',
                        filters_inspection_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[inspection_date]', filters_inspection_date))
            
        if filters_inspection_type_id is not None:
            
            _query_params.append(('filters[inspection_type_id]', filters_inspection_type_id))
            
        if filters_inspector_id is not None:
            
            _query_params.append(('filters[inspector_id]', filters_inspector_id))
            
        if filters_template_id is not None:
            
            _query_params.append(('filters[template_id]', filters_template_id))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id]', filters_location_id))
            
        if filters_managed_equipment_id is not None:
            
            _query_params.append(('filters[managed_equipment_id]', filters_managed_equipment_id))
            
        if filters_point_of_contact_id is not None:
            
            _query_params.append(('filters[point_of_contact_id]', filters_point_of_contact_id))
            
        if filters_spec_section_id is not None:
            
            _query_params.append(('filters[spec_section_id]', filters_spec_section_id))
            
        if filters_responsible_contractor_id is not None:
            
            _query_params.append(('filters[responsible_contractor_id]', filters_responsible_contractor_id))
            
        if filters_closed_by_id is not None:
            
            _query_params.append(('filters[closed_by_id]', filters_closed_by_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id]', filters_trade_id))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_due_at is not None:
            if isinstance(filters_due_at, datetime):
                _query_params.append(
                    (
                        'filters[due_at]',
                        filters_due_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[due_at]', filters_due_at))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_closed_at is not None:
            if isinstance(filters_closed_at, date):
                _query_params.append(
                    (
                        'filters[closed_at]',
                        filters_closed_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[closed_at]', filters_closed_at))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_grouped_index_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ChecklistListGroup]:
        """List Grouped Checklists (Inspections)

        Lists Grouped Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param group_by:
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_grouped_index_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ChecklistListGroup]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_grouped_index_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ChecklistListGroup]]:
        """List Grouped Checklists (Inspections)

        Lists Grouped Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param group_by:
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_grouped_index_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ChecklistListGroup]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_grouped_index_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Grouped Checklists (Inspections)

        Lists Grouped Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param group_by:
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_grouped_index_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ChecklistListGroup]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_grouped_index_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_id,
        filters_inspection_date,
        filters_inspection_type_id,
        filters_inspector_id,
        filters_list_template_id,
        filters_location_id,
        filters_managed_equipment_id,
        filters_point_of_contact_id,
        filters_spec_section_id,
        filters_responsible_contractor_id,
        filters_closed_by_id,
        filters_status,
        filters_trade_id,
        filters_query,
        filters_due_at,
        filters_created_at,
        filters_updated_at,
        filters_closed_at,
        sort,
        group_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[id]': 'csv',
            'filters[inspection_type_id]': 'csv',
            'filters[inspector_id]': 'csv',
            'filters[list_template_id]': 'csv',
            'filters[location_id]': 'csv',
            'filters[point_of_contact_id]': 'csv',
            'filters[spec_section_id]': 'csv',
            'filters[responsible_contractor_id]': 'csv',
            'filters[closed_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id]', filters_id))
            
        if filters_inspection_date is not None:
            if isinstance(filters_inspection_date, date):
                _query_params.append(
                    (
                        'filters[inspection_date]',
                        filters_inspection_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[inspection_date]', filters_inspection_date))
            
        if filters_inspection_type_id is not None:
            
            _query_params.append(('filters[inspection_type_id]', filters_inspection_type_id))
            
        if filters_inspector_id is not None:
            
            _query_params.append(('filters[inspector_id]', filters_inspector_id))
            
        if filters_list_template_id is not None:
            
            _query_params.append(('filters[list_template_id]', filters_list_template_id))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id]', filters_location_id))
            
        if filters_managed_equipment_id is not None:
            
            _query_params.append(('filters[managed_equipment_id]', filters_managed_equipment_id))
            
        if filters_point_of_contact_id is not None:
            
            _query_params.append(('filters[point_of_contact_id]', filters_point_of_contact_id))
            
        if filters_spec_section_id is not None:
            
            _query_params.append(('filters[spec_section_id]', filters_spec_section_id))
            
        if filters_responsible_contractor_id is not None:
            
            _query_params.append(('filters[responsible_contractor_id]', filters_responsible_contractor_id))
            
        if filters_closed_by_id is not None:
            
            _query_params.append(('filters[closed_by_id]', filters_closed_by_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id]', filters_trade_id))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_due_at is not None:
            if isinstance(filters_due_at, datetime):
                _query_params.append(
                    (
                        'filters[due_at]',
                        filters_due_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[due_at]', filters_due_at))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_closed_at is not None:
            if isinstance(filters_closed_at, date):
                _query_params.append(
                    (
                        'filters[closed_at]',
                        filters_closed_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[closed_at]', filters_closed_at))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if group_by is not None:
            
            _query_params.append(('group_by', group_by))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists/grouped_index',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Checklist (Inspection)

        Deletes specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Checklist (Inspection)

        Deletes specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Checklist (Inspection)

        Deletes specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_id_delete_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist5:
        """Show Checklist (Inspection)

        Returns the specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist5]:
        """Show Checklist (Inspection)

        Returns the specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Checklist (Inspection)

        Returns the specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_id_get_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_checklist_lists_id_patch_request: RestV10ProjectsProjectIdChecklistListsIdPatchRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist5:
        """Update Checklist (Inspection)

        Updates a specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_checklist_lists_id_patch_request: (required)
        :type rest_v10_projects_project_id_checklist_lists_id_patch_request: RestV10ProjectsProjectIdChecklistListsIdPatchRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            rest_v10_projects_project_id_checklist_lists_id_patch_request=rest_v10_projects_project_id_checklist_lists_id_patch_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_checklist_lists_id_patch_request: RestV10ProjectsProjectIdChecklistListsIdPatchRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist5]:
        """Update Checklist (Inspection)

        Updates a specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_checklist_lists_id_patch_request: (required)
        :type rest_v10_projects_project_id_checklist_lists_id_patch_request: RestV10ProjectsProjectIdChecklistListsIdPatchRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            rest_v10_projects_project_id_checklist_lists_id_patch_request=rest_v10_projects_project_id_checklist_lists_id_patch_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_checklist_lists_id_patch_request: RestV10ProjectsProjectIdChecklistListsIdPatchRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Checklist (Inspection)

        Updates a specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_checklist_lists_id_patch_request: (required)
        :type rest_v10_projects_project_id_checklist_lists_id_patch_request: RestV10ProjectsProjectIdChecklistListsIdPatchRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            rest_v10_projects_project_id_checklist_lists_id_patch_request=rest_v10_projects_project_id_checklist_lists_id_patch_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_id_patch_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        rest_v10_projects_project_id_checklist_lists_id_patch_request,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_checklist_lists_id_patch_request is not None:
            _body_params = rest_v10_projects_project_id_checklist_lists_id_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_send_email_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        body111: Body111,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Send Checklist (Inspection) Email

        Send an email for a Checklist (Inspection) in a Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param body111: (required)
        :type body111: Body111
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_send_email_post_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            body111=body111,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_send_email_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        body111: Body111,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Send Checklist (Inspection) Email

        Send an email for a Checklist (Inspection) in a Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param body111: (required)
        :type body111: Body111
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_send_email_post_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            body111=body111,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_id_send_email_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        body111: Body111,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send Checklist (Inspection) Email

        Send an email for a Checklist (Inspection) in a Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param body111: (required)
        :type body111: Body111
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_id_send_email_post_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            body111=body111,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_id_send_email_post_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        body111,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if body111 is not None:
            _body_params = body111


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists/{id}/send_email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_checklist_lists_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_checklist_lists_post_request: RestV10ProjectsProjectIdChecklistListsPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist5:
        """Create Checklist (Inspection)

        Creates an instance of Inspection in a given Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_checklist_lists_post_request: (required)
        :type rest_v10_projects_project_id_checklist_lists_post_request: RestV10ProjectsProjectIdChecklistListsPostRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_checklist_lists_post_request=rest_v10_projects_project_id_checklist_lists_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist5",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_checklist_lists_post_request: RestV10ProjectsProjectIdChecklistListsPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist5]:
        """Create Checklist (Inspection)

        Creates an instance of Inspection in a given Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_checklist_lists_post_request: (required)
        :type rest_v10_projects_project_id_checklist_lists_post_request: RestV10ProjectsProjectIdChecklistListsPostRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_checklist_lists_post_request=rest_v10_projects_project_id_checklist_lists_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist5",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_checklist_lists_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_checklist_lists_post_request: RestV10ProjectsProjectIdChecklistListsPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Checklist (Inspection)

        Creates an instance of Inspection in a given Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_checklist_lists_post_request: (required)
        :type rest_v10_projects_project_id_checklist_lists_post_request: RestV10ProjectsProjectIdChecklistListsPostRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_checklist_lists_post_request=rest_v10_projects_project_id_checklist_lists_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist5",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_checklist_lists_post_serialize(
        self,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_checklist_lists_post_request,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_checklist_lists_post_request is not None:
            _body_params = rest_v10_projects_project_id_checklist_lists_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/projects/{project_id}/checklist/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_template_id: Annotated[Optional[List[StrictStr]], Field(description="Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Checklist5]:
        """List Recycled Checklists (Inspections)

        Lists Recycled Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_template_id: Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
        :type filters_template_id: List[str]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_template_id=filters_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Checklist5]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_template_id: Annotated[Optional[List[StrictStr]], Field(description="Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Checklist5]]:
        """List Recycled Checklists (Inspections)

        Lists Recycled Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_template_id: Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
        :type filters_template_id: List[str]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_template_id=filters_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Checklist5]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_template_id: Annotated[Optional[List[StrictStr]], Field(description="Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Recycled Checklists (Inspections)

        Lists Recycled Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_template_id: Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
        :type filters_template_id: List[str]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_template_id=filters_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Checklist5]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_checklist_lists_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_id,
        filters_inspection_date,
        filters_inspection_type_id,
        filters_inspector_id,
        filters_template_id,
        filters_location_id,
        filters_managed_equipment_id,
        filters_point_of_contact_id,
        filters_spec_section_id,
        filters_responsible_contractor_id,
        filters_closed_by_id,
        filters_status,
        filters_trade_id,
        filters_query,
        filters_due_at,
        filters_created_at,
        filters_updated_at,
        filters_closed_at,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[id]': 'csv',
            'filters[inspection_type_id]': 'csv',
            'filters[inspector_id]': 'csv',
            'filters[template_id]': 'csv',
            'filters[location_id]': 'csv',
            'filters[point_of_contact_id]': 'csv',
            'filters[spec_section_id]': 'csv',
            'filters[responsible_contractor_id]': 'csv',
            'filters[closed_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id]', filters_id))
            
        if filters_inspection_date is not None:
            if isinstance(filters_inspection_date, date):
                _query_params.append(
                    (
                        'filters[inspection_date]',
                        filters_inspection_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[inspection_date]', filters_inspection_date))
            
        if filters_inspection_type_id is not None:
            
            _query_params.append(('filters[inspection_type_id]', filters_inspection_type_id))
            
        if filters_inspector_id is not None:
            
            _query_params.append(('filters[inspector_id]', filters_inspector_id))
            
        if filters_template_id is not None:
            
            _query_params.append(('filters[template_id]', filters_template_id))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id]', filters_location_id))
            
        if filters_managed_equipment_id is not None:
            
            _query_params.append(('filters[managed_equipment_id]', filters_managed_equipment_id))
            
        if filters_point_of_contact_id is not None:
            
            _query_params.append(('filters[point_of_contact_id]', filters_point_of_contact_id))
            
        if filters_spec_section_id is not None:
            
            _query_params.append(('filters[spec_section_id]', filters_spec_section_id))
            
        if filters_responsible_contractor_id is not None:
            
            _query_params.append(('filters[responsible_contractor_id]', filters_responsible_contractor_id))
            
        if filters_closed_by_id is not None:
            
            _query_params.append(('filters[closed_by_id]', filters_closed_by_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id]', filters_trade_id))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_due_at is not None:
            if isinstance(filters_due_at, datetime):
                _query_params.append(
                    (
                        'filters[due_at]',
                        filters_due_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[due_at]', filters_due_at))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_closed_at is not None:
            if isinstance(filters_closed_at, date):
                _query_params.append(
                    (
                        'filters[closed_at]',
                        filters_closed_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[closed_at]', filters_closed_at))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/checklist/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ChecklistListGroup]:
        """List Grouped Recycled Checklists (Inspections)

        Lists Recycled Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param group_by:
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ChecklistListGroup]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ChecklistListGroup]]:
        """List Grouped Recycled Checklists (Inspections)

        Lists Recycled Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param group_by:
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ChecklistListGroup]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_inspection_date: Annotated[Optional[date], Field(description="Return item(s) with inspection date within the specified ISO 8601 date range.")] = None,
        filters_inspection_type_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.")] = None,
        filters_inspector_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are inspectors.")] = None,
        filters_list_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_point_of_contact_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) where the specified User IDs are the point of contact.")] = None,
        filters_spec_section_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.")] = None,
        filters_responsible_contractor_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.")] = None,
        filters_closed_by_id: Annotated[Optional[List[StrictInt]], Field(description="Array of User IDs. Return item(s) closed by the specified User ID.")] = None,
        filters_status: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified statuses")] = None,
        filters_trade_id: Annotated[Optional[StrictInt], Field(description="Trade ID")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_due_at: Annotated[Optional[datetime], Field(description="Return item(s) due within the specified date range.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        sort: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Grouped Recycled Checklists (Inspections)

        Lists Recycled Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_inspection_date: Return item(s) with inspection date within the specified ISO 8601 date range.
        :type filters_inspection_date: date
        :param filters_inspection_type_id: Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
        :type filters_inspection_type_id: List[int]
        :param filters_inspector_id: Array of User IDs. Return item(s) where the specified User IDs are inspectors.
        :type filters_inspector_id: List[int]
        :param filters_list_template_id: Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
        :type filters_list_template_id: List[int]
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_point_of_contact_id: Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
        :type filters_point_of_contact_id: List[int]
        :param filters_spec_section_id: Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
        :type filters_spec_section_id: List[int]
        :param filters_responsible_contractor_id: Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
        :type filters_responsible_contractor_id: List[int]
        :param filters_closed_by_id: Array of User IDs. Return item(s) closed by the specified User ID.
        :type filters_closed_by_id: List[int]
        :param filters_status: Return item(s) with the specified statuses
        :type filters_status: int
        :param filters_trade_id: Trade ID
        :type filters_trade_id: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_due_at: Return item(s) due within the specified date range.
        :type filters_due_at: datetime
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param sort:
        :type sort: str
        :param group_by:
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_inspection_date=filters_inspection_date,
            filters_inspection_type_id=filters_inspection_type_id,
            filters_inspector_id=filters_inspector_id,
            filters_list_template_id=filters_list_template_id,
            filters_location_id=filters_location_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_point_of_contact_id=filters_point_of_contact_id,
            filters_spec_section_id=filters_spec_section_id,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_closed_by_id=filters_closed_by_id,
            filters_status=filters_status,
            filters_trade_id=filters_trade_id,
            filters_query=filters_query,
            filters_due_at=filters_due_at,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            sort=sort,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ChecklistListGroup]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_id,
        filters_inspection_date,
        filters_inspection_type_id,
        filters_inspector_id,
        filters_list_template_id,
        filters_location_id,
        filters_managed_equipment_id,
        filters_point_of_contact_id,
        filters_spec_section_id,
        filters_responsible_contractor_id,
        filters_closed_by_id,
        filters_status,
        filters_trade_id,
        filters_query,
        filters_due_at,
        filters_created_at,
        filters_updated_at,
        filters_closed_at,
        sort,
        group_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[id]': 'csv',
            'filters[inspection_type_id]': 'csv',
            'filters[inspector_id]': 'csv',
            'filters[list_template_id]': 'csv',
            'filters[location_id]': 'csv',
            'filters[point_of_contact_id]': 'csv',
            'filters[spec_section_id]': 'csv',
            'filters[responsible_contractor_id]': 'csv',
            'filters[closed_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id]', filters_id))
            
        if filters_inspection_date is not None:
            if isinstance(filters_inspection_date, date):
                _query_params.append(
                    (
                        'filters[inspection_date]',
                        filters_inspection_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[inspection_date]', filters_inspection_date))
            
        if filters_inspection_type_id is not None:
            
            _query_params.append(('filters[inspection_type_id]', filters_inspection_type_id))
            
        if filters_inspector_id is not None:
            
            _query_params.append(('filters[inspector_id]', filters_inspector_id))
            
        if filters_list_template_id is not None:
            
            _query_params.append(('filters[list_template_id]', filters_list_template_id))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id]', filters_location_id))
            
        if filters_managed_equipment_id is not None:
            
            _query_params.append(('filters[managed_equipment_id]', filters_managed_equipment_id))
            
        if filters_point_of_contact_id is not None:
            
            _query_params.append(('filters[point_of_contact_id]', filters_point_of_contact_id))
            
        if filters_spec_section_id is not None:
            
            _query_params.append(('filters[spec_section_id]', filters_spec_section_id))
            
        if filters_responsible_contractor_id is not None:
            
            _query_params.append(('filters[responsible_contractor_id]', filters_responsible_contractor_id))
            
        if filters_closed_by_id is not None:
            
            _query_params.append(('filters[closed_by_id]', filters_closed_by_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id]', filters_trade_id))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_due_at is not None:
            if isinstance(filters_due_at, datetime):
                _query_params.append(
                    (
                        'filters[due_at]',
                        filters_due_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[due_at]', filters_due_at))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_closed_at is not None:
            if isinstance(filters_closed_at, date):
                _query_params.append(
                    (
                        'filters[closed_at]',
                        filters_closed_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[closed_at]', filters_closed_at))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if group_by is not None:
            
            _query_params.append(('group_by', group_by))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/checklist/lists/grouped_index',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist5:
        """Show Recycled Checklist (Inspection)

        Returns the specified Recycled Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist5]:
        """Show Recycled Checklist (Inspection)

        Returns the specified Recycled Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Recycled Checklist (Inspection)

        Returns the specified Recycled Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist5",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Restore Deleted Checklist (Inspection)

        Restores a specified deleted Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Restore Deleted Checklist (Inspection)

        Restores a specified deleted Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Restore Deleted Checklist (Inspection)

        Restores a specified deleted Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/checklist/lists/{id}/restore',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v11_projects_project_id_checklist_lists_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Checklist (Inspection)

        Deletes specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v11_projects_project_id_checklist_lists_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Checklist (Inspection)

        Deletes specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v11_projects_project_id_checklist_lists_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Checklist (Inspection)

        Deletes specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v11_projects_project_id_checklist_lists_id_delete_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.1/projects/{project_id}/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v11_projects_project_id_checklist_lists_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v11_projects_project_id_checklist_lists_id_patch_request: RestV11ProjectsProjectIdChecklistListsIdPatchRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist:
        """Update Checklist (Inspection)

        Updates a specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v11_projects_project_id_checklist_lists_id_patch_request: (required)
        :type rest_v11_projects_project_id_checklist_lists_id_patch_request: RestV11ProjectsProjectIdChecklistListsIdPatchRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            rest_v11_projects_project_id_checklist_lists_id_patch_request=rest_v11_projects_project_id_checklist_lists_id_patch_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v11_projects_project_id_checklist_lists_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v11_projects_project_id_checklist_lists_id_patch_request: RestV11ProjectsProjectIdChecklistListsIdPatchRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist]:
        """Update Checklist (Inspection)

        Updates a specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v11_projects_project_id_checklist_lists_id_patch_request: (required)
        :type rest_v11_projects_project_id_checklist_lists_id_patch_request: RestV11ProjectsProjectIdChecklistListsIdPatchRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            rest_v11_projects_project_id_checklist_lists_id_patch_request=rest_v11_projects_project_id_checklist_lists_id_patch_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v11_projects_project_id_checklist_lists_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v11_projects_project_id_checklist_lists_id_patch_request: RestV11ProjectsProjectIdChecklistListsIdPatchRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Checklist (Inspection)

        Updates a specified Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v11_projects_project_id_checklist_lists_id_patch_request: (required)
        :type rest_v11_projects_project_id_checklist_lists_id_patch_request: RestV11ProjectsProjectIdChecklistListsIdPatchRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            rest_v11_projects_project_id_checklist_lists_id_patch_request=rest_v11_projects_project_id_checklist_lists_id_patch_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Checklist",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v11_projects_project_id_checklist_lists_id_patch_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        rest_v11_projects_project_id_checklist_lists_id_patch_request,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v11_projects_project_id_checklist_lists_id_patch_request is not None:
            _body_params = rest_v11_projects_project_id_checklist_lists_id_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.1/projects/{project_id}/checklist/lists/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v11_projects_project_id_checklist_lists_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v11_projects_project_id_checklist_lists_post_request: RestV11ProjectsProjectIdChecklistListsPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Checklist:
        """Create Checklist (Inspection)

        Creates an instance of Inspection in a given Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v11_projects_project_id_checklist_lists_post_request: (required)
        :type rest_v11_projects_project_id_checklist_lists_post_request: RestV11ProjectsProjectIdChecklistListsPostRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v11_projects_project_id_checklist_lists_post_request=rest_v11_projects_project_id_checklist_lists_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v11_projects_project_id_checklist_lists_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v11_projects_project_id_checklist_lists_post_request: RestV11ProjectsProjectIdChecklistListsPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Checklist]:
        """Create Checklist (Inspection)

        Creates an instance of Inspection in a given Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v11_projects_project_id_checklist_lists_post_request: (required)
        :type rest_v11_projects_project_id_checklist_lists_post_request: RestV11ProjectsProjectIdChecklistListsPostRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v11_projects_project_id_checklist_lists_post_request=rest_v11_projects_project_id_checklist_lists_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v11_projects_project_id_checklist_lists_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v11_projects_project_id_checklist_lists_post_request: RestV11ProjectsProjectIdChecklistListsPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Checklist (Inspection)

        Creates an instance of Inspection in a given Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v11_projects_project_id_checklist_lists_post_request: (required)
        :type rest_v11_projects_project_id_checklist_lists_post_request: RestV11ProjectsProjectIdChecklistListsPostRequest
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_lists_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v11_projects_project_id_checklist_lists_post_request=rest_v11_projects_project_id_checklist_lists_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Checklist",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v11_projects_project_id_checklist_lists_post_serialize(
        self,
        procore_company_id,
        project_id,
        rest_v11_projects_project_id_checklist_lists_post_request,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v11_projects_project_id_checklist_lists_post_request is not None:
            _body_params = rest_v11_projects_project_id_checklist_lists_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.1/projects/{project_id}/checklist/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Restore Deleted Checklist (Inspection)

        Restores a specified deleted Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Restore Deleted Checklist (Inspection)

        Restores a specified deleted Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Checklist ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Restore Deleted Checklist (Inspection)

        Restores a specified deleted Checklist (Inspection)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Checklist ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.1/projects/{project_id}/recycle_bin/checklist/lists/{id}/restore',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


