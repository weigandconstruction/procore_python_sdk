# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_projects_project_id_incidents_injuries_get200_response_inner import RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_incidents_injuries_id_patch_request import RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest
from procore_sdk.models.rest_v10_projects_project_id_incidents_injuries_post_request import RestV10ProjectsProjectIdIncidentsInjuriesPostRequest

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class QualitySafetyIncidentsInjuriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_affected_company_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Company IDs. Returns item(s) with the specified affected Company IDs.")] = None,
        filters_affected_party_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.")] = None,
        filters_affected_person_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Person IDs. Returns item(s) with the specified affected Person IDs.")] = None,
        filters_harm_source_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.")] = None,
        filters_work_activity_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_recordable: Annotated[Optional[StrictBool], Field(description="Return item(s) that are recordable.")] = None,
        filters_affected_body_part: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with any of the specified Affected Body Parts.")] = None,
        filters_affliction_type_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Affliction Type IDs")] = None,
        filters_body_part_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Body Part IDs")] = None,
        filters_filing_type: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing query")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]:
        """List Injuries

        Returns a list of Injuries for a given project.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param incident_id: Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.
        :type incident_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_affected_company_id: Array of Company IDs. Returns item(s) with the specified affected Company IDs.
        :type filters_affected_company_id: List[int]
        :param filters_affected_party_id: Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.
        :type filters_affected_party_id: List[int]
        :param filters_affected_person_id: Array of Person IDs. Returns item(s) with the specified affected Person IDs.
        :type filters_affected_person_id: List[int]
        :param filters_harm_source_id: Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.
        :type filters_harm_source_id: List[int]
        :param filters_work_activity_id: Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.
        :type filters_work_activity_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_recordable: Return item(s) that are recordable.
        :type filters_recordable: bool
        :param filters_affected_body_part: Return item(s) with any of the specified Affected Body Parts.
        :type filters_affected_body_part: List[str]
        :param filters_affliction_type_id: Return item(s) with the specified Affliction Type IDs
        :type filters_affliction_type_id: int
        :param filters_body_part_id: Return item(s) with the specified Body Part IDs
        :type filters_body_part_id: List[int]
        :param filters_filing_type: Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.
        :type filters_filing_type: List[str]
        :param filters_query: Return item(s) containing query
        :type filters_query: str
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            incident_id=incident_id,
            page=page,
            per_page=per_page,
            filters_created_at=filters_created_at,
            filters_affected_company_id=filters_affected_company_id,
            filters_affected_party_id=filters_affected_party_id,
            filters_affected_person_id=filters_affected_person_id,
            filters_harm_source_id=filters_harm_source_id,
            filters_work_activity_id=filters_work_activity_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_recordable=filters_recordable,
            filters_affected_body_part=filters_affected_body_part,
            filters_affliction_type_id=filters_affliction_type_id,
            filters_body_part_id=filters_body_part_id,
            filters_filing_type=filters_filing_type,
            filters_query=filters_query,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_affected_company_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Company IDs. Returns item(s) with the specified affected Company IDs.")] = None,
        filters_affected_party_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.")] = None,
        filters_affected_person_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Person IDs. Returns item(s) with the specified affected Person IDs.")] = None,
        filters_harm_source_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.")] = None,
        filters_work_activity_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_recordable: Annotated[Optional[StrictBool], Field(description="Return item(s) that are recordable.")] = None,
        filters_affected_body_part: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with any of the specified Affected Body Parts.")] = None,
        filters_affliction_type_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Affliction Type IDs")] = None,
        filters_body_part_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Body Part IDs")] = None,
        filters_filing_type: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing query")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]]:
        """List Injuries

        Returns a list of Injuries for a given project.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param incident_id: Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.
        :type incident_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_affected_company_id: Array of Company IDs. Returns item(s) with the specified affected Company IDs.
        :type filters_affected_company_id: List[int]
        :param filters_affected_party_id: Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.
        :type filters_affected_party_id: List[int]
        :param filters_affected_person_id: Array of Person IDs. Returns item(s) with the specified affected Person IDs.
        :type filters_affected_person_id: List[int]
        :param filters_harm_source_id: Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.
        :type filters_harm_source_id: List[int]
        :param filters_work_activity_id: Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.
        :type filters_work_activity_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_recordable: Return item(s) that are recordable.
        :type filters_recordable: bool
        :param filters_affected_body_part: Return item(s) with any of the specified Affected Body Parts.
        :type filters_affected_body_part: List[str]
        :param filters_affliction_type_id: Return item(s) with the specified Affliction Type IDs
        :type filters_affliction_type_id: int
        :param filters_body_part_id: Return item(s) with the specified Body Part IDs
        :type filters_body_part_id: List[int]
        :param filters_filing_type: Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.
        :type filters_filing_type: List[str]
        :param filters_query: Return item(s) containing query
        :type filters_query: str
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            incident_id=incident_id,
            page=page,
            per_page=per_page,
            filters_created_at=filters_created_at,
            filters_affected_company_id=filters_affected_company_id,
            filters_affected_party_id=filters_affected_party_id,
            filters_affected_person_id=filters_affected_person_id,
            filters_harm_source_id=filters_harm_source_id,
            filters_work_activity_id=filters_work_activity_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_recordable=filters_recordable,
            filters_affected_body_part=filters_affected_body_part,
            filters_affliction_type_id=filters_affliction_type_id,
            filters_body_part_id=filters_body_part_id,
            filters_filing_type=filters_filing_type,
            filters_query=filters_query,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_affected_company_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Company IDs. Returns item(s) with the specified affected Company IDs.")] = None,
        filters_affected_party_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.")] = None,
        filters_affected_person_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Person IDs. Returns item(s) with the specified affected Person IDs.")] = None,
        filters_harm_source_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.")] = None,
        filters_work_activity_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_recordable: Annotated[Optional[StrictBool], Field(description="Return item(s) that are recordable.")] = None,
        filters_affected_body_part: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with any of the specified Affected Body Parts.")] = None,
        filters_affliction_type_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Affliction Type IDs")] = None,
        filters_body_part_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Body Part IDs")] = None,
        filters_filing_type: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing query")] = None,
        sort: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Injuries

        Returns a list of Injuries for a given project.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param incident_id: Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.
        :type incident_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_affected_company_id: Array of Company IDs. Returns item(s) with the specified affected Company IDs.
        :type filters_affected_company_id: List[int]
        :param filters_affected_party_id: Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.
        :type filters_affected_party_id: List[int]
        :param filters_affected_person_id: Array of Person IDs. Returns item(s) with the specified affected Person IDs.
        :type filters_affected_person_id: List[int]
        :param filters_harm_source_id: Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.
        :type filters_harm_source_id: List[int]
        :param filters_work_activity_id: Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.
        :type filters_work_activity_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_recordable: Return item(s) that are recordable.
        :type filters_recordable: bool
        :param filters_affected_body_part: Return item(s) with any of the specified Affected Body Parts.
        :type filters_affected_body_part: List[str]
        :param filters_affliction_type_id: Return item(s) with the specified Affliction Type IDs
        :type filters_affliction_type_id: int
        :param filters_body_part_id: Return item(s) with the specified Body Part IDs
        :type filters_body_part_id: List[int]
        :param filters_filing_type: Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.
        :type filters_filing_type: List[str]
        :param filters_query: Return item(s) containing query
        :type filters_query: str
        :param sort:
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            incident_id=incident_id,
            page=page,
            per_page=per_page,
            filters_created_at=filters_created_at,
            filters_affected_company_id=filters_affected_company_id,
            filters_affected_party_id=filters_affected_party_id,
            filters_affected_person_id=filters_affected_person_id,
            filters_harm_source_id=filters_harm_source_id,
            filters_work_activity_id=filters_work_activity_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_recordable=filters_recordable,
            filters_affected_body_part=filters_affected_body_part,
            filters_affliction_type_id=filters_affliction_type_id,
            filters_body_part_id=filters_body_part_id,
            filters_filing_type=filters_filing_type,
            filters_query=filters_query,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_incidents_injuries_get_serialize(
        self,
        procore_company_id,
        project_id,
        incident_id,
        page,
        per_page,
        filters_created_at,
        filters_affected_company_id,
        filters_affected_party_id,
        filters_affected_person_id,
        filters_harm_source_id,
        filters_work_activity_id,
        filters_managed_equipment_id,
        filters_recordable,
        filters_affected_body_part,
        filters_affliction_type_id,
        filters_body_part_id,
        filters_filing_type,
        filters_query,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[affected_company_id]': 'csv',
            'filters[affected_party_id]': 'csv',
            'filters[affected_person_id]': 'csv',
            'filters[harm_source_id]': 'csv',
            'filters[work_activity_id]': 'csv',
            'filters[affected_body_part]': 'csv',
            'filters[body_part_id]': 'csv',
            'filters[filing_type]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_affected_company_id is not None:
            
            _query_params.append(('filters[affected_company_id]', filters_affected_company_id))
            
        if filters_affected_party_id is not None:
            
            _query_params.append(('filters[affected_party_id]', filters_affected_party_id))
            
        if filters_affected_person_id is not None:
            
            _query_params.append(('filters[affected_person_id]', filters_affected_person_id))
            
        if filters_harm_source_id is not None:
            
            _query_params.append(('filters[harm_source_id]', filters_harm_source_id))
            
        if filters_work_activity_id is not None:
            
            _query_params.append(('filters[work_activity_id]', filters_work_activity_id))
            
        if filters_managed_equipment_id is not None:
            
            _query_params.append(('filters[managed_equipment_id]', filters_managed_equipment_id))
            
        if filters_recordable is not None:
            
            _query_params.append(('filters[recordable]', filters_recordable))
            
        if filters_affected_body_part is not None:
            
            _query_params.append(('filters[affected_body_part]', filters_affected_body_part))
            
        if filters_affliction_type_id is not None:
            
            _query_params.append(('filters[affliction_type_id]', filters_affliction_type_id))
            
        if filters_body_part_id is not None:
            
            _query_params.append(('filters[body_part_id]', filters_body_part_id))
            
        if filters_filing_type is not None:
            
            _query_params.append(('filters[filing_type]', filters_filing_type))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/incidents/injuries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Destroy Injury

        Sends Injury to the recycle bin

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_delete_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Destroy Injury

        Sends Injury to the recycle bin

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_delete_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Destroy Injury

        Sends Injury to the recycle bin

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_delete_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_incidents_injuries_id_delete_serialize(
        self,
        procore_company_id,
        project_id,
        id,
        incident_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/projects/{project_id}/incidents/injuries/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner:
        """Show Injury

        Returns a specific Injury  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]:
        """Show Injury

        Returns a specific Injury  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Injury

        Returns a specific Injury  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_incidents_injuries_id_get_serialize(
        self,
        procore_company_id,
        project_id,
        id,
        incident_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/incidents/injuries/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        rest_v10_projects_project_id_incidents_injuries_id_patch_request: RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest,
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner:
        """Update Injury

        Update an Injury's attributes  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param rest_v10_projects_project_id_incidents_injuries_id_patch_request: (required)
        :type rest_v10_projects_project_id_incidents_injuries_id_patch_request: RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest
        :param incident_id: Incident ID
        :type incident_id: int
        :param run_configurable_validations: Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            rest_v10_projects_project_id_incidents_injuries_id_patch_request=rest_v10_projects_project_id_incidents_injuries_id_patch_request,
            incident_id=incident_id,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        rest_v10_projects_project_id_incidents_injuries_id_patch_request: RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest,
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]:
        """Update Injury

        Update an Injury's attributes  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param rest_v10_projects_project_id_incidents_injuries_id_patch_request: (required)
        :type rest_v10_projects_project_id_incidents_injuries_id_patch_request: RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest
        :param incident_id: Incident ID
        :type incident_id: int
        :param run_configurable_validations: Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            rest_v10_projects_project_id_incidents_injuries_id_patch_request=rest_v10_projects_project_id_incidents_injuries_id_patch_request,
            incident_id=incident_id,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        rest_v10_projects_project_id_incidents_injuries_id_patch_request: RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest,
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Injury

        Update an Injury's attributes  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param rest_v10_projects_project_id_incidents_injuries_id_patch_request: (required)
        :type rest_v10_projects_project_id_incidents_injuries_id_patch_request: RestV10ProjectsProjectIdIncidentsInjuriesIdPatchRequest
        :param incident_id: Incident ID
        :type incident_id: int
        :param run_configurable_validations: Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_id_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            rest_v10_projects_project_id_incidents_injuries_id_patch_request=rest_v10_projects_project_id_incidents_injuries_id_patch_request,
            incident_id=incident_id,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_incidents_injuries_id_patch_serialize(
        self,
        procore_company_id,
        project_id,
        id,
        rest_v10_projects_project_id_incidents_injuries_id_patch_request,
        incident_id,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_incidents_injuries_id_patch_request is not None:
            _body_params = rest_v10_projects_project_id_incidents_injuries_id_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/incidents/injuries/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_incidents_injuries_post_request: RestV10ProjectsProjectIdIncidentsInjuriesPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner:
        """Create Injury

        Creates an Injury record.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_incidents_injuries_post_request: (required)
        :type rest_v10_projects_project_id_incidents_injuries_post_request: RestV10ProjectsProjectIdIncidentsInjuriesPostRequest
        :param run_configurable_validations: Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_incidents_injuries_post_request=rest_v10_projects_project_id_incidents_injuries_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_incidents_injuries_post_request: RestV10ProjectsProjectIdIncidentsInjuriesPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]:
        """Create Injury

        Creates an Injury record.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_incidents_injuries_post_request: (required)
        :type rest_v10_projects_project_id_incidents_injuries_post_request: RestV10ProjectsProjectIdIncidentsInjuriesPostRequest
        :param run_configurable_validations: Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_incidents_injuries_post_request=rest_v10_projects_project_id_incidents_injuries_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_incidents_injuries_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_incidents_injuries_post_request: RestV10ProjectsProjectIdIncidentsInjuriesPostRequest,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Injury

        Creates an Injury record.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_incidents_injuries_post_request: (required)
        :type rest_v10_projects_project_id_incidents_injuries_post_request: RestV10ProjectsProjectIdIncidentsInjuriesPostRequest
        :param run_configurable_validations: Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false). See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_incidents_injuries_post_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_incidents_injuries_post_request=rest_v10_projects_project_id_incidents_injuries_post_request,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_incidents_injuries_post_serialize(
        self,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_incidents_injuries_post_request,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_incidents_injuries_post_request is not None:
            _body_params = rest_v10_projects_project_id_incidents_injuries_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/projects/{project_id}/incidents/injuries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID. When provided, the list will be scoped to only the Recycled Injuries for a given Incident.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_affected_company_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Company IDs. Returns item(s) with the specified affected Company IDs.")] = None,
        filters_affected_party_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.")] = None,
        filters_affected_person_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Person IDs. Returns item(s) with the specified affected Person IDs.")] = None,
        filters_harm_source_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.")] = None,
        filters_work_activity_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_recordable: Annotated[Optional[StrictBool], Field(description="Return item(s) that are recordable.")] = None,
        filters_affected_body_part: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with any of the specified Affected Body Parts.")] = None,
        filters_affliction_type_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Affliction Type IDs")] = None,
        filters_filing_type: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing query")] = None,
        sort: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]:
        """List Recycled Injuries

        Returns a list of Recycled Injuries for a given project (or Incident, if incident_id is present).  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param incident_id: Incident ID. When provided, the list will be scoped to only the Recycled Injuries for a given Incident.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        :type incident_id: int
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_affected_company_id: Array of Company IDs. Returns item(s) with the specified affected Company IDs.
        :type filters_affected_company_id: List[int]
        :param filters_affected_party_id: Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.
        :type filters_affected_party_id: List[int]
        :param filters_affected_person_id: Array of Person IDs. Returns item(s) with the specified affected Person IDs.
        :type filters_affected_person_id: List[int]
        :param filters_harm_source_id: Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.
        :type filters_harm_source_id: List[int]
        :param filters_work_activity_id: Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.
        :type filters_work_activity_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_recordable: Return item(s) that are recordable.
        :type filters_recordable: bool
        :param filters_affected_body_part: Return item(s) with any of the specified Affected Body Parts.
        :type filters_affected_body_part: List[str]
        :param filters_affliction_type_id: Return item(s) with the specified Affliction Type IDs
        :type filters_affliction_type_id: List[int]
        :param filters_filing_type: Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.
        :type filters_filing_type: List[str]
        :param filters_query: Return item(s) containing query
        :type filters_query: str
        :param sort:
        :type sort: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            incident_id=incident_id,
            filters_created_at=filters_created_at,
            filters_affected_company_id=filters_affected_company_id,
            filters_affected_party_id=filters_affected_party_id,
            filters_affected_person_id=filters_affected_person_id,
            filters_harm_source_id=filters_harm_source_id,
            filters_work_activity_id=filters_work_activity_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_recordable=filters_recordable,
            filters_affected_body_part=filters_affected_body_part,
            filters_affliction_type_id=filters_affliction_type_id,
            filters_filing_type=filters_filing_type,
            filters_query=filters_query,
            sort=sort,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID. When provided, the list will be scoped to only the Recycled Injuries for a given Incident.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_affected_company_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Company IDs. Returns item(s) with the specified affected Company IDs.")] = None,
        filters_affected_party_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.")] = None,
        filters_affected_person_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Person IDs. Returns item(s) with the specified affected Person IDs.")] = None,
        filters_harm_source_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.")] = None,
        filters_work_activity_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_recordable: Annotated[Optional[StrictBool], Field(description="Return item(s) that are recordable.")] = None,
        filters_affected_body_part: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with any of the specified Affected Body Parts.")] = None,
        filters_affliction_type_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Affliction Type IDs")] = None,
        filters_filing_type: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing query")] = None,
        sort: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]]:
        """List Recycled Injuries

        Returns a list of Recycled Injuries for a given project (or Incident, if incident_id is present).  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param incident_id: Incident ID. When provided, the list will be scoped to only the Recycled Injuries for a given Incident.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        :type incident_id: int
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_affected_company_id: Array of Company IDs. Returns item(s) with the specified affected Company IDs.
        :type filters_affected_company_id: List[int]
        :param filters_affected_party_id: Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.
        :type filters_affected_party_id: List[int]
        :param filters_affected_person_id: Array of Person IDs. Returns item(s) with the specified affected Person IDs.
        :type filters_affected_person_id: List[int]
        :param filters_harm_source_id: Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.
        :type filters_harm_source_id: List[int]
        :param filters_work_activity_id: Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.
        :type filters_work_activity_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_recordable: Return item(s) that are recordable.
        :type filters_recordable: bool
        :param filters_affected_body_part: Return item(s) with any of the specified Affected Body Parts.
        :type filters_affected_body_part: List[str]
        :param filters_affliction_type_id: Return item(s) with the specified Affliction Type IDs
        :type filters_affliction_type_id: List[int]
        :param filters_filing_type: Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.
        :type filters_filing_type: List[str]
        :param filters_query: Return item(s) containing query
        :type filters_query: str
        :param sort:
        :type sort: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            incident_id=incident_id,
            filters_created_at=filters_created_at,
            filters_affected_company_id=filters_affected_company_id,
            filters_affected_party_id=filters_affected_party_id,
            filters_affected_person_id=filters_affected_person_id,
            filters_harm_source_id=filters_harm_source_id,
            filters_work_activity_id=filters_work_activity_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_recordable=filters_recordable,
            filters_affected_body_part=filters_affected_body_part,
            filters_affliction_type_id=filters_affliction_type_id,
            filters_filing_type=filters_filing_type,
            filters_query=filters_query,
            sort=sort,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID. When provided, the list will be scoped to only the Recycled Injuries for a given Incident.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_affected_company_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Company IDs. Returns item(s) with the specified affected Company IDs.")] = None,
        filters_affected_party_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.")] = None,
        filters_affected_person_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Person IDs. Returns item(s) with the specified affected Person IDs.")] = None,
        filters_harm_source_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.")] = None,
        filters_work_activity_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.")] = None,
        filters_managed_equipment_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Managed Equipment ID.")] = None,
        filters_recordable: Annotated[Optional[StrictBool], Field(description="Return item(s) that are recordable.")] = None,
        filters_affected_body_part: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with any of the specified Affected Body Parts.")] = None,
        filters_affliction_type_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Affliction Type IDs")] = None,
        filters_filing_type: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing query")] = None,
        sort: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Recycled Injuries

        Returns a list of Recycled Injuries for a given project (or Incident, if incident_id is present).  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param incident_id: Incident ID. When provided, the list will be scoped to only the Recycled Injuries for a given Incident.  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        :type incident_id: int
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_affected_company_id: Array of Company IDs. Returns item(s) with the specified affected Company IDs.
        :type filters_affected_company_id: List[int]
        :param filters_affected_party_id: Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.
        :type filters_affected_party_id: List[int]
        :param filters_affected_person_id: Array of Person IDs. Returns item(s) with the specified affected Person IDs.
        :type filters_affected_person_id: List[int]
        :param filters_harm_source_id: Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.
        :type filters_harm_source_id: List[int]
        :param filters_work_activity_id: Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.
        :type filters_work_activity_id: List[int]
        :param filters_managed_equipment_id: Return item(s) with the specified Managed Equipment ID.
        :type filters_managed_equipment_id: int
        :param filters_recordable: Return item(s) that are recordable.
        :type filters_recordable: bool
        :param filters_affected_body_part: Return item(s) with any of the specified Affected Body Parts.
        :type filters_affected_body_part: List[str]
        :param filters_affliction_type_id: Return item(s) with the specified Affliction Type IDs
        :type filters_affliction_type_id: List[int]
        :param filters_filing_type: Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.
        :type filters_filing_type: List[str]
        :param filters_query: Return item(s) containing query
        :type filters_query: str
        :param sort:
        :type sort: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            incident_id=incident_id,
            filters_created_at=filters_created_at,
            filters_affected_company_id=filters_affected_company_id,
            filters_affected_party_id=filters_affected_party_id,
            filters_affected_person_id=filters_affected_person_id,
            filters_harm_source_id=filters_harm_source_id,
            filters_work_activity_id=filters_work_activity_id,
            filters_managed_equipment_id=filters_managed_equipment_id,
            filters_recordable=filters_recordable,
            filters_affected_body_part=filters_affected_body_part,
            filters_affliction_type_id=filters_affliction_type_id,
            filters_filing_type=filters_filing_type,
            filters_query=filters_query,
            sort=sort,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_incidents_injuries_get_serialize(
        self,
        procore_company_id,
        project_id,
        incident_id,
        filters_created_at,
        filters_affected_company_id,
        filters_affected_party_id,
        filters_affected_person_id,
        filters_harm_source_id,
        filters_work_activity_id,
        filters_managed_equipment_id,
        filters_recordable,
        filters_affected_body_part,
        filters_affliction_type_id,
        filters_filing_type,
        filters_query,
        sort,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[affected_company_id]': 'csv',
            'filters[affected_party_id]': 'csv',
            'filters[affected_person_id]': 'csv',
            'filters[harm_source_id]': 'csv',
            'filters[work_activity_id]': 'csv',
            'filters[affected_body_part]': 'csv',
            'filters[affliction_type_id]': 'csv',
            'filters[filing_type]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_affected_company_id is not None:
            
            _query_params.append(('filters[affected_company_id]', filters_affected_company_id))
            
        if filters_affected_party_id is not None:
            
            _query_params.append(('filters[affected_party_id]', filters_affected_party_id))
            
        if filters_affected_person_id is not None:
            
            _query_params.append(('filters[affected_person_id]', filters_affected_person_id))
            
        if filters_harm_source_id is not None:
            
            _query_params.append(('filters[harm_source_id]', filters_harm_source_id))
            
        if filters_work_activity_id is not None:
            
            _query_params.append(('filters[work_activity_id]', filters_work_activity_id))
            
        if filters_managed_equipment_id is not None:
            
            _query_params.append(('filters[managed_equipment_id]', filters_managed_equipment_id))
            
        if filters_recordable is not None:
            
            _query_params.append(('filters[recordable]', filters_recordable))
            
        if filters_affected_body_part is not None:
            
            _query_params.append(('filters[affected_body_part]', filters_affected_body_part))
            
        if filters_affliction_type_id is not None:
            
            _query_params.append(('filters[affliction_type_id]', filters_affliction_type_id))
            
        if filters_filing_type is not None:
            
            _query_params.append(('filters[filing_type]', filters_filing_type))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/incidents/injuries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner:
        """Show Recycled Injury

        Returns a specific Recycled Injury  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner]:
        """Show Recycled Injury

        Returns a specific Recycled Injury  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Recycled Injury

        Returns a specific Recycled Injury  NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_get_serialize(
        self,
        procore_company_id,
        project_id,
        id,
        incident_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/incidents/injuries/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Retrieve Recycled Injury

        Retrieves a specific Injury from the recycle bin

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Retrieve Recycled Injury

        Retrieves a specific Injury from the recycle bin

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        id: Annotated[StrictInt, Field(description="Injury ID")],
        incident_id: Annotated[Optional[StrictInt], Field(description="Incident ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve Recycled Injury

        Retrieves a specific Injury from the recycle bin

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param id: Injury ID (required)
        :type id: int
        :param incident_id: Incident ID
        :type incident_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            id=id,
            incident_id=incident_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_recycle_bin_incidents_injuries_id_restore_patch_serialize(
        self,
        procore_company_id,
        project_id,
        id,
        incident_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if incident_id is not None:
            
            _query_params.append(('incident_id', incident_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/recycle_bin/incidents/injuries/{id}/restore',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


