# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.generic_tool_item1 import GenericToolItem1
from procore_sdk.models.generic_tool_item_response import GenericToolItemResponse
from procore_sdk.models.rest_v10_companies_company_id_generic_tools_generic_tool_id_patch200_response import RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response
from procore_sdk.models.rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get200_response_inner import RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner
from procore_sdk.models.rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request import RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest
from procore_sdk.models.rest_v10_companies_company_id_generic_tools_get200_response_inner import RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner
from procore_sdk.models.rest_v10_companies_company_id_generic_tools_post_request import RestV10CompaniesCompanyIdGenericToolsPostRequest
from procore_sdk.models.rest_v10_projects_project_id_correspondence_type_items_patch200_response_inner_inner import RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner
from procore_sdk.models.rest_v10_projects_project_id_correspondence_type_items_patch_request import RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest
from procore_sdk.models.rest_v10_projects_project_id_correspondence_types_defaults_get200_response_inner import RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_correspondence_types_permissions_get200_response_inner import RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_correspondence_types_users_get200_response_inner import RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get200_response_inner import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch200_response_inner_inner import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest
from procore_sdk.models.rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request import RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
from procore_sdk.models.rest_v10_projects_project_id_rfis_default_distribution_get200_response_inner import RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner
from procore_sdk.models.rest_v10_projects_project_id_time_and_material_entries_id_change_history_get304_response import RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class ProjectManagementCorrespondenceTypesCorrespondencesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool.")],
        rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response:
        """Update Generic Tool

        Update a Generic Tool's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool. (required)
        :type generic_tool_id: int
        :param rest_v10_companies_company_id_generic_tools_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_patch_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            rest_v10_companies_company_id_generic_tools_post_request=rest_v10_companies_company_id_generic_tools_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool.")],
        rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response]:
        """Update Generic Tool

        Update a Generic Tool's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool. (required)
        :type generic_tool_id: int
        :param rest_v10_companies_company_id_generic_tools_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_patch_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            rest_v10_companies_company_id_generic_tools_post_request=rest_v10_companies_company_id_generic_tools_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool.")],
        rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Generic Tool

        Update a Generic Tool's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool. (required)
        :type generic_tool_id: int
        :param rest_v10_companies_company_id_generic_tools_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_patch_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            rest_v10_companies_company_id_generic_tools_post_request=rest_v10_companies_company_id_generic_tools_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_generic_tools_generic_tool_id_patch_serialize(
        self,
        procore_company_id,
        company_id,
        generic_tool_id,
        rest_v10_companies_company_id_generic_tools_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_companies_company_id_generic_tools_post_request is not None:
            _body_params = rest_v10_companies_company_id_generic_tools_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/companies/{company_id}/generic_tools/{generic_tool_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner]:
        """List Statuses for a Generic Tool

        Returns a list of all Statuses for a Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner]]:
        """List Statuses for a Generic Tool

        Returns a list of all Statuses for a Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Statuses for a Generic Tool

        Returns a list of all Statuses for a Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get_serialize(
        self,
        procore_company_id,
        company_id,
        generic_tool_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/generic_tools/{generic_tool_id}/statuses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        id: Annotated[StrictInt, Field(description="Unique identifier for the Status")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Generic Tool Status

        Delete the specified Generic Tool Status.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param id: Unique identifier for the Status (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        id: Annotated[StrictInt, Field(description="Unique identifier for the Status")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Generic Tool Status

        Delete the specified Generic Tool Status.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param id: Unique identifier for the Status (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        id: Annotated[StrictInt, Field(description="Unique identifier for the Status")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Generic Tool Status

        Delete the specified Generic Tool Status.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param id: Unique identifier for the Status (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete_serialize(
        self,
        procore_company_id,
        company_id,
        generic_tool_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/companies/{company_id}/generic_tools/{generic_tool_id}/statuses/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner:
        """Create Generic Tool Status

        Create a new Generic Tool Status for the specified Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request=rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner]:
        """Create Generic Tool Status

        Create a new Generic Tool Status for the specified Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request=rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Generic Tool Status

        Create a new Generic Tool Status for the specified Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request: RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            generic_tool_id=generic_tool_id,
            rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request=rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_serialize(
        self,
        procore_company_id,
        company_id,
        generic_tool_id,
        rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request is not None:
            _body_params = rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/companies/{company_id}/generic_tools/{generic_tool_id}/statuses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_generic_tools_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_project_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the Project ID.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner]:
        """List Generic Tools

        Returns a list of all Generic Tools in the specified Company. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_project_id: Return item(s) with the Project ID.
        :type filters_project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            page=page,
            per_page=per_page,
            filters_project_id=filters_project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_generic_tools_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_project_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the Project ID.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner]]:
        """List Generic Tools

        Returns a list of all Generic Tools in the specified Company. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_project_id: Return item(s) with the Project ID.
        :type filters_project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            page=page,
            per_page=per_page,
            filters_project_id=filters_project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_generic_tools_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_project_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the Project ID.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Generic Tools

        Returns a list of all Generic Tools in the specified Company. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_project_id: Return item(s) with the Project ID.
        :type filters_project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            page=page,
            per_page=per_page,
            filters_project_id=filters_project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_generic_tools_get_serialize(
        self,
        procore_company_id,
        company_id,
        page,
        per_page,
        filters_project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_project_id is not None:
            
            _query_params.append(('filters[project_id]', filters_project_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/generic_tools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_generic_tools_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner:
        """Create Generic Tool

        Create a new Generic Tool in the specified Company.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param rest_v10_companies_company_id_generic_tools_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            rest_v10_companies_company_id_generic_tools_post_request=rest_v10_companies_company_id_generic_tools_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_generic_tools_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner]:
        """Create Generic Tool

        Create a new Generic Tool in the specified Company.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param rest_v10_companies_company_id_generic_tools_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            rest_v10_companies_company_id_generic_tools_post_request=rest_v10_companies_company_id_generic_tools_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_generic_tools_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Generic Tool

        Create a new Generic Tool in the specified Company.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param rest_v10_companies_company_id_generic_tools_post_request: (required)
        :type rest_v10_companies_company_id_generic_tools_post_request: RestV10CompaniesCompanyIdGenericToolsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_generic_tools_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            rest_v10_companies_company_id_generic_tools_post_request=rest_v10_companies_company_id_generic_tools_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_generic_tools_post_serialize(
        self,
        procore_company_id,
        company_id,
        rest_v10_companies_company_id_generic_tools_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_companies_company_id_generic_tools_post_request is not None:
            _body_params = rest_v10_companies_company_id_generic_tools_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/companies/{company_id}/generic_tools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_correspondence_type_items_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_login_information_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Login Information IDs. Returns item(s) with the specified Login Information ID.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_overdue: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that are overdue.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_recycle_bin: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that have been deleted.")] = None,
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within the specified Generic Tool ID(s)")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        filters_issued_at: Annotated[Optional[StrictStr], Field(description="Returns item(s) issued within the specified ISO 8601 datetime range.")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order")] = None,
        group: Annotated[Optional[StrictStr], Field(description="Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GenericToolItem1]:
        """List Correspondence Type Items

        Returns a list of all Correspondence Type Items in the specified Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_login_information_id: Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
        :type filters_login_information_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_overdue: If true, returns item(s) that are overdue.
        :type filters_overdue: bool
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_recycle_bin: If true, returns item(s) that have been deleted.
        :type filters_recycle_bin: bool
        :param filters_generic_tool_id: Return item(s) within the specified Generic Tool ID(s)
        :type filters_generic_tool_id: List[int]
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param filters_issued_at: Returns item(s) issued within the specified ISO 8601 datetime range.
        :type filters_issued_at: str
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param sort: Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
        :type sort: str
        :param group: Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.
        :type group: str
        :param view: Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_type_items_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_login_information_id=filters_login_information_id,
            filters_status=filters_status,
            filters_overdue=filters_overdue,
            filters_query=filters_query,
            filters_recycle_bin=filters_recycle_bin,
            filters_generic_tool_id=filters_generic_tool_id,
            filters_received_from_id=filters_received_from_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            filters_issued_at=filters_issued_at,
            filters_vendor_id=filters_vendor_id,
            sort=sort,
            group=group,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItem1]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_correspondence_type_items_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_login_information_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Login Information IDs. Returns item(s) with the specified Login Information ID.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_overdue: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that are overdue.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_recycle_bin: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that have been deleted.")] = None,
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within the specified Generic Tool ID(s)")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        filters_issued_at: Annotated[Optional[StrictStr], Field(description="Returns item(s) issued within the specified ISO 8601 datetime range.")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order")] = None,
        group: Annotated[Optional[StrictStr], Field(description="Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GenericToolItem1]]:
        """List Correspondence Type Items

        Returns a list of all Correspondence Type Items in the specified Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_login_information_id: Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
        :type filters_login_information_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_overdue: If true, returns item(s) that are overdue.
        :type filters_overdue: bool
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_recycle_bin: If true, returns item(s) that have been deleted.
        :type filters_recycle_bin: bool
        :param filters_generic_tool_id: Return item(s) within the specified Generic Tool ID(s)
        :type filters_generic_tool_id: List[int]
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param filters_issued_at: Returns item(s) issued within the specified ISO 8601 datetime range.
        :type filters_issued_at: str
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param sort: Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
        :type sort: str
        :param group: Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.
        :type group: str
        :param view: Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_type_items_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_login_information_id=filters_login_information_id,
            filters_status=filters_status,
            filters_overdue=filters_overdue,
            filters_query=filters_query,
            filters_recycle_bin=filters_recycle_bin,
            filters_generic_tool_id=filters_generic_tool_id,
            filters_received_from_id=filters_received_from_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            filters_issued_at=filters_issued_at,
            filters_vendor_id=filters_vendor_id,
            sort=sort,
            group=group,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItem1]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_correspondence_type_items_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_login_information_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Login Information IDs. Returns item(s) with the specified Login Information ID.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_overdue: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that are overdue.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_recycle_bin: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that have been deleted.")] = None,
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within the specified Generic Tool ID(s)")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        filters_issued_at: Annotated[Optional[StrictStr], Field(description="Returns item(s) issued within the specified ISO 8601 datetime range.")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order")] = None,
        group: Annotated[Optional[StrictStr], Field(description="Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Correspondence Type Items

        Returns a list of all Correspondence Type Items in the specified Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_login_information_id: Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
        :type filters_login_information_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_overdue: If true, returns item(s) that are overdue.
        :type filters_overdue: bool
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_recycle_bin: If true, returns item(s) that have been deleted.
        :type filters_recycle_bin: bool
        :param filters_generic_tool_id: Return item(s) within the specified Generic Tool ID(s)
        :type filters_generic_tool_id: List[int]
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param filters_issued_at: Returns item(s) issued within the specified ISO 8601 datetime range.
        :type filters_issued_at: str
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param sort: Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
        :type sort: str
        :param group: Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.
        :type group: str
        :param view: Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_type_items_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_login_information_id=filters_login_information_id,
            filters_status=filters_status,
            filters_overdue=filters_overdue,
            filters_query=filters_query,
            filters_recycle_bin=filters_recycle_bin,
            filters_generic_tool_id=filters_generic_tool_id,
            filters_received_from_id=filters_received_from_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            filters_issued_at=filters_issued_at,
            filters_vendor_id=filters_vendor_id,
            sort=sort,
            group=group,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItem1]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_correspondence_type_items_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_id,
        filters_login_information_id,
        filters_status,
        filters_overdue,
        filters_query,
        filters_recycle_bin,
        filters_generic_tool_id,
        filters_received_from_id,
        filters_created_by_id,
        filters_created_at,
        filters_updated_at,
        filters_closed_at,
        filters_issued_at,
        filters_vendor_id,
        sort,
        group,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[id]': 'csv',
            'filters[login_information_id]': 'csv',
            'filters[status]': 'csv',
            'filters[generic_tool_id]': 'csv',
            'filters[created_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id]', filters_id))
            
        if filters_login_information_id is not None:
            
            _query_params.append(('filters[login_information_id]', filters_login_information_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_overdue is not None:
            
            _query_params.append(('filters[overdue]', filters_overdue))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_recycle_bin is not None:
            
            _query_params.append(('filters[recycle_bin]', filters_recycle_bin))
            
        if filters_generic_tool_id is not None:
            
            _query_params.append(('filters[generic_tool_id]', filters_generic_tool_id))
            
        if filters_received_from_id is not None:
            
            _query_params.append(('filters[received_from_id]', filters_received_from_id))
            
        if filters_created_by_id is not None:
            
            _query_params.append(('filters[created_by_id]', filters_created_by_id))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_closed_at is not None:
            if isinstance(filters_closed_at, date):
                _query_params.append(
                    (
                        'filters[closed_at]',
                        filters_closed_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[closed_at]', filters_closed_at))
            
        if filters_issued_at is not None:
            
            _query_params.append(('filters[issued_at]', filters_issued_at))
            
        if filters_vendor_id is not None:
            
            _query_params.append(('filters[vendor_id]', filters_vendor_id))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if group is not None:
            
            _query_params.append(('group', group))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/correspondence_type_items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_correspondence_type_items_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_correspondence_type_items_patch_request: RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest,
        completion_mode: Annotated[Optional[StrictStr], Field(description="Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[List[RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner]]:
        """Batch Update Correspondence Type Items

        Update all specified Correspondence Type Items.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_correspondence_type_items_patch_request: (required)
        :type rest_v10_projects_project_id_correspondence_type_items_patch_request: RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest
        :param completion_mode: Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.
        :type completion_mode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_type_items_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_correspondence_type_items_patch_request=rest_v10_projects_project_id_correspondence_type_items_patch_request,
            completion_mode=completion_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner]]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_correspondence_type_items_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_correspondence_type_items_patch_request: RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest,
        completion_mode: Annotated[Optional[StrictStr], Field(description="Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[List[RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner]]]:
        """Batch Update Correspondence Type Items

        Update all specified Correspondence Type Items.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_correspondence_type_items_patch_request: (required)
        :type rest_v10_projects_project_id_correspondence_type_items_patch_request: RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest
        :param completion_mode: Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.
        :type completion_mode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_type_items_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_correspondence_type_items_patch_request=rest_v10_projects_project_id_correspondence_type_items_patch_request,
            completion_mode=completion_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner]]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_correspondence_type_items_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_correspondence_type_items_patch_request: RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest,
        completion_mode: Annotated[Optional[StrictStr], Field(description="Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Batch Update Correspondence Type Items

        Update all specified Correspondence Type Items.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_correspondence_type_items_patch_request: (required)
        :type rest_v10_projects_project_id_correspondence_type_items_patch_request: RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest
        :param completion_mode: Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.
        :type completion_mode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_type_items_patch_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            rest_v10_projects_project_id_correspondence_type_items_patch_request=rest_v10_projects_project_id_correspondence_type_items_patch_request,
            completion_mode=completion_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner]]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_correspondence_type_items_patch_serialize(
        self,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_correspondence_type_items_patch_request,
        completion_mode,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if completion_mode is not None:
            
            _query_params.append(('completion_mode', completion_mode))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_correspondence_type_items_patch_request is not None:
            _body_params = rest_v10_projects_project_id_correspondence_type_items_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/correspondence_type_items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_correspondence_types_defaults_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within the specified Generic Tool ID(s)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner]:
        """List Correspondence Type Defaults

        Returns a list of all Correspondence Types Defaults for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_generic_tool_id: Return item(s) within the specified Generic Tool ID(s)
        :type filters_generic_tool_id: List[int]
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_defaults_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_generic_tool_id=filters_generic_tool_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_correspondence_types_defaults_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within the specified Generic Tool ID(s)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner]]:
        """List Correspondence Type Defaults

        Returns a list of all Correspondence Types Defaults for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_generic_tool_id: Return item(s) within the specified Generic Tool ID(s)
        :type filters_generic_tool_id: List[int]
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_defaults_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_generic_tool_id=filters_generic_tool_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_correspondence_types_defaults_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within the specified Generic Tool ID(s)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Correspondence Type Defaults

        Returns a list of all Correspondence Types Defaults for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_generic_tool_id: Return item(s) within the specified Generic Tool ID(s)
        :type filters_generic_tool_id: List[int]
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_defaults_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_generic_tool_id=filters_generic_tool_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_correspondence_types_defaults_get_serialize(
        self,
        procore_company_id,
        project_id,
        filters_generic_tool_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[generic_tool_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if filters_generic_tool_id is not None:
            
            _query_params.append(('filters[generic_tool_id]', filters_generic_tool_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/correspondence_types/defaults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_correspondence_types_permissions_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner]:
        """List Correspondence Type Permissions

        Returns a list of all Correspondence Types Permissions for the requesting User in the specificied Project.  Granular Permissions that are granted via UAL and are force-checked are not included in the list. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_permissions_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_correspondence_types_permissions_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner]]:
        """List Correspondence Type Permissions

        Returns a list of all Correspondence Types Permissions for the requesting User in the specificied Project.  Granular Permissions that are granted via UAL and are force-checked are not included in the list. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_permissions_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_correspondence_types_permissions_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Correspondence Type Permissions

        Returns a list of all Correspondence Types Permissions for the requesting User in the specificied Project.  Granular Permissions that are granted via UAL and are force-checked are not included in the list. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_permissions_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_correspondence_types_permissions_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/correspondence_types/permissions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_correspondence_types_users_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]:
        """List Correspondence Type Users

        Returns a list of all Correspondence Types Users Availability for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_correspondence_types_users_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]]:
        """List Correspondence Type Users

        Returns a list of all Correspondence Types Users Availability for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_correspondence_types_users_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Correspondence Type Users

        Returns a list of all Correspondence Types Users Availability for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_correspondence_types_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_correspondence_types_users_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/correspondence_types/users',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_custom_tools_users_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]:
        """List Custom Tool Users

        Returns a list of all Custom Tools Users Availability for the specificied Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_custom_tools_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_custom_tools_users_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]]:
        """List Custom Tool Users

        Returns a list of all Custom Tools Users Availability for the specificied Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_custom_tools_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_custom_tools_users_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Custom Tool Users

        Returns a list of all Custom Tools Users Availability for the specificied Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_custom_tools_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_custom_tools_users_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/custom_tools/users',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]:
        """List Users with access to a generic tool

        Returns a list of all Users in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_query=filters_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]]:
        """List Users with access to a generic tool

        Returns a list of all Users in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_query=filters_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Users with access to a generic tool

        Returns a list of all Users in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_query=filters_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        project_id,
        page,
        per_page,
        filters_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/available_read_users',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner]:
        """List statuses available for a generic tool

        Returns a list of all available statuses in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner]]:
        """List statuses available for a generic tool

        Returns a list of all available statuses in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List statuses available for a generic tool

        Returns a list of all available statuses in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/available_statuses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response]:
        """List Change History for a Generic Tool Item

        Returns a list of all change histories for a generic tool item in the specified project and generic tool. For more information on Generic Tool and Correspondence Tool endpoints, see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response]]:
        """List Change History for a Generic Tool Item

        Returns a list of all change histories for a generic tool item in the specified project and generic tool. For more information on Generic Tool and Correspondence Tool endpoints, see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Change History for a Generic Tool Item

        Returns a list of all change histories for a generic tool item in the specified project and generic tool. For more information on Generic Tool and Correspondence Tool endpoints, see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}/change_histories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Generic Tool Item

        Delete a Generic Tool Item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Generic Tool Item

        Delete a Generic Tool Item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Generic Tool Item

        Delete a Generic Tool Item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete_serialize(
        self,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GenericToolItemResponse]:
        """List Responses for a Generic Tool Item

        Returns a list of all responses for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItemResponse]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GenericToolItemResponse]]:
        """List Responses for a Generic Tool Item

        Returns a list of all responses for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItemResponse]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Responses for a Generic Tool Item

        Returns a list of all responses for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItemResponse]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}/generic_tool_item_responses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item")],
        id: Annotated[StrictInt, Field(description="Unique identifier for the response")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericToolItemResponse:
        """Update Generic Tool Item Response

        Update attributes on a generic tool item response.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item (required)
        :type generic_tool_item_id: int
        :param id: Unique identifier for the response (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            id=id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItemResponse",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item")],
        id: Annotated[StrictInt, Field(description="Unique identifier for the response")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericToolItemResponse]:
        """Update Generic Tool Item Response

        Update attributes on a generic tool item response.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item (required)
        :type generic_tool_item_id: int
        :param id: Unique identifier for the response (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            id=id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItemResponse",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item")],
        id: Annotated[StrictInt, Field(description="Unique identifier for the response")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Generic Tool Item Response

        Update attributes on a generic tool item response.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item (required)
        :type generic_tool_item_id: int
        :param id: Unique identifier for the response (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            id=id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItemResponse",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if id is not None:
            _path_params['id'] = id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request is not None:
            _body_params = rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}/generic_tool_item_responses/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericToolItemResponse:
        """Create generic tool item response.

        Create a new response for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericToolItemResponse",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericToolItemResponse]:
        """Create generic tool item response.

        Create a new response for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericToolItemResponse",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the generic tool item.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create generic tool item response.

        Create a new response for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the generic tool. (required)
        :type generic_tool_id: int
        :param generic_tool_item_id: Unique identifier for the generic tool item. (required)
        :type generic_tool_item_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            generic_tool_item_id=generic_tool_item_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericToolItemResponse",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request is not None:
            _body_params = rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}/generic_tool_item_responses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericToolItem1:
        """Show Generic Tool Item

        Get the details of a single Generic Tool Item.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericToolItem1]:
        """Show Generic Tool Item

        Get the details of a single Generic Tool Item.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Generic Tool Item

        Get the details of a single Generic Tool Item.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get_serialize(
        self,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericToolItem1:
        """Update Generic Tool Item

        Update a Generic Tool Item's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericToolItem1]:
        """Update Generic Tool Item

        Update a Generic Tool Item's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Generic Tool Item

        Update a Generic Tool Item's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch_serialize(
        self,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request is not None:
            _body_params = rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericToolItem1:
        """Send a response from a Generic Tool Item and then update the item status

        Send a response from a generic tool item and then update that item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericToolItem1]:
        """Send a response from a Generic Tool Item and then update the item status

        Send a response from a generic tool item and then update that item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send a response from a Generic Tool Item and then update the item status

        Send a response from a generic tool item and then update that item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_serialize(
        self,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request is not None:
            _body_params = rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}/update_and_send_response',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]:
        """List Users with access to a Generic Tool Item

        Returns a list of all Users That have access to a private generic tool item. If the item is public it will return an empty array as anyone with access to the tool can access the item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]]:
        """List Users with access to a Generic Tool Item

        Returns a list of all Users That have access to a private generic tool item. If the item is public it will return an empty array as anyone with access to the tool can access the item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_item_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool Item")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Users with access to a Generic Tool Item

        Returns a list of all Users That have access to a private generic tool item. If the item is public it will return an empty array as anyone with access to the tool can access the item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_item_id: Unique identifier for the Generic Tool Item (required)
        :type generic_tool_item_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_item_id=generic_tool_item_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get_serialize(
        self,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_item_id is not None:
            _path_params['generic_tool_item_id'] = generic_tool_item_id
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items/{generic_tool_item_id}/users_with_permission',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_login_information_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Login Information IDs. Returns item(s) with the specified Login Information ID.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_overdue: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that are overdue.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_recycle_bin: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that have been deleted.")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        filters_issued_at: Annotated[Optional[StrictStr], Field(description="Returns item(s) issued within the specified ISO 8601 datetime range.")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order")] = None,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GenericToolItem1]:
        """List generic tool items

        Returns a list of all Generic Tool Items in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_login_information_id: Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
        :type filters_login_information_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_overdue: If true, returns item(s) that are overdue.
        :type filters_overdue: bool
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_recycle_bin: If true, returns item(s) that have been deleted.
        :type filters_recycle_bin: bool
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param filters_issued_at: Returns item(s) issued within the specified ISO 8601 datetime range.
        :type filters_issued_at: str
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param sort: Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
        :type sort: str
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_login_information_id=filters_login_information_id,
            filters_status=filters_status,
            filters_overdue=filters_overdue,
            filters_query=filters_query,
            filters_recycle_bin=filters_recycle_bin,
            filters_received_from_id=filters_received_from_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            filters_issued_at=filters_issued_at,
            filters_vendor_id=filters_vendor_id,
            sort=sort,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItem1]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_login_information_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Login Information IDs. Returns item(s) with the specified Login Information ID.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_overdue: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that are overdue.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_recycle_bin: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that have been deleted.")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        filters_issued_at: Annotated[Optional[StrictStr], Field(description="Returns item(s) issued within the specified ISO 8601 datetime range.")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order")] = None,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GenericToolItem1]]:
        """List generic tool items

        Returns a list of all Generic Tool Items in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_login_information_id: Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
        :type filters_login_information_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_overdue: If true, returns item(s) that are overdue.
        :type filters_overdue: bool
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_recycle_bin: If true, returns item(s) that have been deleted.
        :type filters_recycle_bin: bool
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param filters_issued_at: Returns item(s) issued within the specified ISO 8601 datetime range.
        :type filters_issued_at: str
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param sort: Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
        :type sort: str
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_login_information_id=filters_login_information_id,
            filters_status=filters_status,
            filters_overdue=filters_overdue,
            filters_query=filters_query,
            filters_recycle_bin=filters_recycle_bin,
            filters_received_from_id=filters_received_from_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            filters_issued_at=filters_issued_at,
            filters_vendor_id=filters_vendor_id,
            sort=sort,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItem1]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified IDs.")] = None,
        filters_login_information_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Login Information IDs. Returns item(s) with the specified Login Information ID.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_overdue: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that are overdue.")] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_recycle_bin: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) that have been deleted.")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        filters_created_at: Annotated[Optional[date], Field(description="Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_updated_at: Annotated[Optional[date], Field(description="Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset")] = None,
        filters_closed_at: Annotated[Optional[date], Field(description="Returns item(s) closed within the specified ISO 8601 datetime range.")] = None,
        filters_issued_at: Annotated[Optional[StrictStr], Field(description="Returns item(s) issued within the specified ISO 8601 datetime range.")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order")] = None,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List generic tool items

        Returns a list of all Generic Tool Items in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_id: Return item(s) with the specified IDs.
        :type filters_id: List[int]
        :param filters_login_information_id: Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
        :type filters_login_information_id: List[int]
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_overdue: If true, returns item(s) that are overdue.
        :type filters_overdue: bool
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_recycle_bin: If true, returns item(s) that have been deleted.
        :type filters_recycle_bin: bool
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_at: Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_created_at: date
        :param filters_updated_at: Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
        :type filters_updated_at: date
        :param filters_closed_at: Returns item(s) closed within the specified ISO 8601 datetime range.
        :type filters_closed_at: date
        :param filters_issued_at: Returns item(s) issued within the specified ISO 8601 datetime range.
        :type filters_issued_at: str
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param sort: Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
        :type sort: str
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_id=filters_id,
            filters_login_information_id=filters_login_information_id,
            filters_status=filters_status,
            filters_overdue=filters_overdue,
            filters_query=filters_query,
            filters_recycle_bin=filters_recycle_bin,
            filters_received_from_id=filters_received_from_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_closed_at=filters_closed_at,
            filters_issued_at=filters_issued_at,
            filters_vendor_id=filters_vendor_id,
            sort=sort,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GenericToolItem1]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        project_id,
        page,
        per_page,
        filters_id,
        filters_login_information_id,
        filters_status,
        filters_overdue,
        filters_query,
        filters_recycle_bin,
        filters_received_from_id,
        filters_created_by_id,
        filters_created_at,
        filters_updated_at,
        filters_closed_at,
        filters_issued_at,
        filters_vendor_id,
        sort,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[id]': 'csv',
            'filters[login_information_id]': 'csv',
            'filters[status]': 'csv',
            'filters[created_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id]', filters_id))
            
        if filters_login_information_id is not None:
            
            _query_params.append(('filters[login_information_id]', filters_login_information_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_overdue is not None:
            
            _query_params.append(('filters[overdue]', filters_overdue))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_recycle_bin is not None:
            
            _query_params.append(('filters[recycle_bin]', filters_recycle_bin))
            
        if filters_received_from_id is not None:
            
            _query_params.append(('filters[received_from_id]', filters_received_from_id))
            
        if filters_created_by_id is not None:
            
            _query_params.append(('filters[created_by_id]', filters_created_by_id))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, date):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            if isinstance(filters_updated_at, date):
                _query_params.append(
                    (
                        'filters[updated_at]',
                        filters_updated_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_closed_at is not None:
            if isinstance(filters_closed_at, date):
                _query_params.append(
                    (
                        'filters[closed_at]',
                        filters_closed_at.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[closed_at]', filters_closed_at))
            
        if filters_issued_at is not None:
            
            _query_params.append(('filters[issued_at]', filters_issued_at))
            
        if filters_vendor_id is not None:
            
            _query_params.append(('filters[vendor_id]', filters_vendor_id))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        completion_mode: Annotated[Optional[StrictStr], Field(description="Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner]]:
        """Batch Update Generic Tool Items

        Update all selected Generic Tool Items. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest
        :param view: If supplied customize the response format
        :type view: str
        :param completion_mode: Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"
        :type completion_mode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request,
            view=view,
            completion_mode=completion_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner]]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        completion_mode: Annotated[Optional[StrictStr], Field(description="Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner]]]:
        """Batch Update Generic Tool Items

        Update all selected Generic Tool Items. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest
        :param view: If supplied customize the response format
        :type view: str
        :param completion_mode: Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"
        :type completion_mode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request,
            view=view,
            completion_mode=completion_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner]]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        completion_mode: Annotated[Optional[StrictStr], Field(description="Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Batch Update Generic Tool Items

        Update all selected Generic Tool Items. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest
        :param view: If supplied customize the response format
        :type view: str
        :param completion_mode: Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"
        :type completion_mode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request,
            view=view,
            completion_mode=completion_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner]]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request,
        view,
        completion_mode,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if completion_mode is not None:
            
            _query_params.append(('completion_mode', completion_mode))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request is not None:
            _body_params = rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericToolItem1:
        """Create Generic Tool Item

        Create a new Generic Tool Item in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericToolItem1]:
        """Create Generic Tool Item

        Create a new Generic Tool Item in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        generic_tool_id: Annotated[StrictInt, Field(description="Unique identifier for the Generic Tool")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest,
        view: Annotated[Optional[StrictStr], Field(description="If supplied customize the response format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Generic Tool Item

        Create a new Generic Tool Item in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param generic_tool_id: Unique identifier for the Generic Tool (required)
        :type generic_tool_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: (required)
        :type rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request: RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest
        :param view: If supplied customize the response format
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_serialize(
            procore_company_id=procore_company_id,
            generic_tool_id=generic_tool_id,
            project_id=project_id,
            rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request=rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericToolItem1",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '422': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_serialize(
        self,
        procore_company_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if generic_tool_id is not None:
            _path_params['generic_tool_id'] = generic_tool_id
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request is not None:
            _body_params = rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/projects/{project_id}/generic_tools/{generic_tool_id}/generic_tool_items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


