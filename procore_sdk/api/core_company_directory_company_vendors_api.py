# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.business_register_body import BusinessRegisterBody
from procore_sdk.models.company_vendor_body import CompanyVendorBody
from procore_sdk.models.company_vendor_sync_body import CompanyVendorSyncBody
from procore_sdk.models.normal_view_business_register import NormalViewBusinessRegister
from procore_sdk.models.rest_v10_vendors_get200_response_inner import RestV10VendorsGet200ResponseInner
from procore_sdk.models.rest_v10_vendors_id_get200_response import RestV10VendorsIdGet200Response
from procore_sdk.models.rest_v10_vendors_sync_patch200_response import RestV10VendorsSyncPatch200Response

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class CoreCompanyDirectoryCompanyVendorsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_vendors_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_origin_id: Annotated[Optional[StrictStr], Field(description="Origin ID. Returns item(s) with the specified Origin ID.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number")] = None,
        filters_created_at: Annotated[Optional[datetime], Field(description="Return items within a specific created at ISO8601 datetime range")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Return items within a specific updated at ISO8601 datetime range")] = None,
        filters_standard_cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors associated with the specified standard cost code id(s)")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors associated with the specified trade id(s)")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors with the specified id(s)")] = None,
        filters_parent_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors with the specified parent id(s)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return items with the specified sort")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10VendorsGet200ResponseInner]:
        """List company vendors

        Return a list of all Vendors associated with a Company.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_origin_id: Origin ID. Returns item(s) with the specified Origin ID.
        :type filters_origin_id: str
        :param filters_search: Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number
        :type filters_search: str
        :param filters_created_at: Return items within a specific created at ISO8601 datetime range
        :type filters_created_at: datetime
        :param filters_updated_at: Return items within a specific updated at ISO8601 datetime range
        :type filters_updated_at: str
        :param filters_standard_cost_code_id: Returns vendors associated with the specified standard cost code id(s)
        :type filters_standard_cost_code_id: List[int]
        :param filters_trade_id: Returns vendors associated with the specified trade id(s)
        :type filters_trade_id: List[int]
        :param filters_id: Returns vendors with the specified id(s)
        :type filters_id: List[int]
        :param filters_parent_id: Returns vendors with the specified parent id(s)
        :type filters_parent_id: List[int]
        :param sort: Return items with the specified sort
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            view=view,
            page=page,
            per_page=per_page,
            filters_origin_id=filters_origin_id,
            filters_search=filters_search,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_standard_cost_code_id=filters_standard_cost_code_id,
            filters_trade_id=filters_trade_id,
            filters_id=filters_id,
            filters_parent_id=filters_parent_id,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10VendorsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_origin_id: Annotated[Optional[StrictStr], Field(description="Origin ID. Returns item(s) with the specified Origin ID.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number")] = None,
        filters_created_at: Annotated[Optional[datetime], Field(description="Return items within a specific created at ISO8601 datetime range")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Return items within a specific updated at ISO8601 datetime range")] = None,
        filters_standard_cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors associated with the specified standard cost code id(s)")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors associated with the specified trade id(s)")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors with the specified id(s)")] = None,
        filters_parent_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors with the specified parent id(s)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return items with the specified sort")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10VendorsGet200ResponseInner]]:
        """List company vendors

        Return a list of all Vendors associated with a Company.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_origin_id: Origin ID. Returns item(s) with the specified Origin ID.
        :type filters_origin_id: str
        :param filters_search: Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number
        :type filters_search: str
        :param filters_created_at: Return items within a specific created at ISO8601 datetime range
        :type filters_created_at: datetime
        :param filters_updated_at: Return items within a specific updated at ISO8601 datetime range
        :type filters_updated_at: str
        :param filters_standard_cost_code_id: Returns vendors associated with the specified standard cost code id(s)
        :type filters_standard_cost_code_id: List[int]
        :param filters_trade_id: Returns vendors associated with the specified trade id(s)
        :type filters_trade_id: List[int]
        :param filters_id: Returns vendors with the specified id(s)
        :type filters_id: List[int]
        :param filters_parent_id: Returns vendors with the specified parent id(s)
        :type filters_parent_id: List[int]
        :param sort: Return items with the specified sort
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            view=view,
            page=page,
            per_page=per_page,
            filters_origin_id=filters_origin_id,
            filters_search=filters_search,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_standard_cost_code_id=filters_standard_cost_code_id,
            filters_trade_id=filters_trade_id,
            filters_id=filters_id,
            filters_parent_id=filters_parent_id,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10VendorsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_origin_id: Annotated[Optional[StrictStr], Field(description="Origin ID. Returns item(s) with the specified Origin ID.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number")] = None,
        filters_created_at: Annotated[Optional[datetime], Field(description="Return items within a specific created at ISO8601 datetime range")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Return items within a specific updated at ISO8601 datetime range")] = None,
        filters_standard_cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors associated with the specified standard cost code id(s)")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors associated with the specified trade id(s)")] = None,
        filters_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors with the specified id(s)")] = None,
        filters_parent_id: Annotated[Optional[List[StrictInt]], Field(description="Returns vendors with the specified parent id(s)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return items with the specified sort")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List company vendors

        Return a list of all Vendors associated with a Company.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_origin_id: Origin ID. Returns item(s) with the specified Origin ID.
        :type filters_origin_id: str
        :param filters_search: Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number
        :type filters_search: str
        :param filters_created_at: Return items within a specific created at ISO8601 datetime range
        :type filters_created_at: datetime
        :param filters_updated_at: Return items within a specific updated at ISO8601 datetime range
        :type filters_updated_at: str
        :param filters_standard_cost_code_id: Returns vendors associated with the specified standard cost code id(s)
        :type filters_standard_cost_code_id: List[int]
        :param filters_trade_id: Returns vendors associated with the specified trade id(s)
        :type filters_trade_id: List[int]
        :param filters_id: Returns vendors with the specified id(s)
        :type filters_id: List[int]
        :param filters_parent_id: Returns vendors with the specified parent id(s)
        :type filters_parent_id: List[int]
        :param sort: Return items with the specified sort
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            view=view,
            page=page,
            per_page=per_page,
            filters_origin_id=filters_origin_id,
            filters_search=filters_search,
            filters_created_at=filters_created_at,
            filters_updated_at=filters_updated_at,
            filters_standard_cost_code_id=filters_standard_cost_code_id,
            filters_trade_id=filters_trade_id,
            filters_id=filters_id,
            filters_parent_id=filters_parent_id,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10VendorsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_get_serialize(
        self,
        procore_company_id,
        company_id,
        view,
        page,
        per_page,
        filters_origin_id,
        filters_search,
        filters_created_at,
        filters_updated_at,
        filters_standard_cost_code_id,
        filters_trade_id,
        filters_id,
        filters_parent_id,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[standard_cost_code_id][]': 'multi',
            'filters[trade_id][]': 'multi',
            'filters[id][]': 'multi',
            'filters[parent_id][]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if company_id is not None:
            
            _query_params.append(('company_id', company_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_origin_id is not None:
            
            _query_params.append(('filters[origin_id]', filters_origin_id))
            
        if filters_search is not None:
            
            _query_params.append(('filters[search]', filters_search))
            
        if filters_created_at is not None:
            if isinstance(filters_created_at, datetime):
                _query_params.append(
                    (
                        'filters[created_at]',
                        filters_created_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[created_at]', filters_created_at))
            
        if filters_updated_at is not None:
            
            _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_standard_cost_code_id is not None:
            
            _query_params.append(('filters[standard_cost_code_id][]', filters_standard_cost_code_id))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id][]', filters_trade_id))
            
        if filters_id is not None:
            
            _query_params.append(('filters[id][]', filters_id))
            
        if filters_parent_id is not None:
            
            _query_params.append(('filters[parent_id][]', filters_parent_id))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/vendors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_vendors_id_business_register_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the Company Vendor")],
        company_id: Annotated[StrictInt, Field(description="ID of the Company")],
        business_register_body: BusinessRegisterBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NormalViewBusinessRegister:
        """Update Company Vendor Business Register

        Update an existing Business Register associated with a specified Vendor.  The Register must already exist.  Changing the identifier of a verified Business Register will set the following attributes to null: verification_status, verified_at

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the Company Vendor (required)
        :type id: int
        :param company_id: ID of the Company (required)
        :type company_id: int
        :param business_register_body: (required)
        :type business_register_body: BusinessRegisterBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_business_register_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            business_register_body=business_register_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NormalViewBusinessRegister",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response",
            '422': "RestV10TaxTypesPost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_id_business_register_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the Company Vendor")],
        company_id: Annotated[StrictInt, Field(description="ID of the Company")],
        business_register_body: BusinessRegisterBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NormalViewBusinessRegister]:
        """Update Company Vendor Business Register

        Update an existing Business Register associated with a specified Vendor.  The Register must already exist.  Changing the identifier of a verified Business Register will set the following attributes to null: verification_status, verified_at

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the Company Vendor (required)
        :type id: int
        :param company_id: ID of the Company (required)
        :type company_id: int
        :param business_register_body: (required)
        :type business_register_body: BusinessRegisterBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_business_register_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            business_register_body=business_register_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NormalViewBusinessRegister",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response",
            '422': "RestV10TaxTypesPost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_id_business_register_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the Company Vendor")],
        company_id: Annotated[StrictInt, Field(description="ID of the Company")],
        business_register_body: BusinessRegisterBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Company Vendor Business Register

        Update an existing Business Register associated with a specified Vendor.  The Register must already exist.  Changing the identifier of a verified Business Register will set the following attributes to null: verification_status, verified_at

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the Company Vendor (required)
        :type id: int
        :param company_id: ID of the Company (required)
        :type company_id: int
        :param business_register_body: (required)
        :type business_register_body: BusinessRegisterBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_business_register_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            business_register_body=business_register_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NormalViewBusinessRegister",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response",
            '422': "RestV10TaxTypesPost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_id_business_register_patch_serialize(
        self,
        procore_company_id,
        id,
        company_id,
        business_register_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if company_id is not None:
            
            _query_params.append(('company_id', company_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if business_register_body is not None:
            _body_params = business_register_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/vendors/{id}/business_register',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_vendors_id_business_register_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the Company Vendor")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        business_register_body: BusinessRegisterBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NormalViewBusinessRegister:
        """Create Company Vendor Business Register

        Create a new Business Register associated with a specified Vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the Company Vendor (required)
        :type id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param business_register_body: (required)
        :type business_register_body: BusinessRegisterBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_business_register_post_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            business_register_body=business_register_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NormalViewBusinessRegister",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '409': "RestV10VendorsIdBusinessRegisterPost409Response",
            '422': "RestV10TaxTypesPost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_id_business_register_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the Company Vendor")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        business_register_body: BusinessRegisterBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NormalViewBusinessRegister]:
        """Create Company Vendor Business Register

        Create a new Business Register associated with a specified Vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the Company Vendor (required)
        :type id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param business_register_body: (required)
        :type business_register_body: BusinessRegisterBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_business_register_post_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            business_register_body=business_register_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NormalViewBusinessRegister",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '409': "RestV10VendorsIdBusinessRegisterPost409Response",
            '422': "RestV10TaxTypesPost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_id_business_register_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the Company Vendor")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        business_register_body: BusinessRegisterBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Company Vendor Business Register

        Create a new Business Register associated with a specified Vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the Company Vendor (required)
        :type id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param business_register_body: (required)
        :type business_register_body: BusinessRegisterBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_business_register_post_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            business_register_body=business_register_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "NormalViewBusinessRegister",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '409': "RestV10VendorsIdBusinessRegisterPost409Response",
            '422': "RestV10TaxTypesPost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_id_business_register_post_serialize(
        self,
        procore_company_id,
        id,
        company_id,
        business_register_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if company_id is not None:
            
            _query_params.append(('company_id', company_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if business_register_body is not None:
            _body_params = business_register_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/vendors/{id}/business_register',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_vendors_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the vendor")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10VendorsIdGet200Response:
        """Show company vendor

        Show detail on a specified Company Vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the vendor (required)
        :type id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            view=view,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsIdGet200Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the vendor")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10VendorsIdGet200Response]:
        """Show company vendor

        Show detail on a specified Company Vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the vendor (required)
        :type id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            view=view,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsIdGet200Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the vendor")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show company vendor

        Show detail on a specified Company Vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the vendor (required)
        :type id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_id=company_id,
            view=view,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsIdGet200Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_id_get_serialize(
        self,
        procore_company_id,
        id,
        company_id,
        view,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if company_id is not None:
            
            _query_params.append(('company_id', company_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/vendors/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_vendors_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the vendor")],
        company_vendor_body: CompanyVendorBody,
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10VendorsGet200ResponseInner:
        """Update company vendor

        Update a specified Company Vendor.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the vendor (required)
        :type id: int
        :param company_vendor_body: (required)
        :type company_vendor_body: CompanyVendorBody
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_vendor_body=company_vendor_body,
            view=view,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the vendor")],
        company_vendor_body: CompanyVendorBody,
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10VendorsGet200ResponseInner]:
        """Update company vendor

        Update a specified Company Vendor.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the vendor (required)
        :type id: int
        :param company_vendor_body: (required)
        :type company_vendor_body: CompanyVendorBody
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_vendor_body=company_vendor_body,
            view=view,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of the vendor")],
        company_vendor_body: CompanyVendorBody,
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update company vendor

        Update a specified Company Vendor.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of the vendor (required)
        :type id: int
        :param company_vendor_body: (required)
        :type company_vendor_body: CompanyVendorBody
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            company_vendor_body=company_vendor_body,
            view=view,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_id_patch_serialize(
        self,
        procore_company_id,
        id,
        company_vendor_body,
        view,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if company_vendor_body is not None:
            _body_params = company_vendor_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/vendors/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_vendors_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_vendor_body: CompanyVendorBody,
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10VendorsGet200ResponseInner:
        """Create company vendor

        Create a new Vendor associated with a specified Company.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_vendor_body: (required)
        :type company_vendor_body: CompanyVendorBody
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_post_serialize(
            procore_company_id=procore_company_id,
            company_vendor_body=company_vendor_body,
            view=view,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10VendorsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_vendor_body: CompanyVendorBody,
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10VendorsGet200ResponseInner]:
        """Create company vendor

        Create a new Vendor associated with a specified Company.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_vendor_body: (required)
        :type company_vendor_body: CompanyVendorBody
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_post_serialize(
            procore_company_id=procore_company_id,
            company_vendor_body=company_vendor_body,
            view=view,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10VendorsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_vendor_body: CompanyVendorBody,
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.")] = None,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create company vendor

        Create a new Vendor associated with a specified Company.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_vendor_body: (required)
        :type company_vendor_body: CompanyVendorBody
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). The default view is extended.
        :type view: str
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_post_serialize(
            procore_company_id=procore_company_id,
            company_vendor_body=company_vendor_body,
            view=view,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10VendorsGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_post_serialize(
        self,
        procore_company_id,
        company_vendor_body,
        view,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if company_vendor_body is not None:
            _body_params = company_vendor_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/vendors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_vendors_sync_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_vendor_sync_body: CompanyVendorSyncBody,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10VendorsSyncPatch200Response:
        """Sync company vendors

        Creates or updates a batch of Company Vendors. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.  #### Documentation  The purpose of this API is to allow one or more vendors to be created or updated.  The caller provides an array of hashes, each hash containing the attributes for a single vendor. The attribute names in each hash match those used by the Create and Update Company Vendors APIs. Attributes for a maximum of 1000 vendors may be passed with each call.  The API will always return an HTTP status of 200.  The response body will contain two attributes entities and errors. The attributes for each successfully created or updated vendor will appear in the entities list. The attributes for each vendor will match those returned by the Show Company Vendor API. For each vendor which could not be created or updated, the attributes supplied by the caller will be present in the errors list, along with an additional errors attribute which will provide reasons for the failure.  For each vendor the caller supplies data for, the Sync API uses two different types of unique identifier to determine whether a new vendor is to be created, or an existing vendor is to be updated. The unique identifiers are supplied as the ID and origin_id attributes.  If neither unique identifier is provided, Procore will attempt to create a new vendor. For example the request below will create two new Vendors.  ````json {   \"company_id\": 352361,   \"updates\": [     { \"name\": \"New Vendor 1\" },     { \"name\": \"New Vendor 2\" }   ] } ````  The response to this request lists all attributes for the vendors which have been created.  The ID attribute is the Procore unique identifier for a particular vendor. If the caller already knows the Procore unique identifier for a particular vendor (either through the List Company Vendors API or through the Create Company Vendor API) this value can be passed to indicate which vendor is to be updated. Note that if the caller passes an ID value which Procore does not recognise, Procore will report an error.  The caller does not need to be aware of the unique identifiers assigned by Procore for each vendor in order to create or update them. Instead the caller can provide their own unique identifier for the vendor in the `origin_id` attribute. If Procore cannot find a vendor with the supplied `origin_id` it will create a new one. If Procore can find a vendor with the supplied `origin_id` it will update it.  Note that alongside the origin_id attribute, Procore also provides an `origin_data` attribute. Procore does not interpret the contents of this attribute. The caller can use this to store and retrieve their own contextual information about this vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_vendor_sync_body: (required)
        :type company_vendor_sync_body: CompanyVendorSyncBody
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_sync_patch_serialize(
            procore_company_id=procore_company_id,
            company_vendor_sync_body=company_vendor_sync_body,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsSyncPatch200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_vendors_sync_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_vendor_sync_body: CompanyVendorSyncBody,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10VendorsSyncPatch200Response]:
        """Sync company vendors

        Creates or updates a batch of Company Vendors. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.  #### Documentation  The purpose of this API is to allow one or more vendors to be created or updated.  The caller provides an array of hashes, each hash containing the attributes for a single vendor. The attribute names in each hash match those used by the Create and Update Company Vendors APIs. Attributes for a maximum of 1000 vendors may be passed with each call.  The API will always return an HTTP status of 200.  The response body will contain two attributes entities and errors. The attributes for each successfully created or updated vendor will appear in the entities list. The attributes for each vendor will match those returned by the Show Company Vendor API. For each vendor which could not be created or updated, the attributes supplied by the caller will be present in the errors list, along with an additional errors attribute which will provide reasons for the failure.  For each vendor the caller supplies data for, the Sync API uses two different types of unique identifier to determine whether a new vendor is to be created, or an existing vendor is to be updated. The unique identifiers are supplied as the ID and origin_id attributes.  If neither unique identifier is provided, Procore will attempt to create a new vendor. For example the request below will create two new Vendors.  ````json {   \"company_id\": 352361,   \"updates\": [     { \"name\": \"New Vendor 1\" },     { \"name\": \"New Vendor 2\" }   ] } ````  The response to this request lists all attributes for the vendors which have been created.  The ID attribute is the Procore unique identifier for a particular vendor. If the caller already knows the Procore unique identifier for a particular vendor (either through the List Company Vendors API or through the Create Company Vendor API) this value can be passed to indicate which vendor is to be updated. Note that if the caller passes an ID value which Procore does not recognise, Procore will report an error.  The caller does not need to be aware of the unique identifiers assigned by Procore for each vendor in order to create or update them. Instead the caller can provide their own unique identifier for the vendor in the `origin_id` attribute. If Procore cannot find a vendor with the supplied `origin_id` it will create a new one. If Procore can find a vendor with the supplied `origin_id` it will update it.  Note that alongside the origin_id attribute, Procore also provides an `origin_data` attribute. Procore does not interpret the contents of this attribute. The caller can use this to store and retrieve their own contextual information about this vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_vendor_sync_body: (required)
        :type company_vendor_sync_body: CompanyVendorSyncBody
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_sync_patch_serialize(
            procore_company_id=procore_company_id,
            company_vendor_sync_body=company_vendor_sync_body,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsSyncPatch200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_vendors_sync_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_vendor_sync_body: CompanyVendorSyncBody,
        run_configurable_validations: Annotated[Optional[StrictBool], Field(description="If true, validations are run for the corresponding Configurable Field Set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Sync company vendors

        Creates or updates a batch of Company Vendors. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.  #### Country and State codes The `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification. See [Working with Country Codes](/documentation/country-codes) for additional information.  #### Documentation  The purpose of this API is to allow one or more vendors to be created or updated.  The caller provides an array of hashes, each hash containing the attributes for a single vendor. The attribute names in each hash match those used by the Create and Update Company Vendors APIs. Attributes for a maximum of 1000 vendors may be passed with each call.  The API will always return an HTTP status of 200.  The response body will contain two attributes entities and errors. The attributes for each successfully created or updated vendor will appear in the entities list. The attributes for each vendor will match those returned by the Show Company Vendor API. For each vendor which could not be created or updated, the attributes supplied by the caller will be present in the errors list, along with an additional errors attribute which will provide reasons for the failure.  For each vendor the caller supplies data for, the Sync API uses two different types of unique identifier to determine whether a new vendor is to be created, or an existing vendor is to be updated. The unique identifiers are supplied as the ID and origin_id attributes.  If neither unique identifier is provided, Procore will attempt to create a new vendor. For example the request below will create two new Vendors.  ````json {   \"company_id\": 352361,   \"updates\": [     { \"name\": \"New Vendor 1\" },     { \"name\": \"New Vendor 2\" }   ] } ````  The response to this request lists all attributes for the vendors which have been created.  The ID attribute is the Procore unique identifier for a particular vendor. If the caller already knows the Procore unique identifier for a particular vendor (either through the List Company Vendors API or through the Create Company Vendor API) this value can be passed to indicate which vendor is to be updated. Note that if the caller passes an ID value which Procore does not recognise, Procore will report an error.  The caller does not need to be aware of the unique identifiers assigned by Procore for each vendor in order to create or update them. Instead the caller can provide their own unique identifier for the vendor in the `origin_id` attribute. If Procore cannot find a vendor with the supplied `origin_id` it will create a new one. If Procore can find a vendor with the supplied `origin_id` it will update it.  Note that alongside the origin_id attribute, Procore also provides an `origin_data` attribute. Procore does not interpret the contents of this attribute. The caller can use this to store and retrieve their own contextual information about this vendor.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_vendor_sync_body: (required)
        :type company_vendor_sync_body: CompanyVendorSyncBody
        :param run_configurable_validations: If true, validations are run for the corresponding Configurable Field Set.
        :type run_configurable_validations: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_vendors_sync_patch_serialize(
            procore_company_id=procore_company_id,
            company_vendor_sync_body=company_vendor_sync_body,
            run_configurable_validations=run_configurable_validations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10VendorsSyncPatch200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_vendors_sync_patch_serialize(
        self,
        procore_company_id,
        company_vendor_sync_body,
        run_configurable_validations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if run_configurable_validations is not None:
            
            _query_params.append(('run_configurable_validations', run_configurable_validations))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if company_vendor_sync_body is not None:
            _body_params = company_vendor_sync_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/vendors/sync',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


