# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.inspection_user import InspectionUser

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class QualitySafetyInspectionsInspectionUsersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v11_projects_project_id_checklist_users_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        filters_potential_assignee: Annotated[Optional[StrictBool], Field(description="Returns item(s) with the that can be potential inspection assignees.")] = None,
        filters_potential_distribution_member: Annotated[Optional[StrictBool], Field(description="Returns item(s) that can be potential distribution members.")] = None,
        filters_potential_point_of_contact: Annotated[Optional[StrictBool], Field(description="Returns item(s) with the that can be potential inspection points of contact.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Direction of sorting param (name) is in desc order of full name")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InspectionUser]:
        """List Inspection Users

        Returns a list of Inspection Users for a given project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param filters_potential_assignee: Returns item(s) with the that can be potential inspection assignees.
        :type filters_potential_assignee: bool
        :param filters_potential_distribution_member: Returns item(s) that can be potential distribution members.
        :type filters_potential_distribution_member: bool
        :param filters_potential_point_of_contact: Returns item(s) with the that can be potential inspection points of contact.
        :type filters_potential_point_of_contact: bool
        :param sort: Direction of sorting param (name) is in desc order of full name
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_vendor_id=filters_vendor_id,
            filters_potential_assignee=filters_potential_assignee,
            filters_potential_distribution_member=filters_potential_distribution_member,
            filters_potential_point_of_contact=filters_potential_point_of_contact,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InspectionUser]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v11_projects_project_id_checklist_users_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        filters_potential_assignee: Annotated[Optional[StrictBool], Field(description="Returns item(s) with the that can be potential inspection assignees.")] = None,
        filters_potential_distribution_member: Annotated[Optional[StrictBool], Field(description="Returns item(s) that can be potential distribution members.")] = None,
        filters_potential_point_of_contact: Annotated[Optional[StrictBool], Field(description="Returns item(s) with the that can be potential inspection points of contact.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Direction of sorting param (name) is in desc order of full name")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InspectionUser]]:
        """List Inspection Users

        Returns a list of Inspection Users for a given project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param filters_potential_assignee: Returns item(s) with the that can be potential inspection assignees.
        :type filters_potential_assignee: bool
        :param filters_potential_distribution_member: Returns item(s) that can be potential distribution members.
        :type filters_potential_distribution_member: bool
        :param filters_potential_point_of_contact: Returns item(s) with the that can be potential inspection points of contact.
        :type filters_potential_point_of_contact: bool
        :param sort: Direction of sorting param (name) is in desc order of full name
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_vendor_id=filters_vendor_id,
            filters_potential_assignee=filters_potential_assignee,
            filters_potential_distribution_member=filters_potential_distribution_member,
            filters_potential_point_of_contact=filters_potential_point_of_contact,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InspectionUser]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v11_projects_project_id_checklist_users_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_vendor_id: Annotated[Optional[StrictInt], Field(description="Return item(s) with the specified Vendor ID.")] = None,
        filters_potential_assignee: Annotated[Optional[StrictBool], Field(description="Returns item(s) with the that can be potential inspection assignees.")] = None,
        filters_potential_distribution_member: Annotated[Optional[StrictBool], Field(description="Returns item(s) that can be potential distribution members.")] = None,
        filters_potential_point_of_contact: Annotated[Optional[StrictBool], Field(description="Returns item(s) with the that can be potential inspection points of contact.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Direction of sorting param (name) is in desc order of full name")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Inspection Users

        Returns a list of Inspection Users for a given project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_vendor_id: Return item(s) with the specified Vendor ID.
        :type filters_vendor_id: int
        :param filters_potential_assignee: Returns item(s) with the that can be potential inspection assignees.
        :type filters_potential_assignee: bool
        :param filters_potential_distribution_member: Returns item(s) that can be potential distribution members.
        :type filters_potential_distribution_member: bool
        :param filters_potential_point_of_contact: Returns item(s) with the that can be potential inspection points of contact.
        :type filters_potential_point_of_contact: bool
        :param sort: Direction of sorting param (name) is in desc order of full name
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v11_projects_project_id_checklist_users_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_vendor_id=filters_vendor_id,
            filters_potential_assignee=filters_potential_assignee,
            filters_potential_distribution_member=filters_potential_distribution_member,
            filters_potential_point_of_contact=filters_potential_point_of_contact,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InspectionUser]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v11_projects_project_id_checklist_users_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_vendor_id,
        filters_potential_assignee,
        filters_potential_distribution_member,
        filters_potential_point_of_contact,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_vendor_id is not None:
            
            _query_params.append(('filters[vendor_id]', filters_vendor_id))
            
        if filters_potential_assignee is not None:
            
            _query_params.append(('filters[potential_assignee]', filters_potential_assignee))
            
        if filters_potential_distribution_member is not None:
            
            _query_params.append(('filters[potential_distribution_member]', filters_potential_distribution_member))
            
        if filters_potential_point_of_contact is not None:
            
            _query_params.append(('filters[potential_point_of_contact]', filters_potential_point_of_contact))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.1/projects/{project_id}/checklist/users',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


