# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_companies_company_id_schedule_summary_get200_response import RestV10CompaniesCompanyIdScheduleSummaryGet200Response

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class CoreCompanyCompanyScheduleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_companies_company_id_schedule_summary_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        after: Annotated[StrictStr, Field(description="Beginning of date range to filter by.")],
        before: Annotated[StrictStr, Field(description="End of date range to filter by")],
        limit_per_day: Annotated[Optional[StrictInt], Field(description="Number of results to return per day")] = None,
        project_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project IDs")] = None,
        project_stage_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project stage IDs")] = None,
        project_type_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project type IDs")] = None,
        project_department_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project department IDs")] = None,
        project_office_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project office IDs")] = None,
        project_region_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project region IDs")] = None,
        project_owner_type_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project owner type IDs")] = None,
        program_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project program IDs")] = None,
        resource_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by resource IDs")] = None,
        sort_key: Annotated[Optional[StrictStr], Field(description="Sort results by a property of projects. Defaults to descending project_event_count.")] = None,
        sort_dir: Annotated[Optional[StrictStr], Field(description="Sort results in ascending or descending order")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CompaniesCompanyIdScheduleSummaryGet200Response:
        """Return company schedule summary

        Returns a list of the number of tasks and calendar items per project for each day in the specified date range. Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param after: Beginning of date range to filter by. (required)
        :type after: str
        :param before: End of date range to filter by (required)
        :type before: str
        :param limit_per_day: Number of results to return per day
        :type limit_per_day: int
        :param project_ids: Filter by project IDs
        :type project_ids: List[int]
        :param project_stage_ids: Filter by project stage IDs
        :type project_stage_ids: List[int]
        :param project_type_ids: Filter by project type IDs
        :type project_type_ids: List[int]
        :param project_department_ids: Filter by project department IDs
        :type project_department_ids: List[int]
        :param project_office_ids: Filter by project office IDs
        :type project_office_ids: List[int]
        :param project_region_ids: Filter by project region IDs
        :type project_region_ids: List[int]
        :param project_owner_type_ids: Filter by project owner type IDs
        :type project_owner_type_ids: List[int]
        :param program_ids: Filter by project program IDs
        :type program_ids: List[int]
        :param resource_ids: Filter by resource IDs
        :type resource_ids: List[int]
        :param sort_key: Sort results by a property of projects. Defaults to descending project_event_count.
        :type sort_key: str
        :param sort_dir: Sort results in ascending or descending order
        :type sort_dir: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_schedule_summary_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            after=after,
            before=before,
            limit_per_day=limit_per_day,
            project_ids=project_ids,
            project_stage_ids=project_stage_ids,
            project_type_ids=project_type_ids,
            project_department_ids=project_department_ids,
            project_office_ids=project_office_ids,
            project_region_ids=project_region_ids,
            project_owner_type_ids=project_owner_type_ids,
            program_ids=program_ids,
            resource_ids=resource_ids,
            sort_key=sort_key,
            sort_dir=sort_dir,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdScheduleSummaryGet200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_schedule_summary_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        after: Annotated[StrictStr, Field(description="Beginning of date range to filter by.")],
        before: Annotated[StrictStr, Field(description="End of date range to filter by")],
        limit_per_day: Annotated[Optional[StrictInt], Field(description="Number of results to return per day")] = None,
        project_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project IDs")] = None,
        project_stage_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project stage IDs")] = None,
        project_type_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project type IDs")] = None,
        project_department_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project department IDs")] = None,
        project_office_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project office IDs")] = None,
        project_region_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project region IDs")] = None,
        project_owner_type_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project owner type IDs")] = None,
        program_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project program IDs")] = None,
        resource_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by resource IDs")] = None,
        sort_key: Annotated[Optional[StrictStr], Field(description="Sort results by a property of projects. Defaults to descending project_event_count.")] = None,
        sort_dir: Annotated[Optional[StrictStr], Field(description="Sort results in ascending or descending order")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CompaniesCompanyIdScheduleSummaryGet200Response]:
        """Return company schedule summary

        Returns a list of the number of tasks and calendar items per project for each day in the specified date range. Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param after: Beginning of date range to filter by. (required)
        :type after: str
        :param before: End of date range to filter by (required)
        :type before: str
        :param limit_per_day: Number of results to return per day
        :type limit_per_day: int
        :param project_ids: Filter by project IDs
        :type project_ids: List[int]
        :param project_stage_ids: Filter by project stage IDs
        :type project_stage_ids: List[int]
        :param project_type_ids: Filter by project type IDs
        :type project_type_ids: List[int]
        :param project_department_ids: Filter by project department IDs
        :type project_department_ids: List[int]
        :param project_office_ids: Filter by project office IDs
        :type project_office_ids: List[int]
        :param project_region_ids: Filter by project region IDs
        :type project_region_ids: List[int]
        :param project_owner_type_ids: Filter by project owner type IDs
        :type project_owner_type_ids: List[int]
        :param program_ids: Filter by project program IDs
        :type program_ids: List[int]
        :param resource_ids: Filter by resource IDs
        :type resource_ids: List[int]
        :param sort_key: Sort results by a property of projects. Defaults to descending project_event_count.
        :type sort_key: str
        :param sort_dir: Sort results in ascending or descending order
        :type sort_dir: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_schedule_summary_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            after=after,
            before=before,
            limit_per_day=limit_per_day,
            project_ids=project_ids,
            project_stage_ids=project_stage_ids,
            project_type_ids=project_type_ids,
            project_department_ids=project_department_ids,
            project_office_ids=project_office_ids,
            project_region_ids=project_region_ids,
            project_owner_type_ids=project_owner_type_ids,
            program_ids=program_ids,
            resource_ids=resource_ids,
            sort_key=sort_key,
            sort_dir=sort_dir,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdScheduleSummaryGet200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_schedule_summary_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        after: Annotated[StrictStr, Field(description="Beginning of date range to filter by.")],
        before: Annotated[StrictStr, Field(description="End of date range to filter by")],
        limit_per_day: Annotated[Optional[StrictInt], Field(description="Number of results to return per day")] = None,
        project_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project IDs")] = None,
        project_stage_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project stage IDs")] = None,
        project_type_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project type IDs")] = None,
        project_department_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project department IDs")] = None,
        project_office_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project office IDs")] = None,
        project_region_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project region IDs")] = None,
        project_owner_type_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project owner type IDs")] = None,
        program_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by project program IDs")] = None,
        resource_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter by resource IDs")] = None,
        sort_key: Annotated[Optional[StrictStr], Field(description="Sort results by a property of projects. Defaults to descending project_event_count.")] = None,
        sort_dir: Annotated[Optional[StrictStr], Field(description="Sort results in ascending or descending order")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return company schedule summary

        Returns a list of the number of tasks and calendar items per project for each day in the specified date range. Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param after: Beginning of date range to filter by. (required)
        :type after: str
        :param before: End of date range to filter by (required)
        :type before: str
        :param limit_per_day: Number of results to return per day
        :type limit_per_day: int
        :param project_ids: Filter by project IDs
        :type project_ids: List[int]
        :param project_stage_ids: Filter by project stage IDs
        :type project_stage_ids: List[int]
        :param project_type_ids: Filter by project type IDs
        :type project_type_ids: List[int]
        :param project_department_ids: Filter by project department IDs
        :type project_department_ids: List[int]
        :param project_office_ids: Filter by project office IDs
        :type project_office_ids: List[int]
        :param project_region_ids: Filter by project region IDs
        :type project_region_ids: List[int]
        :param project_owner_type_ids: Filter by project owner type IDs
        :type project_owner_type_ids: List[int]
        :param program_ids: Filter by project program IDs
        :type program_ids: List[int]
        :param resource_ids: Filter by resource IDs
        :type resource_ids: List[int]
        :param sort_key: Sort results by a property of projects. Defaults to descending project_event_count.
        :type sort_key: str
        :param sort_dir: Sort results in ascending or descending order
        :type sort_dir: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_schedule_summary_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            after=after,
            before=before,
            limit_per_day=limit_per_day,
            project_ids=project_ids,
            project_stage_ids=project_stage_ids,
            project_type_ids=project_type_ids,
            project_department_ids=project_department_ids,
            project_office_ids=project_office_ids,
            project_region_ids=project_region_ids,
            project_owner_type_ids=project_owner_type_ids,
            program_ids=program_ids,
            resource_ids=resource_ids,
            sort_key=sort_key,
            sort_dir=sort_dir,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdScheduleSummaryGet200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_schedule_summary_get_serialize(
        self,
        procore_company_id,
        company_id,
        after,
        before,
        limit_per_day,
        project_ids,
        project_stage_ids,
        project_type_ids,
        project_department_ids,
        project_office_ids,
        project_region_ids,
        project_owner_type_ids,
        program_ids,
        resource_ids,
        sort_key,
        sort_dir,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'project_ids': 'multi',
            'project_stage_ids': 'multi',
            'project_type_ids': 'multi',
            'project_department_ids': 'multi',
            'project_office_ids': 'multi',
            'project_region_ids': 'multi',
            'project_owner_type_ids': 'multi',
            'program_ids': 'multi',
            'resource_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        # process the query parameters
        if after is not None:
            
            _query_params.append(('after', after))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if limit_per_day is not None:
            
            _query_params.append(('limit_per_day', limit_per_day))
            
        if project_ids is not None:
            
            _query_params.append(('project_ids', project_ids))
            
        if project_stage_ids is not None:
            
            _query_params.append(('project_stage_ids', project_stage_ids))
            
        if project_type_ids is not None:
            
            _query_params.append(('project_type_ids', project_type_ids))
            
        if project_department_ids is not None:
            
            _query_params.append(('project_department_ids', project_department_ids))
            
        if project_office_ids is not None:
            
            _query_params.append(('project_office_ids', project_office_ids))
            
        if project_region_ids is not None:
            
            _query_params.append(('project_region_ids', project_region_ids))
            
        if project_owner_type_ids is not None:
            
            _query_params.append(('project_owner_type_ids', project_owner_type_ids))
            
        if program_ids is not None:
            
            _query_params.append(('program_ids', program_ids))
            
        if resource_ids is not None:
            
            _query_params.append(('resource_ids', resource_ids))
            
        if sort_key is not None:
            
            _query_params.append(('sort_key', sort_key))
            
        if sort_dir is not None:
            
            _query_params.append(('sort_dir', sort_dir))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/schedule/summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


