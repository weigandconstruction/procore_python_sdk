# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class ProjectManagementCoordinationIssuesCoordinationIssueExportApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_coordination_issues_export_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        export_format: Annotated[StrictStr, Field(description="Export File Format.")],
        filters_assignee_company_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignee vendor companies.")] = None,
        filters_assignee_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignees.")] = None,
        filters_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching ids.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching locations.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Filter item(s) with the matching search query. The search is performed on title and issue number.")] = None,
        filters_coordination_issue_file_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with the exact coordination issue file.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching status.")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific updated at iso8601 datetime range.")] = None,
        filters_issue_type: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching issue_type.")] = None,
        filters_priority: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching priority.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching trades.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Export View.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Download Coordination Issues

        Downloads coordination issues to a file specified by the export format. The items to be exported can be scoped by using filters. BCF export will only export the issues with a snapshot and valid camera data.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param export_format: Export File Format. (required)
        :type export_format: str
        :param filters_assignee_company_id: Filter item(s) with matching assignee vendor companies.
        :type filters_assignee_company_id: List[int]
        :param filters_assignee_id: Filter item(s) with matching assignees.
        :type filters_assignee_id: List[int]
        :param filters_ids: Filter item(s) with matching ids.
        :type filters_ids: List[int]
        :param filters_location_id: Filter item(s) with matching locations.
        :type filters_location_id: List[int]
        :param filters_search: Filter item(s) with the matching search query. The search is performed on title and issue number.
        :type filters_search: str
        :param filters_coordination_issue_file_id: Filter item(s) with the exact coordination issue file.
        :type filters_coordination_issue_file_id: List[int]
        :param filters_status: Filter item(s) with matching status.
        :type filters_status: List[str]
        :param filters_updated_at: Filter item(s) within a specific updated at iso8601 datetime range.
        :type filters_updated_at: str
        :param filters_issue_type: Filter item(s) with matching issue_type.
        :type filters_issue_type: List[str]
        :param filters_priority: Filter item(s) with matching priority.
        :type filters_priority: List[str]
        :param filters_trade_id: Filter item(s) with matching trades.
        :type filters_trade_id: List[int]
        :param view: Export View.
        :type view: str
        :param sort: Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_export_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            export_format=export_format,
            filters_assignee_company_id=filters_assignee_company_id,
            filters_assignee_id=filters_assignee_id,
            filters_ids=filters_ids,
            filters_location_id=filters_location_id,
            filters_search=filters_search,
            filters_coordination_issue_file_id=filters_coordination_issue_file_id,
            filters_status=filters_status,
            filters_updated_at=filters_updated_at,
            filters_issue_type=filters_issue_type,
            filters_priority=filters_priority,
            filters_trade_id=filters_trade_id,
            view=view,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '202': None,
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_coordination_issues_export_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        export_format: Annotated[StrictStr, Field(description="Export File Format.")],
        filters_assignee_company_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignee vendor companies.")] = None,
        filters_assignee_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignees.")] = None,
        filters_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching ids.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching locations.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Filter item(s) with the matching search query. The search is performed on title and issue number.")] = None,
        filters_coordination_issue_file_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with the exact coordination issue file.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching status.")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific updated at iso8601 datetime range.")] = None,
        filters_issue_type: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching issue_type.")] = None,
        filters_priority: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching priority.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching trades.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Export View.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Download Coordination Issues

        Downloads coordination issues to a file specified by the export format. The items to be exported can be scoped by using filters. BCF export will only export the issues with a snapshot and valid camera data.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param export_format: Export File Format. (required)
        :type export_format: str
        :param filters_assignee_company_id: Filter item(s) with matching assignee vendor companies.
        :type filters_assignee_company_id: List[int]
        :param filters_assignee_id: Filter item(s) with matching assignees.
        :type filters_assignee_id: List[int]
        :param filters_ids: Filter item(s) with matching ids.
        :type filters_ids: List[int]
        :param filters_location_id: Filter item(s) with matching locations.
        :type filters_location_id: List[int]
        :param filters_search: Filter item(s) with the matching search query. The search is performed on title and issue number.
        :type filters_search: str
        :param filters_coordination_issue_file_id: Filter item(s) with the exact coordination issue file.
        :type filters_coordination_issue_file_id: List[int]
        :param filters_status: Filter item(s) with matching status.
        :type filters_status: List[str]
        :param filters_updated_at: Filter item(s) within a specific updated at iso8601 datetime range.
        :type filters_updated_at: str
        :param filters_issue_type: Filter item(s) with matching issue_type.
        :type filters_issue_type: List[str]
        :param filters_priority: Filter item(s) with matching priority.
        :type filters_priority: List[str]
        :param filters_trade_id: Filter item(s) with matching trades.
        :type filters_trade_id: List[int]
        :param view: Export View.
        :type view: str
        :param sort: Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_export_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            export_format=export_format,
            filters_assignee_company_id=filters_assignee_company_id,
            filters_assignee_id=filters_assignee_id,
            filters_ids=filters_ids,
            filters_location_id=filters_location_id,
            filters_search=filters_search,
            filters_coordination_issue_file_id=filters_coordination_issue_file_id,
            filters_status=filters_status,
            filters_updated_at=filters_updated_at,
            filters_issue_type=filters_issue_type,
            filters_priority=filters_priority,
            filters_trade_id=filters_trade_id,
            view=view,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '202': None,
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_coordination_issues_export_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        export_format: Annotated[StrictStr, Field(description="Export File Format.")],
        filters_assignee_company_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignee vendor companies.")] = None,
        filters_assignee_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignees.")] = None,
        filters_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching ids.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching locations.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Filter item(s) with the matching search query. The search is performed on title and issue number.")] = None,
        filters_coordination_issue_file_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with the exact coordination issue file.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching status.")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific updated at iso8601 datetime range.")] = None,
        filters_issue_type: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching issue_type.")] = None,
        filters_priority: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching priority.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching trades.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Export View.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download Coordination Issues

        Downloads coordination issues to a file specified by the export format. The items to be exported can be scoped by using filters. BCF export will only export the issues with a snapshot and valid camera data.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param export_format: Export File Format. (required)
        :type export_format: str
        :param filters_assignee_company_id: Filter item(s) with matching assignee vendor companies.
        :type filters_assignee_company_id: List[int]
        :param filters_assignee_id: Filter item(s) with matching assignees.
        :type filters_assignee_id: List[int]
        :param filters_ids: Filter item(s) with matching ids.
        :type filters_ids: List[int]
        :param filters_location_id: Filter item(s) with matching locations.
        :type filters_location_id: List[int]
        :param filters_search: Filter item(s) with the matching search query. The search is performed on title and issue number.
        :type filters_search: str
        :param filters_coordination_issue_file_id: Filter item(s) with the exact coordination issue file.
        :type filters_coordination_issue_file_id: List[int]
        :param filters_status: Filter item(s) with matching status.
        :type filters_status: List[str]
        :param filters_updated_at: Filter item(s) within a specific updated at iso8601 datetime range.
        :type filters_updated_at: str
        :param filters_issue_type: Filter item(s) with matching issue_type.
        :type filters_issue_type: List[str]
        :param filters_priority: Filter item(s) with matching priority.
        :type filters_priority: List[str]
        :param filters_trade_id: Filter item(s) with matching trades.
        :type filters_trade_id: List[int]
        :param view: Export View.
        :type view: str
        :param sort: Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_export_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            export_format=export_format,
            filters_assignee_company_id=filters_assignee_company_id,
            filters_assignee_id=filters_assignee_id,
            filters_ids=filters_ids,
            filters_location_id=filters_location_id,
            filters_search=filters_search,
            filters_coordination_issue_file_id=filters_coordination_issue_file_id,
            filters_status=filters_status,
            filters_updated_at=filters_updated_at,
            filters_issue_type=filters_issue_type,
            filters_priority=filters_priority,
            filters_trade_id=filters_trade_id,
            view=view,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '202': None,
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_coordination_issues_export_get_serialize(
        self,
        procore_company_id,
        project_id,
        export_format,
        filters_assignee_company_id,
        filters_assignee_id,
        filters_ids,
        filters_location_id,
        filters_search,
        filters_coordination_issue_file_id,
        filters_status,
        filters_updated_at,
        filters_issue_type,
        filters_priority,
        filters_trade_id,
        view,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[assignee_company_id][]': 'multi',
            'filters[assignee_id][]': 'multi',
            'filters[ids][]': 'multi',
            'filters[location_id][]': 'multi',
            'filters[coordination_issue_file_id][]': 'multi',
            'filters[status][]': 'multi',
            'filters[issue_type][]': 'multi',
            'filters[priority][]': 'multi',
            'filters[trade_id][]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if filters_assignee_company_id is not None:
            
            _query_params.append(('filters[assignee_company_id][]', filters_assignee_company_id))
            
        if filters_assignee_id is not None:
            
            _query_params.append(('filters[assignee_id][]', filters_assignee_id))
            
        if filters_ids is not None:
            
            _query_params.append(('filters[ids][]', filters_ids))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id][]', filters_location_id))
            
        if filters_search is not None:
            
            _query_params.append(('filters[search]', filters_search))
            
        if filters_coordination_issue_file_id is not None:
            
            _query_params.append(('filters[coordination_issue_file_id][]', filters_coordination_issue_file_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status][]', filters_status))
            
        if filters_updated_at is not None:
            
            _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_issue_type is not None:
            
            _query_params.append(('filters[issue_type][]', filters_issue_type))
            
        if filters_priority is not None:
            
            _query_params.append(('filters[priority][]', filters_priority))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id][]', filters_trade_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if export_format is not None:
            
            _query_params.append(('export_format', export_format))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/coordination_issues/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


