# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_count_get200_response_inner import RestV10ProjectsProjectIdDailyLogsCountGet200ResponseInner

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class ProjectManagementDailyLogDailyLogsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_projects_project_id_daily_logs_count_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        log_date: Annotated[Optional[date], Field(description="Date of specific logs desired in YYYY-MM-DD format")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of specific logs desired in YYYY-MM-DD format (use together with start_date)")] = None,
        filters_status: Annotated[Optional[StrictStr], Field(description="Filter on status for \"pending\" or \"approved\" or \"all\"")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdDailyLogsCountGet200ResponseInner]:
        """(Deprecated) List Counts of Daily Logs

        Returns counts of all daily logs arranged by type, given the current user permissions. Read Only/Standard users will see only counts of approved logs, Collaborator users will see only counts of logs created by themselves, Admins can use filter options to see all logs, or only a specific approval status (defaulting to approved).  See [Working with Daily Logs](https://developers.procore.com/documentation/daily-logs) for information on filtering the response using the log\\_date, start\\_date, and end\\_date parameters. Note that if none of the date parameters are provided in the call, only logs from the current date are returned.  This is a deprecated endpoint, please use [/rest/v1.1/projects/{project_id}/daily_logs/counts](daily_logs#counts)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param log_date: Date of specific logs desired in YYYY-MM-DD format
        :type log_date: date
        :param start_date: Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)
        :type start_date: date
        :param end_date: End date of specific logs desired in YYYY-MM-DD format (use together with start_date)
        :type end_date: date
        :param filters_status: Filter on status for \"pending\" or \"approved\" or \"all\"
        :type filters_status: str
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/projects/{project_id}/daily_logs/count is deprecated.", DeprecationWarning)

        _param = self._rest_v10_projects_project_id_daily_logs_count_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            log_date=log_date,
            start_date=start_date,
            end_date=end_date,
            filters_status=filters_status,
            filters_created_by_id=filters_created_by_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdDailyLogsCountGet200ResponseInner]",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_daily_logs_count_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        log_date: Annotated[Optional[date], Field(description="Date of specific logs desired in YYYY-MM-DD format")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of specific logs desired in YYYY-MM-DD format (use together with start_date)")] = None,
        filters_status: Annotated[Optional[StrictStr], Field(description="Filter on status for \"pending\" or \"approved\" or \"all\"")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdDailyLogsCountGet200ResponseInner]]:
        """(Deprecated) List Counts of Daily Logs

        Returns counts of all daily logs arranged by type, given the current user permissions. Read Only/Standard users will see only counts of approved logs, Collaborator users will see only counts of logs created by themselves, Admins can use filter options to see all logs, or only a specific approval status (defaulting to approved).  See [Working with Daily Logs](https://developers.procore.com/documentation/daily-logs) for information on filtering the response using the log\\_date, start\\_date, and end\\_date parameters. Note that if none of the date parameters are provided in the call, only logs from the current date are returned.  This is a deprecated endpoint, please use [/rest/v1.1/projects/{project_id}/daily_logs/counts](daily_logs#counts)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param log_date: Date of specific logs desired in YYYY-MM-DD format
        :type log_date: date
        :param start_date: Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)
        :type start_date: date
        :param end_date: End date of specific logs desired in YYYY-MM-DD format (use together with start_date)
        :type end_date: date
        :param filters_status: Filter on status for \"pending\" or \"approved\" or \"all\"
        :type filters_status: str
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/projects/{project_id}/daily_logs/count is deprecated.", DeprecationWarning)

        _param = self._rest_v10_projects_project_id_daily_logs_count_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            log_date=log_date,
            start_date=start_date,
            end_date=end_date,
            filters_status=filters_status,
            filters_created_by_id=filters_created_by_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdDailyLogsCountGet200ResponseInner]",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_daily_logs_count_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        log_date: Annotated[Optional[date], Field(description="Date of specific logs desired in YYYY-MM-DD format")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of specific logs desired in YYYY-MM-DD format (use together with start_date)")] = None,
        filters_status: Annotated[Optional[StrictStr], Field(description="Filter on status for \"pending\" or \"approved\" or \"all\"")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Returns item(s) created by the specified User IDs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) List Counts of Daily Logs

        Returns counts of all daily logs arranged by type, given the current user permissions. Read Only/Standard users will see only counts of approved logs, Collaborator users will see only counts of logs created by themselves, Admins can use filter options to see all logs, or only a specific approval status (defaulting to approved).  See [Working with Daily Logs](https://developers.procore.com/documentation/daily-logs) for information on filtering the response using the log\\_date, start\\_date, and end\\_date parameters. Note that if none of the date parameters are provided in the call, only logs from the current date are returned.  This is a deprecated endpoint, please use [/rest/v1.1/projects/{project_id}/daily_logs/counts](daily_logs#counts)

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param log_date: Date of specific logs desired in YYYY-MM-DD format
        :type log_date: date
        :param start_date: Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)
        :type start_date: date
        :param end_date: End date of specific logs desired in YYYY-MM-DD format (use together with start_date)
        :type end_date: date
        :param filters_status: Filter on status for \"pending\" or \"approved\" or \"all\"
        :type filters_status: str
        :param filters_created_by_id: Returns item(s) created by the specified User IDs.
        :type filters_created_by_id: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/projects/{project_id}/daily_logs/count is deprecated.", DeprecationWarning)

        _param = self._rest_v10_projects_project_id_daily_logs_count_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            log_date=log_date,
            start_date=start_date,
            end_date=end_date,
            filters_status=filters_status,
            filters_created_by_id=filters_created_by_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdDailyLogsCountGet200ResponseInner]",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_daily_logs_count_get_serialize(
        self,
        procore_company_id,
        project_id,
        log_date,
        start_date,
        end_date,
        filters_status,
        filters_created_by_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[created_by_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if log_date is not None:
            if isinstance(log_date, date):
                _query_params.append(
                    (
                        'log_date',
                        log_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('log_date', log_date))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_created_by_id is not None:
            
            _query_params.append(('filters[created_by_id]', filters_created_by_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/daily_logs/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


