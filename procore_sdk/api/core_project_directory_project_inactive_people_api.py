# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_projects_project_id_people_get200_response_inner import RestV10ProjectsProjectIdPeopleGet200ResponseInner

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class CoreProjectDirectoryProjectInactivePeopleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_projects_project_id_people_inactive_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="ID of the project")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_is_employee: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) where `is_employee` value is true.")] = None,
        filters_reference_users_only: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are reference users.")] = None,
        filters_without_reference_users: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are not reference users.")] = None,
        filters_include_company_people: Annotated[Optional[StrictBool], Field(description="If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Returns item(s) matching the specified search query string.")] = None,
        filters_connected: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are connected users. If false, returns only people who are not connected users.")] = None,
        filters_vendor_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Vendor IDs.")] = None,
        filters_job_title: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified job title.")] = None,
        filters_country_code: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified country code.")] = None,
        filters_state_code: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified state code.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Trade IDs. Returns item(s) with the specified Trade IDs.")] = None,
        filters_permission_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return items with the specified sort")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdPeopleGet200ResponseInner]:
        """List Inactive Project People

        Return a list of People associated with a Project. Includes users in the directory and reference users.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: ID of the project (required)
        :type project_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_is_employee: If true, returns item(s) where `is_employee` value is true.
        :type filters_is_employee: bool
        :param filters_reference_users_only: If true, returns only people who are reference users.
        :type filters_reference_users_only: bool
        :param filters_without_reference_users: If true, returns only people who are not reference users.
        :type filters_without_reference_users: bool
        :param filters_include_company_people: If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.
        :type filters_include_company_people: bool
        :param filters_search: Returns item(s) matching the specified search query string.
        :type filters_search: str
        :param filters_connected: If true, returns only people who are connected users. If false, returns only people who are not connected users.
        :type filters_connected: bool
        :param filters_vendor_id: Return item(s) with the specified Vendor IDs.
        :type filters_vendor_id: List[int]
        :param filters_job_title: Returns only people who have the specified job title.
        :type filters_job_title: str
        :param filters_country_code: Returns only people who have the specified country code.
        :type filters_country_code: str
        :param filters_state_code: Returns only people who have the specified state code.
        :type filters_state_code: str
        :param filters_trade_id: Array of Trade IDs. Returns item(s) with the specified Trade IDs.
        :type filters_trade_id: List[int]
        :param filters_permission_template_id: Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.
        :type filters_permission_template_id: List[int]
        :param sort: Return items with the specified sort
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_people_inactive_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            view=view,
            page=page,
            per_page=per_page,
            filters_is_employee=filters_is_employee,
            filters_reference_users_only=filters_reference_users_only,
            filters_without_reference_users=filters_without_reference_users,
            filters_include_company_people=filters_include_company_people,
            filters_search=filters_search,
            filters_connected=filters_connected,
            filters_vendor_id=filters_vendor_id,
            filters_job_title=filters_job_title,
            filters_country_code=filters_country_code,
            filters_state_code=filters_state_code,
            filters_trade_id=filters_trade_id,
            filters_permission_template_id=filters_permission_template_id,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdPeopleGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_people_inactive_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="ID of the project")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_is_employee: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) where `is_employee` value is true.")] = None,
        filters_reference_users_only: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are reference users.")] = None,
        filters_without_reference_users: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are not reference users.")] = None,
        filters_include_company_people: Annotated[Optional[StrictBool], Field(description="If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Returns item(s) matching the specified search query string.")] = None,
        filters_connected: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are connected users. If false, returns only people who are not connected users.")] = None,
        filters_vendor_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Vendor IDs.")] = None,
        filters_job_title: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified job title.")] = None,
        filters_country_code: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified country code.")] = None,
        filters_state_code: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified state code.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Trade IDs. Returns item(s) with the specified Trade IDs.")] = None,
        filters_permission_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return items with the specified sort")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdPeopleGet200ResponseInner]]:
        """List Inactive Project People

        Return a list of People associated with a Project. Includes users in the directory and reference users.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: ID of the project (required)
        :type project_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_is_employee: If true, returns item(s) where `is_employee` value is true.
        :type filters_is_employee: bool
        :param filters_reference_users_only: If true, returns only people who are reference users.
        :type filters_reference_users_only: bool
        :param filters_without_reference_users: If true, returns only people who are not reference users.
        :type filters_without_reference_users: bool
        :param filters_include_company_people: If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.
        :type filters_include_company_people: bool
        :param filters_search: Returns item(s) matching the specified search query string.
        :type filters_search: str
        :param filters_connected: If true, returns only people who are connected users. If false, returns only people who are not connected users.
        :type filters_connected: bool
        :param filters_vendor_id: Return item(s) with the specified Vendor IDs.
        :type filters_vendor_id: List[int]
        :param filters_job_title: Returns only people who have the specified job title.
        :type filters_job_title: str
        :param filters_country_code: Returns only people who have the specified country code.
        :type filters_country_code: str
        :param filters_state_code: Returns only people who have the specified state code.
        :type filters_state_code: str
        :param filters_trade_id: Array of Trade IDs. Returns item(s) with the specified Trade IDs.
        :type filters_trade_id: List[int]
        :param filters_permission_template_id: Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.
        :type filters_permission_template_id: List[int]
        :param sort: Return items with the specified sort
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_people_inactive_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            view=view,
            page=page,
            per_page=per_page,
            filters_is_employee=filters_is_employee,
            filters_reference_users_only=filters_reference_users_only,
            filters_without_reference_users=filters_without_reference_users,
            filters_include_company_people=filters_include_company_people,
            filters_search=filters_search,
            filters_connected=filters_connected,
            filters_vendor_id=filters_vendor_id,
            filters_job_title=filters_job_title,
            filters_country_code=filters_country_code,
            filters_state_code=filters_state_code,
            filters_trade_id=filters_trade_id,
            filters_permission_template_id=filters_permission_template_id,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdPeopleGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_people_inactive_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="ID of the project")],
        view: Annotated[Optional[StrictStr], Field(description="Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_is_employee: Annotated[Optional[StrictBool], Field(description="If true, returns item(s) where `is_employee` value is true.")] = None,
        filters_reference_users_only: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are reference users.")] = None,
        filters_without_reference_users: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are not reference users.")] = None,
        filters_include_company_people: Annotated[Optional[StrictBool], Field(description="If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Returns item(s) matching the specified search query string.")] = None,
        filters_connected: Annotated[Optional[StrictBool], Field(description="If true, returns only people who are connected users. If false, returns only people who are not connected users.")] = None,
        filters_vendor_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) with the specified Vendor IDs.")] = None,
        filters_job_title: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified job title.")] = None,
        filters_country_code: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified country code.")] = None,
        filters_state_code: Annotated[Optional[StrictStr], Field(description="Returns only people who have the specified state code.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Trade IDs. Returns item(s) with the specified Trade IDs.")] = None,
        filters_permission_template_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return items with the specified sort")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Inactive Project People

        Return a list of People associated with a Project. Includes users in the directory and reference users.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: ID of the project (required)
        :type project_id: int
        :param view: Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.
        :type view: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_is_employee: If true, returns item(s) where `is_employee` value is true.
        :type filters_is_employee: bool
        :param filters_reference_users_only: If true, returns only people who are reference users.
        :type filters_reference_users_only: bool
        :param filters_without_reference_users: If true, returns only people who are not reference users.
        :type filters_without_reference_users: bool
        :param filters_include_company_people: If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.
        :type filters_include_company_people: bool
        :param filters_search: Returns item(s) matching the specified search query string.
        :type filters_search: str
        :param filters_connected: If true, returns only people who are connected users. If false, returns only people who are not connected users.
        :type filters_connected: bool
        :param filters_vendor_id: Return item(s) with the specified Vendor IDs.
        :type filters_vendor_id: List[int]
        :param filters_job_title: Returns only people who have the specified job title.
        :type filters_job_title: str
        :param filters_country_code: Returns only people who have the specified country code.
        :type filters_country_code: str
        :param filters_state_code: Returns only people who have the specified state code.
        :type filters_state_code: str
        :param filters_trade_id: Array of Trade IDs. Returns item(s) with the specified Trade IDs.
        :type filters_trade_id: List[int]
        :param filters_permission_template_id: Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.
        :type filters_permission_template_id: List[int]
        :param sort: Return items with the specified sort
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_people_inactive_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            view=view,
            page=page,
            per_page=per_page,
            filters_is_employee=filters_is_employee,
            filters_reference_users_only=filters_reference_users_only,
            filters_without_reference_users=filters_without_reference_users,
            filters_include_company_people=filters_include_company_people,
            filters_search=filters_search,
            filters_connected=filters_connected,
            filters_vendor_id=filters_vendor_id,
            filters_job_title=filters_job_title,
            filters_country_code=filters_country_code,
            filters_state_code=filters_state_code,
            filters_trade_id=filters_trade_id,
            filters_permission_template_id=filters_permission_template_id,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdPeopleGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_people_inactive_get_serialize(
        self,
        procore_company_id,
        project_id,
        view,
        page,
        per_page,
        filters_is_employee,
        filters_reference_users_only,
        filters_without_reference_users,
        filters_include_company_people,
        filters_search,
        filters_connected,
        filters_vendor_id,
        filters_job_title,
        filters_country_code,
        filters_state_code,
        filters_trade_id,
        filters_permission_template_id,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[vendor_id]': 'csv',
            'filters[trade_id]': 'csv',
            'filters[permission_template_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_is_employee is not None:
            
            _query_params.append(('filters[is_employee]', filters_is_employee))
            
        if filters_reference_users_only is not None:
            
            _query_params.append(('filters[reference_users_only]', filters_reference_users_only))
            
        if filters_without_reference_users is not None:
            
            _query_params.append(('filters[without_reference_users]', filters_without_reference_users))
            
        if filters_include_company_people is not None:
            
            _query_params.append(('filters[include_company_people]', filters_include_company_people))
            
        if filters_search is not None:
            
            _query_params.append(('filters[search]', filters_search))
            
        if filters_connected is not None:
            
            _query_params.append(('filters[connected]', filters_connected))
            
        if filters_vendor_id is not None:
            
            _query_params.append(('filters[vendor_id]', filters_vendor_id))
            
        if filters_job_title is not None:
            
            _query_params.append(('filters[job_title]', filters_job_title))
            
        if filters_country_code is not None:
            
            _query_params.append(('filters[country_code]', filters_country_code))
            
        if filters_state_code is not None:
            
            _query_params.append(('filters[state_code]', filters_state_code))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id]', filters_trade_id))
            
        if filters_permission_template_id is not None:
            
            _query_params.append(('filters[permission_template_id]', filters_permission_template_id))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/people/inactive',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


