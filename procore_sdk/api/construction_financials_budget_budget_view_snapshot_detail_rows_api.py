# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get200_response_inner import RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class ConstructionFinancialsBudgetBudgetViewSnapshotDetailRowsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        budget_view_snapshot_id: Annotated[StrictInt, Field(description="Budget View Snapshot ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        biller: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific biller. Format is biller[]=id=1,type=SubJob or biller[]=id=1,type=Project")] = None,
        cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific Cost Code id or range of Cost Code IDs")] = None,
        cost_code_name: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific Cost Code name or range of Cost Code names")] = None,
        root_cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific Root Cost Code id or range of Root Cost Code IDs")] = None,
        root_cost_code_name: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific Root Cost Code name or range of Root Cost Code names")] = None,
        category_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific category id (line item type id) or range of category IDs")] = None,
        budget_line_item_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific budget line item id or range of budget line item IDs")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return item(s) with the specified sort. Default is biller_type,biller,root_cost_code,cost_code,category_id ")] = None,
        budget_row_type: Annotated[Optional[StrictStr], Field(description="Return budgeted, unbudgeted or all item(s) from all budget rows for a project. Default is all. Note that when the unbudgeted or all values are supplied, the id field will be null for rows that have budgeted false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner]:
        """List Budget View Snapshot Detail Rows

        Return a list of all Budget View Snapshot Detail Rows for a project and budget view snapshot.  Note: In addition to all the fields outlined in the response, there will be an additional key for each visible source and formula column created for the particular budget view. As well, when using a Forecasting View ID, additional keys will be visible that give calculated forecasts for each month, as defined by the Advanced Forecasting Tool.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param budget_view_snapshot_id: Budget View Snapshot ID (required)
        :type budget_view_snapshot_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param biller: Return item(s) within a specific biller. Format is biller[]=id=1,type=SubJob or biller[]=id=1,type=Project
        :type biller: List[str]
        :param cost_code_id: Return item(s) within a specific Cost Code id or range of Cost Code IDs
        :type cost_code_id: List[int]
        :param cost_code_name: Return item(s) within a specific Cost Code name or range of Cost Code names
        :type cost_code_name: List[str]
        :param root_cost_code_id: Return item(s) within a specific Root Cost Code id or range of Root Cost Code IDs
        :type root_cost_code_id: List[int]
        :param root_cost_code_name: Return item(s) within a specific Root Cost Code name or range of Root Cost Code names
        :type root_cost_code_name: List[str]
        :param category_id: Return item(s) within a specific category id (line item type id) or range of category IDs
        :type category_id: List[int]
        :param budget_line_item_id: Return item(s) within a specific budget line item id or range of budget line item IDs
        :type budget_line_item_id: List[int]
        :param sort: Return item(s) with the specified sort. Default is biller_type,biller,root_cost_code,cost_code,category_id 
        :type sort: str
        :param budget_row_type: Return budgeted, unbudgeted or all item(s) from all budget rows for a project. Default is all. Note that when the unbudgeted or all values are supplied, the id field will be null for rows that have budgeted false
        :type budget_row_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get_serialize(
            procore_company_id=procore_company_id,
            budget_view_snapshot_id=budget_view_snapshot_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            biller=biller,
            cost_code_id=cost_code_id,
            cost_code_name=cost_code_name,
            root_cost_code_id=root_cost_code_id,
            root_cost_code_name=root_cost_code_name,
            category_id=category_id,
            budget_line_item_id=budget_line_item_id,
            sort=sort,
            budget_row_type=budget_row_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner]",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        budget_view_snapshot_id: Annotated[StrictInt, Field(description="Budget View Snapshot ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        biller: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific biller. Format is biller[]=id=1,type=SubJob or biller[]=id=1,type=Project")] = None,
        cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific Cost Code id or range of Cost Code IDs")] = None,
        cost_code_name: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific Cost Code name or range of Cost Code names")] = None,
        root_cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific Root Cost Code id or range of Root Cost Code IDs")] = None,
        root_cost_code_name: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific Root Cost Code name or range of Root Cost Code names")] = None,
        category_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific category id (line item type id) or range of category IDs")] = None,
        budget_line_item_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific budget line item id or range of budget line item IDs")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return item(s) with the specified sort. Default is biller_type,biller,root_cost_code,cost_code,category_id ")] = None,
        budget_row_type: Annotated[Optional[StrictStr], Field(description="Return budgeted, unbudgeted or all item(s) from all budget rows for a project. Default is all. Note that when the unbudgeted or all values are supplied, the id field will be null for rows that have budgeted false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner]]:
        """List Budget View Snapshot Detail Rows

        Return a list of all Budget View Snapshot Detail Rows for a project and budget view snapshot.  Note: In addition to all the fields outlined in the response, there will be an additional key for each visible source and formula column created for the particular budget view. As well, when using a Forecasting View ID, additional keys will be visible that give calculated forecasts for each month, as defined by the Advanced Forecasting Tool.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param budget_view_snapshot_id: Budget View Snapshot ID (required)
        :type budget_view_snapshot_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param biller: Return item(s) within a specific biller. Format is biller[]=id=1,type=SubJob or biller[]=id=1,type=Project
        :type biller: List[str]
        :param cost_code_id: Return item(s) within a specific Cost Code id or range of Cost Code IDs
        :type cost_code_id: List[int]
        :param cost_code_name: Return item(s) within a specific Cost Code name or range of Cost Code names
        :type cost_code_name: List[str]
        :param root_cost_code_id: Return item(s) within a specific Root Cost Code id or range of Root Cost Code IDs
        :type root_cost_code_id: List[int]
        :param root_cost_code_name: Return item(s) within a specific Root Cost Code name or range of Root Cost Code names
        :type root_cost_code_name: List[str]
        :param category_id: Return item(s) within a specific category id (line item type id) or range of category IDs
        :type category_id: List[int]
        :param budget_line_item_id: Return item(s) within a specific budget line item id or range of budget line item IDs
        :type budget_line_item_id: List[int]
        :param sort: Return item(s) with the specified sort. Default is biller_type,biller,root_cost_code,cost_code,category_id 
        :type sort: str
        :param budget_row_type: Return budgeted, unbudgeted or all item(s) from all budget rows for a project. Default is all. Note that when the unbudgeted or all values are supplied, the id field will be null for rows that have budgeted false
        :type budget_row_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get_serialize(
            procore_company_id=procore_company_id,
            budget_view_snapshot_id=budget_view_snapshot_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            biller=biller,
            cost_code_id=cost_code_id,
            cost_code_name=cost_code_name,
            root_cost_code_id=root_cost_code_id,
            root_cost_code_name=root_cost_code_name,
            category_id=category_id,
            budget_line_item_id=budget_line_item_id,
            sort=sort,
            budget_row_type=budget_row_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner]",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        budget_view_snapshot_id: Annotated[StrictInt, Field(description="Budget View Snapshot ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        biller: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific biller. Format is biller[]=id=1,type=SubJob or biller[]=id=1,type=Project")] = None,
        cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific Cost Code id or range of Cost Code IDs")] = None,
        cost_code_name: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific Cost Code name or range of Cost Code names")] = None,
        root_cost_code_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific Root Cost Code id or range of Root Cost Code IDs")] = None,
        root_cost_code_name: Annotated[Optional[List[StrictStr]], Field(description="Return item(s) within a specific Root Cost Code name or range of Root Cost Code names")] = None,
        category_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific category id (line item type id) or range of category IDs")] = None,
        budget_line_item_id: Annotated[Optional[List[StrictInt]], Field(description="Return item(s) within a specific budget line item id or range of budget line item IDs")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return item(s) with the specified sort. Default is biller_type,biller,root_cost_code,cost_code,category_id ")] = None,
        budget_row_type: Annotated[Optional[StrictStr], Field(description="Return budgeted, unbudgeted or all item(s) from all budget rows for a project. Default is all. Note that when the unbudgeted or all values are supplied, the id field will be null for rows that have budgeted false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Budget View Snapshot Detail Rows

        Return a list of all Budget View Snapshot Detail Rows for a project and budget view snapshot.  Note: In addition to all the fields outlined in the response, there will be an additional key for each visible source and formula column created for the particular budget view. As well, when using a Forecasting View ID, additional keys will be visible that give calculated forecasts for each month, as defined by the Advanced Forecasting Tool.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param budget_view_snapshot_id: Budget View Snapshot ID (required)
        :type budget_view_snapshot_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param biller: Return item(s) within a specific biller. Format is biller[]=id=1,type=SubJob or biller[]=id=1,type=Project
        :type biller: List[str]
        :param cost_code_id: Return item(s) within a specific Cost Code id or range of Cost Code IDs
        :type cost_code_id: List[int]
        :param cost_code_name: Return item(s) within a specific Cost Code name or range of Cost Code names
        :type cost_code_name: List[str]
        :param root_cost_code_id: Return item(s) within a specific Root Cost Code id or range of Root Cost Code IDs
        :type root_cost_code_id: List[int]
        :param root_cost_code_name: Return item(s) within a specific Root Cost Code name or range of Root Cost Code names
        :type root_cost_code_name: List[str]
        :param category_id: Return item(s) within a specific category id (line item type id) or range of category IDs
        :type category_id: List[int]
        :param budget_line_item_id: Return item(s) within a specific budget line item id or range of budget line item IDs
        :type budget_line_item_id: List[int]
        :param sort: Return item(s) with the specified sort. Default is biller_type,biller,root_cost_code,cost_code,category_id 
        :type sort: str
        :param budget_row_type: Return budgeted, unbudgeted or all item(s) from all budget rows for a project. Default is all. Note that when the unbudgeted or all values are supplied, the id field will be null for rows that have budgeted false
        :type budget_row_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get_serialize(
            procore_company_id=procore_company_id,
            budget_view_snapshot_id=budget_view_snapshot_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            biller=biller,
            cost_code_id=cost_code_id,
            cost_code_name=cost_code_name,
            root_cost_code_id=root_cost_code_id,
            root_cost_code_name=root_cost_code_name,
            category_id=category_id,
            budget_line_item_id=budget_line_item_id,
            sort=sort,
            budget_row_type=budget_row_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner]",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get_serialize(
        self,
        procore_company_id,
        budget_view_snapshot_id,
        project_id,
        page,
        per_page,
        biller,
        cost_code_id,
        cost_code_name,
        root_cost_code_id,
        root_cost_code_name,
        category_id,
        budget_line_item_id,
        sort,
        budget_row_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'biller[]': 'csv',
            'cost_code_id[]': 'csv',
            'cost_code_name[]': 'csv',
            'root_cost_code_id[]': 'csv',
            'root_cost_code_name[]': 'csv',
            'category_id[]': 'csv',
            'budget_line_item_id[]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if budget_view_snapshot_id is not None:
            _path_params['budget_view_snapshot_id'] = budget_view_snapshot_id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if biller is not None:
            
            _query_params.append(('biller[]', biller))
            
        if cost_code_id is not None:
            
            _query_params.append(('cost_code_id[]', cost_code_id))
            
        if cost_code_name is not None:
            
            _query_params.append(('cost_code_name[]', cost_code_name))
            
        if root_cost_code_id is not None:
            
            _query_params.append(('root_cost_code_id[]', root_cost_code_id))
            
        if root_cost_code_name is not None:
            
            _query_params.append(('root_cost_code_name[]', root_cost_code_name))
            
        if category_id is not None:
            
            _query_params.append(('category_id[]', category_id))
            
        if budget_line_item_id is not None:
            
            _query_params.append(('budget_line_item_id[]', budget_line_item_id))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if budget_row_type is not None:
            
            _query_params.append(('budget_row_type', budget_row_type))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/budget_view_snapshots/{budget_view_snapshot_id}/detail_rows',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


