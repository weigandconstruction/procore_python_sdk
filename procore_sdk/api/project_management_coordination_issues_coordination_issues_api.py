# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.body104 import Body104
from procore_sdk.models.body105 import Body105
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner import RestV10CoordinationIssuesGet200ResponseInner

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class ProjectManagementCoordinationIssuesCoordinationIssuesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_coordination_issues_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_assignee_company_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignee vendor companies.")] = None,
        filters_assignee_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignees.")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching User IDs.")] = None,
        filters_created_from: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching creation source.")] = None,
        filters_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching ids.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching locations.")] = None,
        filters_include_sublocations: Annotated[Optional[StrictBool], Field(description="Use together with `filters[location_id]` ")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Filter item(s) with the matching search query. The search is performed on title and issue number.")] = None,
        filters_coordination_issue_file_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with the exact coordination issue file.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching status.")] = None,
        filters_issue_type: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching issue_type.")] = None,
        filters_priority: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching priority.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching trades.")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific updated at iso8601 datetime range.")] = None,
        filters_due_date: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific due date iso8601 date range.")] = None,
        filters_created_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific created at iso8601 datetime range.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'")] = None,
        view: Annotated[Optional[StrictStr], Field(description="The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.")] = None,
        viewpoint_format: Annotated[Optional[StrictStr], Field(description="Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.")] = None,
        save_sticky_filters: Annotated[Optional[StrictBool], Field(description="Persists filter parameters for the requesting user and project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10CoordinationIssuesGet200ResponseInner]:
        """List Coordination Issues

        Lists Coordination Issues associated with the specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_assignee_company_id: Filter item(s) with matching assignee vendor companies.
        :type filters_assignee_company_id: List[int]
        :param filters_assignee_id: Filter item(s) with matching assignees.
        :type filters_assignee_id: List[int]
        :param filters_created_by_id: Filter item(s) with matching User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_from: Filter item(s) with matching creation source.
        :type filters_created_from: List[str]
        :param filters_ids: Filter item(s) with matching ids.
        :type filters_ids: List[int]
        :param filters_location_id: Filter item(s) with matching locations.
        :type filters_location_id: List[int]
        :param filters_include_sublocations: Use together with `filters[location_id]` 
        :type filters_include_sublocations: bool
        :param filters_search: Filter item(s) with the matching search query. The search is performed on title and issue number.
        :type filters_search: str
        :param filters_coordination_issue_file_id: Filter item(s) with the exact coordination issue file.
        :type filters_coordination_issue_file_id: List[int]
        :param filters_status: Filter item(s) with matching status.
        :type filters_status: List[str]
        :param filters_issue_type: Filter item(s) with matching issue_type.
        :type filters_issue_type: List[str]
        :param filters_priority: Filter item(s) with matching priority.
        :type filters_priority: List[str]
        :param filters_trade_id: Filter item(s) with matching trades.
        :type filters_trade_id: List[int]
        :param filters_updated_at: Filter item(s) within a specific updated at iso8601 datetime range.
        :type filters_updated_at: str
        :param filters_due_date: Filter item(s) within a specific due date iso8601 date range.
        :type filters_due_date: str
        :param filters_created_at: Filter item(s) within a specific created at iso8601 datetime range.
        :type filters_created_at: str
        :param sort: Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
        :type sort: str
        :param view: The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.
        :type view: str
        :param viewpoint_format: Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.
        :type viewpoint_format: str
        :param save_sticky_filters: Persists filter parameters for the requesting user and project.
        :type save_sticky_filters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_assignee_company_id=filters_assignee_company_id,
            filters_assignee_id=filters_assignee_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_from=filters_created_from,
            filters_ids=filters_ids,
            filters_location_id=filters_location_id,
            filters_include_sublocations=filters_include_sublocations,
            filters_search=filters_search,
            filters_coordination_issue_file_id=filters_coordination_issue_file_id,
            filters_status=filters_status,
            filters_issue_type=filters_issue_type,
            filters_priority=filters_priority,
            filters_trade_id=filters_trade_id,
            filters_updated_at=filters_updated_at,
            filters_due_date=filters_due_date,
            filters_created_at=filters_created_at,
            sort=sort,
            view=view,
            viewpoint_format=viewpoint_format,
            save_sticky_filters=save_sticky_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CoordinationIssuesGet200ResponseInner]",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_coordination_issues_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_assignee_company_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignee vendor companies.")] = None,
        filters_assignee_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignees.")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching User IDs.")] = None,
        filters_created_from: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching creation source.")] = None,
        filters_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching ids.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching locations.")] = None,
        filters_include_sublocations: Annotated[Optional[StrictBool], Field(description="Use together with `filters[location_id]` ")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Filter item(s) with the matching search query. The search is performed on title and issue number.")] = None,
        filters_coordination_issue_file_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with the exact coordination issue file.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching status.")] = None,
        filters_issue_type: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching issue_type.")] = None,
        filters_priority: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching priority.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching trades.")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific updated at iso8601 datetime range.")] = None,
        filters_due_date: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific due date iso8601 date range.")] = None,
        filters_created_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific created at iso8601 datetime range.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'")] = None,
        view: Annotated[Optional[StrictStr], Field(description="The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.")] = None,
        viewpoint_format: Annotated[Optional[StrictStr], Field(description="Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.")] = None,
        save_sticky_filters: Annotated[Optional[StrictBool], Field(description="Persists filter parameters for the requesting user and project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10CoordinationIssuesGet200ResponseInner]]:
        """List Coordination Issues

        Lists Coordination Issues associated with the specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_assignee_company_id: Filter item(s) with matching assignee vendor companies.
        :type filters_assignee_company_id: List[int]
        :param filters_assignee_id: Filter item(s) with matching assignees.
        :type filters_assignee_id: List[int]
        :param filters_created_by_id: Filter item(s) with matching User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_from: Filter item(s) with matching creation source.
        :type filters_created_from: List[str]
        :param filters_ids: Filter item(s) with matching ids.
        :type filters_ids: List[int]
        :param filters_location_id: Filter item(s) with matching locations.
        :type filters_location_id: List[int]
        :param filters_include_sublocations: Use together with `filters[location_id]` 
        :type filters_include_sublocations: bool
        :param filters_search: Filter item(s) with the matching search query. The search is performed on title and issue number.
        :type filters_search: str
        :param filters_coordination_issue_file_id: Filter item(s) with the exact coordination issue file.
        :type filters_coordination_issue_file_id: List[int]
        :param filters_status: Filter item(s) with matching status.
        :type filters_status: List[str]
        :param filters_issue_type: Filter item(s) with matching issue_type.
        :type filters_issue_type: List[str]
        :param filters_priority: Filter item(s) with matching priority.
        :type filters_priority: List[str]
        :param filters_trade_id: Filter item(s) with matching trades.
        :type filters_trade_id: List[int]
        :param filters_updated_at: Filter item(s) within a specific updated at iso8601 datetime range.
        :type filters_updated_at: str
        :param filters_due_date: Filter item(s) within a specific due date iso8601 date range.
        :type filters_due_date: str
        :param filters_created_at: Filter item(s) within a specific created at iso8601 datetime range.
        :type filters_created_at: str
        :param sort: Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
        :type sort: str
        :param view: The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.
        :type view: str
        :param viewpoint_format: Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.
        :type viewpoint_format: str
        :param save_sticky_filters: Persists filter parameters for the requesting user and project.
        :type save_sticky_filters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_assignee_company_id=filters_assignee_company_id,
            filters_assignee_id=filters_assignee_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_from=filters_created_from,
            filters_ids=filters_ids,
            filters_location_id=filters_location_id,
            filters_include_sublocations=filters_include_sublocations,
            filters_search=filters_search,
            filters_coordination_issue_file_id=filters_coordination_issue_file_id,
            filters_status=filters_status,
            filters_issue_type=filters_issue_type,
            filters_priority=filters_priority,
            filters_trade_id=filters_trade_id,
            filters_updated_at=filters_updated_at,
            filters_due_date=filters_due_date,
            filters_created_at=filters_created_at,
            sort=sort,
            view=view,
            viewpoint_format=viewpoint_format,
            save_sticky_filters=save_sticky_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CoordinationIssuesGet200ResponseInner]",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_coordination_issues_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_assignee_company_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignee vendor companies.")] = None,
        filters_assignee_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching assignees.")] = None,
        filters_created_by_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching User IDs.")] = None,
        filters_created_from: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching creation source.")] = None,
        filters_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching ids.")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching locations.")] = None,
        filters_include_sublocations: Annotated[Optional[StrictBool], Field(description="Use together with `filters[location_id]` ")] = None,
        filters_search: Annotated[Optional[StrictStr], Field(description="Filter item(s) with the matching search query. The search is performed on title and issue number.")] = None,
        filters_coordination_issue_file_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with the exact coordination issue file.")] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching status.")] = None,
        filters_issue_type: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching issue_type.")] = None,
        filters_priority: Annotated[Optional[List[StrictStr]], Field(description="Filter item(s) with matching priority.")] = None,
        filters_trade_id: Annotated[Optional[List[StrictInt]], Field(description="Filter item(s) with matching trades.")] = None,
        filters_updated_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific updated at iso8601 datetime range.")] = None,
        filters_due_date: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific due date iso8601 date range.")] = None,
        filters_created_at: Annotated[Optional[StrictStr], Field(description="Filter item(s) within a specific created at iso8601 datetime range.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'")] = None,
        view: Annotated[Optional[StrictStr], Field(description="The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.")] = None,
        viewpoint_format: Annotated[Optional[StrictStr], Field(description="Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.")] = None,
        save_sticky_filters: Annotated[Optional[StrictBool], Field(description="Persists filter parameters for the requesting user and project.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Coordination Issues

        Lists Coordination Issues associated with the specified Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_assignee_company_id: Filter item(s) with matching assignee vendor companies.
        :type filters_assignee_company_id: List[int]
        :param filters_assignee_id: Filter item(s) with matching assignees.
        :type filters_assignee_id: List[int]
        :param filters_created_by_id: Filter item(s) with matching User IDs.
        :type filters_created_by_id: List[int]
        :param filters_created_from: Filter item(s) with matching creation source.
        :type filters_created_from: List[str]
        :param filters_ids: Filter item(s) with matching ids.
        :type filters_ids: List[int]
        :param filters_location_id: Filter item(s) with matching locations.
        :type filters_location_id: List[int]
        :param filters_include_sublocations: Use together with `filters[location_id]` 
        :type filters_include_sublocations: bool
        :param filters_search: Filter item(s) with the matching search query. The search is performed on title and issue number.
        :type filters_search: str
        :param filters_coordination_issue_file_id: Filter item(s) with the exact coordination issue file.
        :type filters_coordination_issue_file_id: List[int]
        :param filters_status: Filter item(s) with matching status.
        :type filters_status: List[str]
        :param filters_issue_type: Filter item(s) with matching issue_type.
        :type filters_issue_type: List[str]
        :param filters_priority: Filter item(s) with matching priority.
        :type filters_priority: List[str]
        :param filters_trade_id: Filter item(s) with matching trades.
        :type filters_trade_id: List[int]
        :param filters_updated_at: Filter item(s) within a specific updated at iso8601 datetime range.
        :type filters_updated_at: str
        :param filters_due_date: Filter item(s) within a specific due date iso8601 date range.
        :type filters_due_date: str
        :param filters_created_at: Filter item(s) within a specific created at iso8601 datetime range.
        :type filters_created_at: str
        :param sort: Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
        :type sort: str
        :param view: The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.
        :type view: str
        :param viewpoint_format: Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.
        :type viewpoint_format: str
        :param save_sticky_filters: Persists filter parameters for the requesting user and project.
        :type save_sticky_filters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            filters_assignee_company_id=filters_assignee_company_id,
            filters_assignee_id=filters_assignee_id,
            filters_created_by_id=filters_created_by_id,
            filters_created_from=filters_created_from,
            filters_ids=filters_ids,
            filters_location_id=filters_location_id,
            filters_include_sublocations=filters_include_sublocations,
            filters_search=filters_search,
            filters_coordination_issue_file_id=filters_coordination_issue_file_id,
            filters_status=filters_status,
            filters_issue_type=filters_issue_type,
            filters_priority=filters_priority,
            filters_trade_id=filters_trade_id,
            filters_updated_at=filters_updated_at,
            filters_due_date=filters_due_date,
            filters_created_at=filters_created_at,
            sort=sort,
            view=view,
            viewpoint_format=viewpoint_format,
            save_sticky_filters=save_sticky_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CoordinationIssuesGet200ResponseInner]",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_coordination_issues_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        filters_assignee_company_id,
        filters_assignee_id,
        filters_created_by_id,
        filters_created_from,
        filters_ids,
        filters_location_id,
        filters_include_sublocations,
        filters_search,
        filters_coordination_issue_file_id,
        filters_status,
        filters_issue_type,
        filters_priority,
        filters_trade_id,
        filters_updated_at,
        filters_due_date,
        filters_created_at,
        sort,
        view,
        viewpoint_format,
        save_sticky_filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[assignee_company_id][]': 'multi',
            'filters[assignee_id][]': 'multi',
            'filters[created_by_id][]': 'multi',
            'filters[created_from][]': 'multi',
            'filters[ids][]': 'multi',
            'filters[location_id][]': 'multi',
            'filters[coordination_issue_file_id][]': 'multi',
            'filters[status][]': 'multi',
            'filters[issue_type][]': 'multi',
            'filters[priority][]': 'multi',
            'filters[trade_id][]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_assignee_company_id is not None:
            
            _query_params.append(('filters[assignee_company_id][]', filters_assignee_company_id))
            
        if filters_assignee_id is not None:
            
            _query_params.append(('filters[assignee_id][]', filters_assignee_id))
            
        if filters_created_by_id is not None:
            
            _query_params.append(('filters[created_by_id][]', filters_created_by_id))
            
        if filters_created_from is not None:
            
            _query_params.append(('filters[created_from][]', filters_created_from))
            
        if filters_ids is not None:
            
            _query_params.append(('filters[ids][]', filters_ids))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id][]', filters_location_id))
            
        if filters_include_sublocations is not None:
            
            _query_params.append(('filters[include_sublocations]', filters_include_sublocations))
            
        if filters_search is not None:
            
            _query_params.append(('filters[search]', filters_search))
            
        if filters_coordination_issue_file_id is not None:
            
            _query_params.append(('filters[coordination_issue_file_id][]', filters_coordination_issue_file_id))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status][]', filters_status))
            
        if filters_issue_type is not None:
            
            _query_params.append(('filters[issue_type][]', filters_issue_type))
            
        if filters_priority is not None:
            
            _query_params.append(('filters[priority][]', filters_priority))
            
        if filters_trade_id is not None:
            
            _query_params.append(('filters[trade_id][]', filters_trade_id))
            
        if filters_updated_at is not None:
            
            _query_params.append(('filters[updated_at]', filters_updated_at))
            
        if filters_due_date is not None:
            
            _query_params.append(('filters[due_date]', filters_due_date))
            
        if filters_created_at is not None:
            
            _query_params.append(('filters[created_at]', filters_created_at))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if viewpoint_format is not None:
            
            _query_params.append(('viewpoint_format', viewpoint_format))
            
        if save_sticky_filters is not None:
            
            _query_params.append(('save_sticky_filters', save_sticky_filters))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/coordination_issues',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_coordination_issues_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Coordination Issue

        Delete a Coordination Issue from the system

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_coordination_issues_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Coordination Issue

        Delete a Coordination Issue from the system

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_coordination_issues_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Coordination Issue

        Delete a Coordination Issue from the system

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_delete_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_coordination_issues_id_delete_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/coordination_issues/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_coordination_issues_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.")] = None,
        viewpoint_format: Annotated[Optional[StrictStr], Field(description="Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CoordinationIssuesGet200ResponseInner:
        """Show Coordination Issue

        Return a single Coordination Issue item.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.
        :type view: str
        :param viewpoint_format: Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.
        :type viewpoint_format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            view=view,
            viewpoint_format=viewpoint_format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CoordinationIssuesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_coordination_issues_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.")] = None,
        viewpoint_format: Annotated[Optional[StrictStr], Field(description="Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CoordinationIssuesGet200ResponseInner]:
        """Show Coordination Issue

        Return a single Coordination Issue item.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.
        :type view: str
        :param viewpoint_format: Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.
        :type viewpoint_format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            view=view,
            viewpoint_format=viewpoint_format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CoordinationIssuesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_coordination_issues_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        view: Annotated[Optional[StrictStr], Field(description="The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.")] = None,
        viewpoint_format: Annotated[Optional[StrictStr], Field(description="Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Coordination Issue

        Return a single Coordination Issue item.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param view: The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.
        :type view: str
        :param viewpoint_format: Specify viewpoint data format. This parameter functions only when the query parameter view is 'extended' The default format returns the viewpoint content as saved. The procore format returns the viewpoint content converted to Procore format. If a valid conversion is not possible, empty viewpoint is returned.
        :type viewpoint_format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            view=view,
            viewpoint_format=viewpoint_format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CoordinationIssuesGet200ResponseInner",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_coordination_issues_id_get_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        view,
        viewpoint_format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if viewpoint_format is not None:
            
            _query_params.append(('viewpoint_format', viewpoint_format))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/coordination_issues/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_coordination_issues_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        body105: Body105,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CoordinationIssuesGet200ResponseInner:
        """Update Coordination Issue

        Update a Coordination Issue item

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param body105: (required)
        :type body105: Body105
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            body105=body105,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CoordinationIssuesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_coordination_issues_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        body105: Body105,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CoordinationIssuesGet200ResponseInner]:
        """Update Coordination Issue

        Update a Coordination Issue item

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param body105: (required)
        :type body105: Body105
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            body105=body105,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CoordinationIssuesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_coordination_issues_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="Coordination Issue ID")],
        body105: Body105,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Coordination Issue

        Update a Coordination Issue item

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: Coordination Issue ID (required)
        :type id: int
        :param body105: (required)
        :type body105: Body105
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_id_patch_serialize(
            procore_company_id=procore_company_id,
            id=id,
            body105=body105,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CoordinationIssuesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_coordination_issues_id_patch_serialize(
        self,
        procore_company_id,
        id,
        body105,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if body105 is not None:
            _body_params = body105


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/coordination_issues/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_coordination_issues_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        body104: Body104,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CoordinationIssuesGet200ResponseInner:
        """Create Coordination Issue

        Create a Coordination Issue in a Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param body104: (required)
        :type body104: Body104
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_post_serialize(
            procore_company_id=procore_company_id,
            body104=body104,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CoordinationIssuesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_coordination_issues_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        body104: Body104,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CoordinationIssuesGet200ResponseInner]:
        """Create Coordination Issue

        Create a Coordination Issue in a Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param body104: (required)
        :type body104: Body104
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_post_serialize(
            procore_company_id=procore_company_id,
            body104=body104,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CoordinationIssuesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_coordination_issues_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        body104: Body104,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Coordination Issue

        Create a Coordination Issue in a Project

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param body104: (required)
        :type body104: Body104
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_coordination_issues_post_serialize(
            procore_company_id=procore_company_id,
            body104=body104,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RestV10CoordinationIssuesGet200ResponseInner",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_coordination_issues_post_serialize(
        self,
        procore_company_id,
        body104,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if body104 is not None:
            _body_params = body104


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/coordination_issues',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


