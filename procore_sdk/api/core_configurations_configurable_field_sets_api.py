# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.configurable_field_set import ConfigurableFieldSet
from procore_sdk.models.configurable_field_set2 import ConfigurableFieldSet2
from procore_sdk.models.rest_v10_companies_company_id_configurable_field_sets_id_patch_request import RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest
from procore_sdk.models.rest_v10_companies_company_id_configurable_field_sets_id_project_options_get200_response_inner import RestV10CompaniesCompanyIdConfigurableFieldSetsIdProjectOptionsGet200ResponseInner
from procore_sdk.models.rest_v10_companies_company_id_configurable_field_sets_id_validations_post200_response import RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPost200Response
from procore_sdk.models.rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request import RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest
from procore_sdk.models.rest_v10_companies_company_id_configurable_field_sets_post_request import RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest
from procore_sdk.models.rest_v10_projects_project_id_rfis_default_distribution_get200_response_inner import RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class CoreConfigurationsConfigurableFieldSetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_find_by_index_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        type: Annotated[StrictStr, Field(description="The type of Configurable Field Set")],
        project_id: Annotated[Optional[StrictInt], Field(description="Project ID that is associated to the Configurable Field Set, if applicable")] = None,
        scope_category: Annotated[Optional[StrictInt], Field(description="Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)")] = None,
        scope_inspection_type_id: Annotated[Optional[StrictInt], Field(description="Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.")] = None,
        scope_generic_tool_id: Annotated[Optional[StrictInt], Field(description="Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)")] = None,
        scope_action_plan_type_id: Annotated[Optional[StrictInt], Field(description="Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurableFieldSet2:
        """Find Configurable Field Set by Index

        Returns the details for a specified Configurable Field Set if found. If not, template of type Field Set will be returned with ID null.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param type: The type of Configurable Field Set (required)
        :type type: str
        :param project_id: Project ID that is associated to the Configurable Field Set, if applicable
        :type project_id: int
        :param scope_category: Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)
        :type scope_category: int
        :param scope_inspection_type_id: Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.
        :type scope_inspection_type_id: int
        :param scope_generic_tool_id: Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)
        :type scope_generic_tool_id: int
        :param scope_action_plan_type_id: Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)
        :type scope_action_plan_type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_find_by_index_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            type=type,
            project_id=project_id,
            scope_category=scope_category,
            scope_inspection_type_id=scope_inspection_type_id,
            scope_generic_tool_id=scope_generic_tool_id,
            scope_action_plan_type_id=scope_action_plan_type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '400': "RestV10ProjectsIdFiltersGetDefaultResponse",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_find_by_index_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        type: Annotated[StrictStr, Field(description="The type of Configurable Field Set")],
        project_id: Annotated[Optional[StrictInt], Field(description="Project ID that is associated to the Configurable Field Set, if applicable")] = None,
        scope_category: Annotated[Optional[StrictInt], Field(description="Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)")] = None,
        scope_inspection_type_id: Annotated[Optional[StrictInt], Field(description="Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.")] = None,
        scope_generic_tool_id: Annotated[Optional[StrictInt], Field(description="Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)")] = None,
        scope_action_plan_type_id: Annotated[Optional[StrictInt], Field(description="Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurableFieldSet2]:
        """Find Configurable Field Set by Index

        Returns the details for a specified Configurable Field Set if found. If not, template of type Field Set will be returned with ID null.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param type: The type of Configurable Field Set (required)
        :type type: str
        :param project_id: Project ID that is associated to the Configurable Field Set, if applicable
        :type project_id: int
        :param scope_category: Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)
        :type scope_category: int
        :param scope_inspection_type_id: Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.
        :type scope_inspection_type_id: int
        :param scope_generic_tool_id: Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)
        :type scope_generic_tool_id: int
        :param scope_action_plan_type_id: Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)
        :type scope_action_plan_type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_find_by_index_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            type=type,
            project_id=project_id,
            scope_category=scope_category,
            scope_inspection_type_id=scope_inspection_type_id,
            scope_generic_tool_id=scope_generic_tool_id,
            scope_action_plan_type_id=scope_action_plan_type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '400': "RestV10ProjectsIdFiltersGetDefaultResponse",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_find_by_index_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        type: Annotated[StrictStr, Field(description="The type of Configurable Field Set")],
        project_id: Annotated[Optional[StrictInt], Field(description="Project ID that is associated to the Configurable Field Set, if applicable")] = None,
        scope_category: Annotated[Optional[StrictInt], Field(description="Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)")] = None,
        scope_inspection_type_id: Annotated[Optional[StrictInt], Field(description="Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.")] = None,
        scope_generic_tool_id: Annotated[Optional[StrictInt], Field(description="Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)")] = None,
        scope_action_plan_type_id: Annotated[Optional[StrictInt], Field(description="Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find Configurable Field Set by Index

        Returns the details for a specified Configurable Field Set if found. If not, template of type Field Set will be returned with ID null.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param type: The type of Configurable Field Set (required)
        :type type: str
        :param project_id: Project ID that is associated to the Configurable Field Set, if applicable
        :type project_id: int
        :param scope_category: Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)
        :type scope_category: int
        :param scope_inspection_type_id: Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.
        :type scope_inspection_type_id: int
        :param scope_generic_tool_id: Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)
        :type scope_generic_tool_id: int
        :param scope_action_plan_type_id: Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)
        :type scope_action_plan_type_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_find_by_index_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            type=type,
            project_id=project_id,
            scope_category=scope_category,
            scope_inspection_type_id=scope_inspection_type_id,
            scope_generic_tool_id=scope_generic_tool_id,
            scope_action_plan_type_id=scope_action_plan_type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '400': "RestV10ProjectsIdFiltersGetDefaultResponse",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_find_by_index_get_serialize(
        self,
        procore_company_id,
        company_id,
        type,
        project_id,
        scope_category,
        scope_inspection_type_id,
        scope_generic_tool_id,
        scope_action_plan_type_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if scope_category is not None:
            
            _query_params.append(('scope[category]', scope_category))
            
        if scope_inspection_type_id is not None:
            
            _query_params.append(('scope[inspection_type_id]', scope_inspection_type_id))
            
        if scope_generic_tool_id is not None:
            
            _query_params.append(('scope[generic_tool_id]', scope_generic_tool_id))
            
        if scope_action_plan_type_id is not None:
            
            _query_params.append(('scope[action_plan_type_id]', scope_action_plan_type_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/find_by_index',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by field set type(s). Could be a string or an array of string.")] = None,
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Filter by generic tool id(s). Could be a integer or an array of integer.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Specify which view to render. Options are extended, mobile, or with_project_ids")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ConfigurableFieldSet]:
        """List Configurable Field Sets

        Return a list of all Configurable Field Sets associated with a Company.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_type: Filter by field set type(s). Could be a string or an array of string.
        :type filters_type: List[str]
        :param filters_generic_tool_id: Filter by generic tool id(s). Could be a integer or an array of integer.
        :type filters_generic_tool_id: List[int]
        :param view: Specify which view to render. Options are extended, mobile, or with_project_ids
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            include_lov_entries=include_lov_entries,
            page=page,
            per_page=per_page,
            filters_type=filters_type,
            filters_generic_tool_id=filters_generic_tool_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurableFieldSet]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by field set type(s). Could be a string or an array of string.")] = None,
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Filter by generic tool id(s). Could be a integer or an array of integer.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Specify which view to render. Options are extended, mobile, or with_project_ids")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ConfigurableFieldSet]]:
        """List Configurable Field Sets

        Return a list of all Configurable Field Sets associated with a Company.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_type: Filter by field set type(s). Could be a string or an array of string.
        :type filters_type: List[str]
        :param filters_generic_tool_id: Filter by generic tool id(s). Could be a integer or an array of integer.
        :type filters_generic_tool_id: List[int]
        :param view: Specify which view to render. Options are extended, mobile, or with_project_ids
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            include_lov_entries=include_lov_entries,
            page=page,
            per_page=per_page,
            filters_type=filters_type,
            filters_generic_tool_id=filters_generic_tool_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurableFieldSet]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        filters_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by field set type(s). Could be a string or an array of string.")] = None,
        filters_generic_tool_id: Annotated[Optional[List[StrictInt]], Field(description="Filter by generic tool id(s). Could be a integer or an array of integer.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Specify which view to render. Options are extended, mobile, or with_project_ids")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Configurable Field Sets

        Return a list of all Configurable Field Sets associated with a Company.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param filters_type: Filter by field set type(s). Could be a string or an array of string.
        :type filters_type: List[str]
        :param filters_generic_tool_id: Filter by generic tool id(s). Could be a integer or an array of integer.
        :type filters_generic_tool_id: List[int]
        :param view: Specify which view to render. Options are extended, mobile, or with_project_ids
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            include_lov_entries=include_lov_entries,
            page=page,
            per_page=per_page,
            filters_type=filters_type,
            filters_generic_tool_id=filters_generic_tool_id,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurableFieldSet]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_get_serialize(
        self,
        procore_company_id,
        company_id,
        include_lov_entries,
        page,
        per_page,
        filters_type,
        filters_generic_tool_id,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[type][]': 'multi',
            'filters[generic_tool_id][]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        # process the query parameters
        if include_lov_entries is not None:
            
            _query_params.append(('include_lov_entries', include_lov_entries))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if filters_type is not None:
            
            _query_params.append(('filters[type][]', filters_type))
            
        if filters_generic_tool_id is not None:
            
            _query_params.append(('filters[generic_tool_id][]', filters_generic_tool_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_delete(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Configurable Field Set

        Deletes a Configurable Field Set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_delete_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_delete_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Configurable Field Set

        Deletes a Configurable Field Set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_delete_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_delete_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Configurable Field Set

        Deletes a Configurable Field Set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_delete_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_id_delete_serialize(
        self,
        procore_company_id,
        company_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        name: Annotated[StrictStr, Field(description="Name for new fieldset")],
        include_custom_fields: Annotated[Optional[StrictBool], Field(description="Boolean to dictate if the custom fields are duplicated")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurableFieldSet:
        """Duplicate a Configurable Field Set and its custom fields

        Returns the newly duplicated configurable field set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param name: Name for new fieldset (required)
        :type name: str
        :param include_custom_fields: Boolean to dictate if the custom fields are duplicated
        :type include_custom_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            name=name,
            include_custom_fields=include_custom_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet",
            '400': "RestV10CompaniesCompanyIdConfigurableFieldSetsIdDuplicatePost400Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        name: Annotated[StrictStr, Field(description="Name for new fieldset")],
        include_custom_fields: Annotated[Optional[StrictBool], Field(description="Boolean to dictate if the custom fields are duplicated")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurableFieldSet]:
        """Duplicate a Configurable Field Set and its custom fields

        Returns the newly duplicated configurable field set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param name: Name for new fieldset (required)
        :type name: str
        :param include_custom_fields: Boolean to dictate if the custom fields are duplicated
        :type include_custom_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            name=name,
            include_custom_fields=include_custom_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet",
            '400': "RestV10CompaniesCompanyIdConfigurableFieldSetsIdDuplicatePost400Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        name: Annotated[StrictStr, Field(description="Name for new fieldset")],
        include_custom_fields: Annotated[Optional[StrictBool], Field(description="Boolean to dictate if the custom fields are duplicated")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Duplicate a Configurable Field Set and its custom fields

        Returns the newly duplicated configurable field set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param name: Name for new fieldset (required)
        :type name: str
        :param include_custom_fields: Boolean to dictate if the custom fields are duplicated
        :type include_custom_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            name=name,
            include_custom_fields=include_custom_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet",
            '400': "RestV10CompaniesCompanyIdConfigurableFieldSetsIdDuplicatePost400Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '404': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_id_duplicate_post_serialize(
        self,
        procore_company_id,
        company_id,
        id,
        name,
        include_custom_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if include_custom_fields is not None:
            
            _query_params.append(('include_custom_fields', include_custom_fields))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/{id}/duplicate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurableFieldSet2:
        """Show Configurable Field Set

        Returns the details for a specified Configurable Field Set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurableFieldSet2]:
        """Show Configurable Field Set

        Returns the details for a specified Configurable Field Set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show Configurable Field Set

        Returns the details for a specified Configurable Field Set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_id_get_serialize(
        self,
        procore_company_id,
        company_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_patch(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        rest_v10_companies_company_id_configurable_field_sets_id_patch_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurableFieldSet2:
        """Update Configurable Field Set

        Updates a Configurable Field Set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param rest_v10_companies_company_id_configurable_field_sets_id_patch_request: (required)
        :type rest_v10_companies_company_id_configurable_field_sets_id_patch_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_patch_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            rest_v10_companies_company_id_configurable_field_sets_id_patch_request=rest_v10_companies_company_id_configurable_field_sets_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_patch_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        rest_v10_companies_company_id_configurable_field_sets_id_patch_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurableFieldSet2]:
        """Update Configurable Field Set

        Updates a Configurable Field Set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param rest_v10_companies_company_id_configurable_field_sets_id_patch_request: (required)
        :type rest_v10_companies_company_id_configurable_field_sets_id_patch_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_patch_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            rest_v10_companies_company_id_configurable_field_sets_id_patch_request=rest_v10_companies_company_id_configurable_field_sets_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_patch_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        rest_v10_companies_company_id_configurable_field_sets_id_patch_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Configurable Field Set

        Updates a Configurable Field Set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param rest_v10_companies_company_id_configurable_field_sets_id_patch_request: (required)
        :type rest_v10_companies_company_id_configurable_field_sets_id_patch_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_patch_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            rest_v10_companies_company_id_configurable_field_sets_id_patch_request=rest_v10_companies_company_id_configurable_field_sets_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurableFieldSet2",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_id_patch_serialize(
        self,
        procore_company_id,
        company_id,
        id,
        rest_v10_companies_company_id_configurable_field_sets_id_patch_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_companies_company_id_configurable_field_sets_id_patch_request is not None:
            _body_params = rest_v10_companies_company_id_configurable_field_sets_id_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_project_options_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        with_name: Annotated[Optional[StrictStr], Field(description="Filter by project name, project number or display name which contains the given text.")] = None,
        starts_with: Annotated[Optional[StrictStr], Field(description="Filter by project name, project number or display name starts with the given text.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10CompaniesCompanyIdConfigurableFieldSetsIdProjectOptionsGet200ResponseInner]:
        """List Configurable Field Set Project options

        Returns projects available for the specified configurable field set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param with_name: Filter by project name, project number or display name which contains the given text.
        :type with_name: str
        :param starts_with: Filter by project name, project number or display name starts with the given text.
        :type starts_with: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_project_options_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            page=page,
            per_page=per_page,
            with_name=with_name,
            starts_with=starts_with,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdConfigurableFieldSetsIdProjectOptionsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_project_options_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        with_name: Annotated[Optional[StrictStr], Field(description="Filter by project name, project number or display name which contains the given text.")] = None,
        starts_with: Annotated[Optional[StrictStr], Field(description="Filter by project name, project number or display name starts with the given text.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10CompaniesCompanyIdConfigurableFieldSetsIdProjectOptionsGet200ResponseInner]]:
        """List Configurable Field Set Project options

        Returns projects available for the specified configurable field set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param with_name: Filter by project name, project number or display name which contains the given text.
        :type with_name: str
        :param starts_with: Filter by project name, project number or display name starts with the given text.
        :type starts_with: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_project_options_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            page=page,
            per_page=per_page,
            with_name=with_name,
            starts_with=starts_with,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdConfigurableFieldSetsIdProjectOptionsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_project_options_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        with_name: Annotated[Optional[StrictStr], Field(description="Filter by project name, project number or display name which contains the given text.")] = None,
        starts_with: Annotated[Optional[StrictStr], Field(description="Filter by project name, project number or display name starts with the given text.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Configurable Field Set Project options

        Returns projects available for the specified configurable field set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param with_name: Filter by project name, project number or display name which contains the given text.
        :type with_name: str
        :param starts_with: Filter by project name, project number or display name starts with the given text.
        :type starts_with: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_project_options_get_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            page=page,
            per_page=per_page,
            with_name=with_name,
            starts_with=starts_with,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10CompaniesCompanyIdConfigurableFieldSetsIdProjectOptionsGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_id_project_options_get_serialize(
        self,
        procore_company_id,
        company_id,
        id,
        page,
        per_page,
        with_name,
        starts_with,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if with_name is not None:
            
            _query_params.append(('with_name', with_name))
            
        if starts_with is not None:
            
            _query_params.append(('starts_with', starts_with))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/{id}/project_options',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_validations_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        project_id: Annotated[Optional[StrictInt], Field(description="Project ID")] = None,
        rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request: Optional[RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPost200Response:
        """Validate Custom Fields Values With Configurable Field Set

        Returns validation failure/success messages for values supplied to custom fields within the configurable field set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param project_id: Project ID
        :type project_id: int
        :param rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request:
        :type rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_validations_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            project_id=project_id,
            rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request=rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPost200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_validations_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        project_id: Annotated[Optional[StrictInt], Field(description="Project ID")] = None,
        rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request: Optional[RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPost200Response]:
        """Validate Custom Fields Values With Configurable Field Set

        Returns validation failure/success messages for values supplied to custom fields within the configurable field set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param project_id: Project ID
        :type project_id: int
        :param rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request:
        :type rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_validations_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            project_id=project_id,
            rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request=rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPost200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_id_validations_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        id: Annotated[StrictInt, Field(description="Configurable Field Set ID")],
        project_id: Annotated[Optional[StrictInt], Field(description="Project ID")] = None,
        rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request: Optional[RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Validate Custom Fields Values With Configurable Field Set

        Returns validation failure/success messages for values supplied to custom fields within the configurable field set.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param id: Configurable Field Set ID (required)
        :type id: int
        :param project_id: Project ID
        :type project_id: int
        :param rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request:
        :type rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_id_validations_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            id=id,
            project_id=project_id,
            rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request=rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10CompaniesCompanyIdConfigurableFieldSetsIdValidationsPost200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_id_validations_post_serialize(
        self,
        procore_company_id,
        company_id,
        id,
        project_id,
        rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request is not None:
            _body_params = rest_v10_companies_company_id_configurable_field_sets_id_validations_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets/{id}/validations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_post(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        rest_v10_companies_company_id_configurable_field_sets_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest,
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurableFieldSet2:
        """Create Configurable Field Sets

        Creates a Configurable Field Set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param rest_v10_companies_company_id_configurable_field_sets_post_request: (required)
        :type rest_v10_companies_company_id_configurable_field_sets_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            rest_v10_companies_company_id_configurable_field_sets_post_request=rest_v10_companies_company_id_configurable_field_sets_post_request,
            include_lov_entries=include_lov_entries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConfigurableFieldSet2",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_post_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        rest_v10_companies_company_id_configurable_field_sets_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest,
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurableFieldSet2]:
        """Create Configurable Field Sets

        Creates a Configurable Field Set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param rest_v10_companies_company_id_configurable_field_sets_post_request: (required)
        :type rest_v10_companies_company_id_configurable_field_sets_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            rest_v10_companies_company_id_configurable_field_sets_post_request=rest_v10_companies_company_id_configurable_field_sets_post_request,
            include_lov_entries=include_lov_entries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConfigurableFieldSet2",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_companies_company_id_configurable_field_sets_post_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        company_id: Annotated[StrictInt, Field(description="Unique identifier for the company.")],
        rest_v10_companies_company_id_configurable_field_sets_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest,
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Configurable Field Sets

        Creates a Configurable Field Set

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param company_id: Unique identifier for the company. (required)
        :type company_id: int
        :param rest_v10_companies_company_id_configurable_field_sets_post_request: (required)
        :type rest_v10_companies_company_id_configurable_field_sets_post_request: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequest
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_companies_company_id_configurable_field_sets_post_serialize(
            procore_company_id=procore_company_id,
            company_id=company_id,
            rest_v10_companies_company_id_configurable_field_sets_post_request=rest_v10_companies_company_id_configurable_field_sets_post_request,
            include_lov_entries=include_lov_entries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConfigurableFieldSet2",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_companies_company_id_configurable_field_sets_post_serialize(
        self,
        procore_company_id,
        company_id,
        rest_v10_companies_company_id_configurable_field_sets_post_request,
        include_lov_entries,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_id is not None:
            _path_params['company_id'] = company_id
        # process the query parameters
        if include_lov_entries is not None:
            
            _query_params.append(('include_lov_entries', include_lov_entries))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter
        if rest_v10_companies_company_id_configurable_field_sets_post_request is not None:
            _body_params = rest_v10_companies_company_id_configurable_field_sets_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/rest/v1.0/companies/{company_id}/configurable_field_sets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_configurable_field_sets_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        types: Annotated[Optional[List[StrictStr]], Field(description="Filter by of configurable field set types")] = None,
        include_default_configurable_field_sets: Annotated[Optional[StrictBool], Field(description="Flag to include the default values for each type of Configurable Field Set if one has not been created.")] = None,
        generic_tool_id: Annotated[Optional[StrictInt], Field(description="Filter by generic tool id(s). Could be a integer or an array of integer.")] = None,
        action_plan_type_id: Annotated[Optional[StrictInt], Field(description="Filter by Action Plan type id.")] = None,
        inspection_type_id: Annotated[Optional[StrictInt], Field(description="Filter by inspection type id.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="Filter by category.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ConfigurableFieldSet]:
        """List Project Configurable Field Sets

        Return a list of all Configurable Field Sets associated with a Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param types: Filter by of configurable field set types
        :type types: List[str]
        :param include_default_configurable_field_sets: Flag to include the default values for each type of Configurable Field Set if one has not been created.
        :type include_default_configurable_field_sets: bool
        :param generic_tool_id: Filter by generic tool id(s). Could be a integer or an array of integer.
        :type generic_tool_id: int
        :param action_plan_type_id: Filter by Action Plan type id.
        :type action_plan_type_id: int
        :param inspection_type_id: Filter by inspection type id.
        :type inspection_type_id: int
        :param category: Filter by category.
        :type category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_configurable_field_sets_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            include_lov_entries=include_lov_entries,
            types=types,
            include_default_configurable_field_sets=include_default_configurable_field_sets,
            generic_tool_id=generic_tool_id,
            action_plan_type_id=action_plan_type_id,
            inspection_type_id=inspection_type_id,
            category=category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurableFieldSet]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_configurable_field_sets_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        types: Annotated[Optional[List[StrictStr]], Field(description="Filter by of configurable field set types")] = None,
        include_default_configurable_field_sets: Annotated[Optional[StrictBool], Field(description="Flag to include the default values for each type of Configurable Field Set if one has not been created.")] = None,
        generic_tool_id: Annotated[Optional[StrictInt], Field(description="Filter by generic tool id(s). Could be a integer or an array of integer.")] = None,
        action_plan_type_id: Annotated[Optional[StrictInt], Field(description="Filter by Action Plan type id.")] = None,
        inspection_type_id: Annotated[Optional[StrictInt], Field(description="Filter by inspection type id.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="Filter by category.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ConfigurableFieldSet]]:
        """List Project Configurable Field Sets

        Return a list of all Configurable Field Sets associated with a Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param types: Filter by of configurable field set types
        :type types: List[str]
        :param include_default_configurable_field_sets: Flag to include the default values for each type of Configurable Field Set if one has not been created.
        :type include_default_configurable_field_sets: bool
        :param generic_tool_id: Filter by generic tool id(s). Could be a integer or an array of integer.
        :type generic_tool_id: int
        :param action_plan_type_id: Filter by Action Plan type id.
        :type action_plan_type_id: int
        :param inspection_type_id: Filter by inspection type id.
        :type inspection_type_id: int
        :param category: Filter by category.
        :type category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_configurable_field_sets_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            include_lov_entries=include_lov_entries,
            types=types,
            include_default_configurable_field_sets=include_default_configurable_field_sets,
            generic_tool_id=generic_tool_id,
            action_plan_type_id=action_plan_type_id,
            inspection_type_id=inspection_type_id,
            category=category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurableFieldSet]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_configurable_field_sets_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        include_lov_entries: Annotated[Optional[StrictBool], Field(description="whether or not to include LOV entries in the response (defaults to true)")] = None,
        types: Annotated[Optional[List[StrictStr]], Field(description="Filter by of configurable field set types")] = None,
        include_default_configurable_field_sets: Annotated[Optional[StrictBool], Field(description="Flag to include the default values for each type of Configurable Field Set if one has not been created.")] = None,
        generic_tool_id: Annotated[Optional[StrictInt], Field(description="Filter by generic tool id(s). Could be a integer or an array of integer.")] = None,
        action_plan_type_id: Annotated[Optional[StrictInt], Field(description="Filter by Action Plan type id.")] = None,
        inspection_type_id: Annotated[Optional[StrictInt], Field(description="Filter by inspection type id.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="Filter by category.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Project Configurable Field Sets

        Return a list of all Configurable Field Sets associated with a Project.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param include_lov_entries: whether or not to include LOV entries in the response (defaults to true)
        :type include_lov_entries: bool
        :param types: Filter by of configurable field set types
        :type types: List[str]
        :param include_default_configurable_field_sets: Flag to include the default values for each type of Configurable Field Set if one has not been created.
        :type include_default_configurable_field_sets: bool
        :param generic_tool_id: Filter by generic tool id(s). Could be a integer or an array of integer.
        :type generic_tool_id: int
        :param action_plan_type_id: Filter by Action Plan type id.
        :type action_plan_type_id: int
        :param inspection_type_id: Filter by inspection type id.
        :type inspection_type_id: int
        :param category: Filter by category.
        :type category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_configurable_field_sets_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            page=page,
            per_page=per_page,
            include_lov_entries=include_lov_entries,
            types=types,
            include_default_configurable_field_sets=include_default_configurable_field_sets,
            generic_tool_id=generic_tool_id,
            action_plan_type_id=action_plan_type_id,
            inspection_type_id=inspection_type_id,
            category=category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurableFieldSet]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_configurable_field_sets_get_serialize(
        self,
        procore_company_id,
        project_id,
        page,
        per_page,
        include_lov_entries,
        types,
        include_default_configurable_field_sets,
        generic_tool_id,
        action_plan_type_id,
        inspection_type_id,
        category,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if include_lov_entries is not None:
            
            _query_params.append(('include_lov_entries', include_lov_entries))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if include_default_configurable_field_sets is not None:
            
            _query_params.append(('include_default_configurable_field_sets', include_default_configurable_field_sets))
            
        if generic_tool_id is not None:
            
            _query_params.append(('generic_tool_id', generic_tool_id))
            
        if action_plan_type_id is not None:
            
            _query_params.append(('action_plan_type_id', action_plan_type_id))
            
        if inspection_type_id is not None:
            
            _query_params.append(('inspection_type_id', inspection_type_id))
            
        if category is not None:
            
            _query_params.append(('category', category))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/configurable_field_sets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_projects_project_id_custom_fields_tool_name_user_options_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        tool_name: Annotated[StrictStr, Field(description="Tool name identifier")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]:
        """List Custom Fields User options

        Returns login informations that have access to the specified tool.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param tool_name: Tool name identifier (required)
        :type tool_name: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_custom_fields_tool_name_user_options_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            tool_name=tool_name,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_projects_project_id_custom_fields_tool_name_user_options_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        tool_name: Annotated[StrictStr, Field(description="Tool name identifier")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]]:
        """List Custom Fields User options

        Returns login informations that have access to the specified tool.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param tool_name: Tool name identifier (required)
        :type tool_name: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_custom_fields_tool_name_user_options_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            tool_name=tool_name,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_projects_project_id_custom_fields_tool_name_user_options_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        tool_name: Annotated[StrictStr, Field(description="Tool name identifier")],
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Custom Fields User options

        Returns login informations that have access to the specified tool.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param tool_name: Tool name identifier (required)
        :type tool_name: str
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rest_v10_projects_project_id_custom_fields_tool_name_user_options_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            tool_name=tool_name,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner]",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_projects_project_id_custom_fields_tool_name_user_options_get_serialize(
        self,
        procore_company_id,
        project_id,
        tool_name,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if tool_name is not None:
            _path_params['tool_name'] = tool_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/projects/{project_id}/custom_fields/{tool_name}/user_options',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


