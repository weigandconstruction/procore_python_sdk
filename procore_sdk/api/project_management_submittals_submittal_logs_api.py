# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_submittal_logs_get200_response_inner import RestV10SubmittalLogsGet200ResponseInner
from procore_sdk.models.rest_v10_submittal_logs_id_get200_response import RestV10SubmittalLogsIdGet200Response

from procore_sdk.api_client import ApiClient, RequestSerialized
from procore_sdk.api_response import ApiResponse
from procore_sdk.rest import RESTResponseType


class ProjectManagementSubmittalsSubmittalLogsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rest_v10_submittal_logs_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_approved_id: Optional[StrictStr] = None,
        filters_ball_in_court: Optional[StrictStr] = None,
        filters_date_range: Optional[StrictStr] = None,
        filters_due_by: Optional[date] = None,
        filters_end_date: Optional[date] = None,
        filters_include_sublocations: Annotated[Optional[StrictBool], Field(description="Use together with `filters[location_id]` ")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_only_current_revision: Optional[StrictInt] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_response: Optional[StrictStr] = None,
        filters_responsible_contractor_id: Annotated[Optional[StrictInt], Field(description="Responsible Contractor ID")] = None,
        filters_spec_division: Optional[StrictStr] = None,
        filters_spec_section_id: Optional[StrictStr] = None,
        filters_start_date: Optional[date] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_submittal_type: Optional[StrictStr] = None,
        filters_submittal_package_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RestV10SubmittalLogsGet200ResponseInner]:
        """(Deprecated) List Submittals

        This is a deprecated endpoint. Please use /submittals endpoint.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_approved_id:
        :type filters_approved_id: str
        :param filters_ball_in_court:
        :type filters_ball_in_court: str
        :param filters_date_range:
        :type filters_date_range: str
        :param filters_due_by:
        :type filters_due_by: date
        :param filters_end_date:
        :type filters_end_date: date
        :param filters_include_sublocations: Use together with `filters[location_id]` 
        :type filters_include_sublocations: bool
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_only_current_revision:
        :type filters_only_current_revision: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_response:
        :type filters_response: str
        :param filters_responsible_contractor_id: Responsible Contractor ID
        :type filters_responsible_contractor_id: int
        :param filters_spec_division:
        :type filters_spec_division: str
        :param filters_spec_section_id:
        :type filters_spec_section_id: str
        :param filters_start_date:
        :type filters_start_date: date
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_submittal_type:
        :type filters_submittal_type: str
        :param filters_submittal_package_id: Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.
        :type filters_submittal_package_id: List[int]
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/submittal_logs is deprecated.", DeprecationWarning)

        _param = self._rest_v10_submittal_logs_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_approved_id=filters_approved_id,
            filters_ball_in_court=filters_ball_in_court,
            filters_date_range=filters_date_range,
            filters_due_by=filters_due_by,
            filters_end_date=filters_end_date,
            filters_include_sublocations=filters_include_sublocations,
            filters_location_id=filters_location_id,
            filters_only_current_revision=filters_only_current_revision,
            filters_query=filters_query,
            filters_received_from_id=filters_received_from_id,
            filters_response=filters_response,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_spec_division=filters_spec_division,
            filters_spec_section_id=filters_spec_section_id,
            filters_start_date=filters_start_date,
            filters_status=filters_status,
            filters_submittal_type=filters_submittal_type,
            filters_submittal_package_id=filters_submittal_package_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10SubmittalLogsGet200ResponseInner]",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_submittal_logs_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_approved_id: Optional[StrictStr] = None,
        filters_ball_in_court: Optional[StrictStr] = None,
        filters_date_range: Optional[StrictStr] = None,
        filters_due_by: Optional[date] = None,
        filters_end_date: Optional[date] = None,
        filters_include_sublocations: Annotated[Optional[StrictBool], Field(description="Use together with `filters[location_id]` ")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_only_current_revision: Optional[StrictInt] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_response: Optional[StrictStr] = None,
        filters_responsible_contractor_id: Annotated[Optional[StrictInt], Field(description="Responsible Contractor ID")] = None,
        filters_spec_division: Optional[StrictStr] = None,
        filters_spec_section_id: Optional[StrictStr] = None,
        filters_start_date: Optional[date] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_submittal_type: Optional[StrictStr] = None,
        filters_submittal_package_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RestV10SubmittalLogsGet200ResponseInner]]:
        """(Deprecated) List Submittals

        This is a deprecated endpoint. Please use /submittals endpoint.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_approved_id:
        :type filters_approved_id: str
        :param filters_ball_in_court:
        :type filters_ball_in_court: str
        :param filters_date_range:
        :type filters_date_range: str
        :param filters_due_by:
        :type filters_due_by: date
        :param filters_end_date:
        :type filters_end_date: date
        :param filters_include_sublocations: Use together with `filters[location_id]` 
        :type filters_include_sublocations: bool
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_only_current_revision:
        :type filters_only_current_revision: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_response:
        :type filters_response: str
        :param filters_responsible_contractor_id: Responsible Contractor ID
        :type filters_responsible_contractor_id: int
        :param filters_spec_division:
        :type filters_spec_division: str
        :param filters_spec_section_id:
        :type filters_spec_section_id: str
        :param filters_start_date:
        :type filters_start_date: date
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_submittal_type:
        :type filters_submittal_type: str
        :param filters_submittal_package_id: Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.
        :type filters_submittal_package_id: List[int]
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/submittal_logs is deprecated.", DeprecationWarning)

        _param = self._rest_v10_submittal_logs_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_approved_id=filters_approved_id,
            filters_ball_in_court=filters_ball_in_court,
            filters_date_range=filters_date_range,
            filters_due_by=filters_due_by,
            filters_end_date=filters_end_date,
            filters_include_sublocations=filters_include_sublocations,
            filters_location_id=filters_location_id,
            filters_only_current_revision=filters_only_current_revision,
            filters_query=filters_query,
            filters_received_from_id=filters_received_from_id,
            filters_response=filters_response,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_spec_division=filters_spec_division,
            filters_spec_section_id=filters_spec_section_id,
            filters_start_date=filters_start_date,
            filters_status=filters_status,
            filters_submittal_type=filters_submittal_type,
            filters_submittal_package_id=filters_submittal_package_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10SubmittalLogsGet200ResponseInner]",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_submittal_logs_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        filters_approved_id: Optional[StrictStr] = None,
        filters_ball_in_court: Optional[StrictStr] = None,
        filters_date_range: Optional[StrictStr] = None,
        filters_due_by: Optional[date] = None,
        filters_end_date: Optional[date] = None,
        filters_include_sublocations: Annotated[Optional[StrictBool], Field(description="Use together with `filters[location_id]` ")] = None,
        filters_location_id: Annotated[Optional[List[StrictInt]], Field(description="Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.")] = None,
        filters_only_current_revision: Optional[StrictInt] = None,
        filters_query: Annotated[Optional[StrictStr], Field(description="Return item(s) containing search query")] = None,
        filters_received_from_id: Annotated[Optional[StrictInt], Field(description="Received From ID")] = None,
        filters_response: Optional[StrictStr] = None,
        filters_responsible_contractor_id: Annotated[Optional[StrictInt], Field(description="Responsible Contractor ID")] = None,
        filters_spec_division: Optional[StrictStr] = None,
        filters_spec_section_id: Optional[StrictStr] = None,
        filters_start_date: Optional[date] = None,
        filters_status: Annotated[Optional[List[StrictStr]], Field(description="Returns item(s) matching the specified status value.")] = None,
        filters_submittal_type: Optional[StrictStr] = None,
        filters_submittal_package_id: Annotated[Optional[List[StrictInt]], Field(description="Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Elements per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) List Submittals

        This is a deprecated endpoint. Please use /submittals endpoint.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param filters_approved_id:
        :type filters_approved_id: str
        :param filters_ball_in_court:
        :type filters_ball_in_court: str
        :param filters_date_range:
        :type filters_date_range: str
        :param filters_due_by:
        :type filters_due_by: date
        :param filters_end_date:
        :type filters_end_date: date
        :param filters_include_sublocations: Use together with `filters[location_id]` 
        :type filters_include_sublocations: bool
        :param filters_location_id: Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
        :type filters_location_id: List[int]
        :param filters_only_current_revision:
        :type filters_only_current_revision: int
        :param filters_query: Return item(s) containing search query
        :type filters_query: str
        :param filters_received_from_id: Received From ID
        :type filters_received_from_id: int
        :param filters_response:
        :type filters_response: str
        :param filters_responsible_contractor_id: Responsible Contractor ID
        :type filters_responsible_contractor_id: int
        :param filters_spec_division:
        :type filters_spec_division: str
        :param filters_spec_section_id:
        :type filters_spec_section_id: str
        :param filters_start_date:
        :type filters_start_date: date
        :param filters_status: Returns item(s) matching the specified status value.
        :type filters_status: List[str]
        :param filters_submittal_type:
        :type filters_submittal_type: str
        :param filters_submittal_package_id: Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.
        :type filters_submittal_package_id: List[int]
        :param page: Page
        :type page: int
        :param per_page: Elements per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/submittal_logs is deprecated.", DeprecationWarning)

        _param = self._rest_v10_submittal_logs_get_serialize(
            procore_company_id=procore_company_id,
            project_id=project_id,
            filters_approved_id=filters_approved_id,
            filters_ball_in_court=filters_ball_in_court,
            filters_date_range=filters_date_range,
            filters_due_by=filters_due_by,
            filters_end_date=filters_end_date,
            filters_include_sublocations=filters_include_sublocations,
            filters_location_id=filters_location_id,
            filters_only_current_revision=filters_only_current_revision,
            filters_query=filters_query,
            filters_received_from_id=filters_received_from_id,
            filters_response=filters_response,
            filters_responsible_contractor_id=filters_responsible_contractor_id,
            filters_spec_division=filters_spec_division,
            filters_spec_section_id=filters_spec_section_id,
            filters_start_date=filters_start_date,
            filters_status=filters_status,
            filters_submittal_type=filters_submittal_type,
            filters_submittal_package_id=filters_submittal_package_id,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RestV10SubmittalLogsGet200ResponseInner]",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_submittal_logs_get_serialize(
        self,
        procore_company_id,
        project_id,
        filters_approved_id,
        filters_ball_in_court,
        filters_date_range,
        filters_due_by,
        filters_end_date,
        filters_include_sublocations,
        filters_location_id,
        filters_only_current_revision,
        filters_query,
        filters_received_from_id,
        filters_response,
        filters_responsible_contractor_id,
        filters_spec_division,
        filters_spec_section_id,
        filters_start_date,
        filters_status,
        filters_submittal_type,
        filters_submittal_package_id,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters[location_id]': 'csv',
            'filters[status]': 'csv',
            'filters[submittal_package_id]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if filters_approved_id is not None:
            
            _query_params.append(('filters[approved_id]', filters_approved_id))
            
        if filters_ball_in_court is not None:
            
            _query_params.append(('filters[ball_in_court]', filters_ball_in_court))
            
        if filters_date_range is not None:
            
            _query_params.append(('filters[date_range]', filters_date_range))
            
        if filters_due_by is not None:
            if isinstance(filters_due_by, date):
                _query_params.append(
                    (
                        'filters[due_by]',
                        filters_due_by.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[due_by]', filters_due_by))
            
        if filters_end_date is not None:
            if isinstance(filters_end_date, date):
                _query_params.append(
                    (
                        'filters[end_date]',
                        filters_end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[end_date]', filters_end_date))
            
        if filters_include_sublocations is not None:
            
            _query_params.append(('filters[include_sublocations]', filters_include_sublocations))
            
        if filters_location_id is not None:
            
            _query_params.append(('filters[location_id]', filters_location_id))
            
        if filters_only_current_revision is not None:
            
            _query_params.append(('filters[only_current_revision]', filters_only_current_revision))
            
        if filters_query is not None:
            
            _query_params.append(('filters[query]', filters_query))
            
        if filters_received_from_id is not None:
            
            _query_params.append(('filters[received_from_id]', filters_received_from_id))
            
        if filters_response is not None:
            
            _query_params.append(('filters[response]', filters_response))
            
        if filters_responsible_contractor_id is not None:
            
            _query_params.append(('filters[responsible_contractor_id]', filters_responsible_contractor_id))
            
        if filters_spec_division is not None:
            
            _query_params.append(('filters[spec_division]', filters_spec_division))
            
        if filters_spec_section_id is not None:
            
            _query_params.append(('filters[spec_section_id]', filters_spec_section_id))
            
        if filters_start_date is not None:
            if isinstance(filters_start_date, date):
                _query_params.append(
                    (
                        'filters[start_date]',
                        filters_start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filters[start_date]', filters_start_date))
            
        if filters_status is not None:
            
            _query_params.append(('filters[status]', filters_status))
            
        if filters_submittal_type is not None:
            
            _query_params.append(('filters[submittal_type]', filters_submittal_type))
            
        if filters_submittal_package_id is not None:
            
            _query_params.append(('filters[submittal_package_id]', filters_submittal_package_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/submittal_logs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rest_v10_submittal_logs_id_get(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of Submittal")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RestV10SubmittalLogsIdGet200Response:
        """(Deprecated) Show Submittal

        This is a deprecated endpoint. Please use /submittals/{id} endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of Submittal (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/submittal_logs/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_submittal_logs_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10SubmittalLogsIdGet200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rest_v10_submittal_logs_id_get_with_http_info(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of Submittal")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RestV10SubmittalLogsIdGet200Response]:
        """(Deprecated) Show Submittal

        This is a deprecated endpoint. Please use /submittals/{id} endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of Submittal (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/submittal_logs/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_submittal_logs_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10SubmittalLogsIdGet200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rest_v10_submittal_logs_id_get_without_preload_content(
        self,
        procore_company_id: Annotated[StrictInt, Field(description="Unique company identifier associated with the Procore User Account.")],
        id: Annotated[StrictInt, Field(description="ID of Submittal")],
        project_id: Annotated[StrictInt, Field(description="Unique identifier for the project.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Show Submittal

        This is a deprecated endpoint. Please use /submittals/{id} endpoint.

        :param procore_company_id: Unique company identifier associated with the Procore User Account. (required)
        :type procore_company_id: int
        :param id: ID of Submittal (required)
        :type id: int
        :param project_id: Unique identifier for the project. (required)
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /rest/v1.0/submittal_logs/{id} is deprecated.", DeprecationWarning)

        _param = self._rest_v10_submittal_logs_id_get_serialize(
            procore_company_id=procore_company_id,
            id=id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RestV10SubmittalLogsIdGet200Response",
            '400': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '401': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
            '403': "RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rest_v10_submittal_logs_id_get_serialize(
        self,
        procore_company_id,
        id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        # process the header parameters
        if procore_company_id is not None:
            _header_params['Procore-Company-Id'] = procore_company_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rest/v1.0/submittal_logs/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


