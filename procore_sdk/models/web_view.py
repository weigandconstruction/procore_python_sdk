# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.compact import Compact
from procore_sdk.models.extended_view_work_classification import ExtendedViewWorkClassification
from procore_sdk.models.web_view_permission_template import WebViewPermissionTemplate
from typing import Optional, Set
from typing_extensions import Self

class WebView(BaseModel):
    """
    Project Person
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="Project Person first name")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the Project Person.")
    is_employee: Optional[StrictBool] = Field(default=None, description="Employee status for the Project Person")
    last_name: Optional[StrictStr] = Field(default=None, description="Project Person last name")
    user_id: Optional[StrictInt] = Field(default=None, description="User ID if this Project Person represents a User. NULL for a Reference User.")
    origin_id: Optional[StrictInt] = Field(default=None, description="The ID of the External Data associated with the Project Person")
    work_classification: Optional[ExtendedViewWorkClassification] = None
    vendor: Optional[Compact] = None
    initials: Optional[StrictStr] = Field(default=None, description="Initials of the Project Person")
    avatar: Optional[StrictStr] = Field(default=None, description="URL to the avatar of the Project Person")
    reference_user: Optional[StrictBool] = Field(default=None, description="Whether the Project Person is a Reference User")
    created_at: Optional[datetime] = Field(default=None, description="Date and time the Project Person was created")
    updated_at: Optional[datetime] = Field(default=None, description="Date and time the Project Person was last updated")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the Project Person")
    mobile_phone: Optional[StrictStr] = Field(default=None, description="The mobile phone number of the Project Person")
    business_phone: Optional[StrictStr] = Field(default=None, description="The business phone number of the Project Person")
    job_title: Optional[StrictStr] = Field(default=None, description="The job title of the Project Person")
    fax_number: Optional[StrictStr] = Field(default=None, description="The fax number of the Project Person")
    address: Optional[StrictStr] = Field(default=None, description="The address of the Project Person")
    city: Optional[StrictStr] = Field(default=None, description="The city of the Project Person")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code of the Project Person")
    state_code: Optional[StrictStr] = Field(default=None, description="The state code of the Project Person")
    zip: Optional[StrictStr] = Field(default=None, description="The zip code of the Project Person")
    connected: Optional[StrictBool] = Field(default=None, description="Whether the Project Person is connected to the user")
    last_login_at: Optional[datetime] = Field(default=None, description="Date and time the Project Person last logged in")
    welcome_email_sent_at: Optional[datetime] = Field(default=None, description="Date and time the welcome email was sent to the Project Person")
    erp_integrated_accountant: Optional[StrictBool] = Field(default=None, description="Whether the Project Person is an ERP Integrated Accountant")
    permission_template: Optional[WebViewPermissionTemplate] = None
    __properties: ClassVar[List[str]] = ["first_name", "id", "is_employee", "last_name", "user_id", "origin_id", "work_classification", "vendor", "initials", "avatar", "reference_user", "created_at", "updated_at", "email", "mobile_phone", "business_phone", "job_title", "fax_number", "address", "city", "country_code", "state_code", "zip", "connected", "last_login_at", "welcome_email_sent_at", "erp_integrated_accountant", "permission_template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of work_classification
        if self.work_classification:
            _dict['work_classification'] = self.work_classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permission_template
        if self.permission_template:
            _dict['permission_template'] = self.permission_template.to_dict()
        # set to None if is_employee (nullable) is None
        # and model_fields_set contains the field
        if self.is_employee is None and "is_employee" in self.model_fields_set:
            _dict['is_employee'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "is_employee": obj.get("is_employee"),
            "last_name": obj.get("last_name"),
            "user_id": obj.get("user_id"),
            "origin_id": obj.get("origin_id"),
            "work_classification": ExtendedViewWorkClassification.from_dict(obj["work_classification"]) if obj.get("work_classification") is not None else None,
            "vendor": Compact.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "initials": obj.get("initials"),
            "avatar": obj.get("avatar"),
            "reference_user": obj.get("reference_user"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "email": obj.get("email"),
            "mobile_phone": obj.get("mobile_phone"),
            "business_phone": obj.get("business_phone"),
            "job_title": obj.get("job_title"),
            "fax_number": obj.get("fax_number"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "country_code": obj.get("country_code"),
            "state_code": obj.get("state_code"),
            "zip": obj.get("zip"),
            "connected": obj.get("connected"),
            "last_login_at": obj.get("last_login_at"),
            "welcome_email_sent_at": obj.get("welcome_email_sent_at"),
            "erp_integrated_accountant": obj.get("erp_integrated_accountant"),
            "permission_template": WebViewPermissionTemplate.from_dict(obj["permission_template"]) if obj.get("permission_template") is not None else None
        })
        return _obj


