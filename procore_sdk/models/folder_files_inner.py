# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.folder_files_inner_file_versions_inner import FolderFilesInnerFileVersionsInner
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from typing import Optional, Set
from typing_extensions import Self

class FolderFilesInner(BaseModel):
    """
    FolderFilesInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the file.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the file.")
    parent_id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the file parent.")
    size: Optional[StrictInt] = Field(default=None, description="File size in bytes.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the file.")
    updated_at: Optional[datetime] = Field(default=None, description="File updated datetime in ISO8601 format.")
    created_at: Optional[datetime] = Field(default=None, description="File created datetime in ISO8601 format.")
    checked_out_until: Optional[datetime] = Field(default=None, description="File checked out until datetime in ISO8601 format.")
    name_with_path: Optional[StrictStr] = Field(default=None, description="Full file path with filename.")
    private: Optional[StrictBool] = Field(default=None, description="File private status")
    is_tracked: Optional[StrictBool] = Field(default=None, description="If true, file is being tracked.")
    tracked_folder: Optional[Dict[str, Any]] = Field(default=None, description="Folder watchers")
    checked_out_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    file_type: Optional[StrictStr] = Field(default=None, description="Type of the file.")
    file_versions: Optional[List[FolderFilesInnerFileVersionsInner]] = None
    legacy_id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the legacy file.")
    is_deleted: Optional[StrictBool] = Field(default=None, description="If true, file is in the recycle bin.")
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "name", "parent_id", "size", "description", "updated_at", "created_at", "checked_out_until", "name_with_path", "private", "is_tracked", "tracked_folder", "checked_out_by", "file_type", "file_versions", "legacy_id", "is_deleted", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FolderFilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checked_out_by
        if self.checked_out_by:
            _dict['checked_out_by'] = self.checked_out_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in file_versions (list)
        _items = []
        if self.file_versions:
            for _item_file_versions in self.file_versions:
                if _item_file_versions:
                    _items.append(_item_file_versions.to_dict())
            _dict['file_versions'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if tracked_folder (nullable) is None
        # and model_fields_set contains the field
        if self.tracked_folder is None and "tracked_folder" in self.model_fields_set:
            _dict['tracked_folder'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FolderFilesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "parent_id": obj.get("parent_id"),
            "size": obj.get("size"),
            "description": obj.get("description"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "checked_out_until": obj.get("checked_out_until"),
            "name_with_path": obj.get("name_with_path"),
            "private": obj.get("private"),
            "is_tracked": obj.get("is_tracked"),
            "tracked_folder": obj.get("tracked_folder"),
            "checked_out_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["checked_out_by"]) if obj.get("checked_out_by") is not None else None,
            "file_type": obj.get("file_type"),
            "file_versions": [FolderFilesInnerFileVersionsInner.from_dict(_item) for _item in obj["file_versions"]] if obj.get("file_versions") is not None else None,
            "legacy_id": obj.get("legacy_id"),
            "is_deleted": obj.get("is_deleted"),
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


