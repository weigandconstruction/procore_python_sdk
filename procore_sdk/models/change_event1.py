# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.change_event_attachments_by_drawing_revision_inner import ChangeEventAttachmentsByDrawingRevisionInner
from procore_sdk.models.change_event_attachments_by_uuid_inner import ChangeEventAttachmentsByUuidInner
from procore_sdk.models.change_event_line_item1 import ChangeEventLineItem1
from typing import Optional, Set
from typing_extensions import Self

class ChangeEvent1(BaseModel):
    """
    ChangeEvent1
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Title")
    number: Optional[StrictStr] = Field(default=None, description="Number")
    status: Optional[StrictStr] = Field(default=None, description="DEPRECATED: Use :change_event_status_id. Status")
    change_event_status_id: Optional[StrictInt] = Field(default=None, description="Change Event Status ID")
    change_order_change_reason_id: Optional[StrictInt] = Field(default=None, description="Change Order Change Reason ID")
    event_scope: Optional[StrictStr] = Field(default=None, description="Event Scope")
    event_type: Optional[StrictStr] = Field(default=None, description="Event Type")
    origin_data: Optional[StrictStr] = Field(default=None, description="Origin data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Origin ID")
    rfi_id: Optional[StrictInt] = Field(default=None, description="RFI ID")
    change_event_line_items_attributes: Optional[List[ChangeEventLineItem1]] = Field(default=None, description="Change Event Line Items")
    attachments_by_drawing_revision: Optional[List[ChangeEventAttachmentsByDrawingRevisionInner]] = None
    attachments_by_file_version: Optional[List[ChangeEventAttachmentsByDrawingRevisionInner]] = None
    attachments_by_form: Optional[List[ChangeEventAttachmentsByDrawingRevisionInner]] = None
    attachments_by_image: Optional[List[ChangeEventAttachmentsByDrawingRevisionInner]] = None
    attachments_by_uuid: Optional[List[ChangeEventAttachmentsByUuidInner]] = None
    __properties: ClassVar[List[str]] = ["title", "number", "status", "change_event_status_id", "change_order_change_reason_id", "event_scope", "event_type", "origin_data", "origin_id", "rfi_id", "change_event_line_items_attributes", "attachments_by_drawing_revision", "attachments_by_file_version", "attachments_by_form", "attachments_by_image", "attachments_by_uuid"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'closed']):
            raise ValueError("must be one of enum values ('open', 'closed')")
        return value

    @field_validator('event_scope')
    def event_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tbd', 'in_scope', 'out_of_scope']):
            raise ValueError("must be one of enum values ('tbd', 'in_scope', 'out_of_scope')")
        return value

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tbd', 'allowance', 'contingency', 'owner_change', 'transfer']):
            raise ValueError("must be one of enum values ('tbd', 'allowance', 'contingency', 'owner_change', 'transfer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeEvent1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in change_event_line_items_attributes (list)
        _items = []
        if self.change_event_line_items_attributes:
            for _item_change_event_line_items_attributes in self.change_event_line_items_attributes:
                if _item_change_event_line_items_attributes:
                    _items.append(_item_change_event_line_items_attributes.to_dict())
            _dict['change_event_line_items_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments_by_drawing_revision (list)
        _items = []
        if self.attachments_by_drawing_revision:
            for _item_attachments_by_drawing_revision in self.attachments_by_drawing_revision:
                if _item_attachments_by_drawing_revision:
                    _items.append(_item_attachments_by_drawing_revision.to_dict())
            _dict['attachments_by_drawing_revision'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments_by_file_version (list)
        _items = []
        if self.attachments_by_file_version:
            for _item_attachments_by_file_version in self.attachments_by_file_version:
                if _item_attachments_by_file_version:
                    _items.append(_item_attachments_by_file_version.to_dict())
            _dict['attachments_by_file_version'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments_by_form (list)
        _items = []
        if self.attachments_by_form:
            for _item_attachments_by_form in self.attachments_by_form:
                if _item_attachments_by_form:
                    _items.append(_item_attachments_by_form.to_dict())
            _dict['attachments_by_form'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments_by_image (list)
        _items = []
        if self.attachments_by_image:
            for _item_attachments_by_image in self.attachments_by_image:
                if _item_attachments_by_image:
                    _items.append(_item_attachments_by_image.to_dict())
            _dict['attachments_by_image'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments_by_uuid (list)
        _items = []
        if self.attachments_by_uuid:
            for _item_attachments_by_uuid in self.attachments_by_uuid:
                if _item_attachments_by_uuid:
                    _items.append(_item_attachments_by_uuid.to_dict())
            _dict['attachments_by_uuid'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeEvent1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "change_event_status_id": obj.get("change_event_status_id"),
            "change_order_change_reason_id": obj.get("change_order_change_reason_id"),
            "event_scope": obj.get("event_scope"),
            "event_type": obj.get("event_type"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "rfi_id": obj.get("rfi_id"),
            "change_event_line_items_attributes": [ChangeEventLineItem1.from_dict(_item) for _item in obj["change_event_line_items_attributes"]] if obj.get("change_event_line_items_attributes") is not None else None,
            "attachments_by_drawing_revision": [ChangeEventAttachmentsByDrawingRevisionInner.from_dict(_item) for _item in obj["attachments_by_drawing_revision"]] if obj.get("attachments_by_drawing_revision") is not None else None,
            "attachments_by_file_version": [ChangeEventAttachmentsByDrawingRevisionInner.from_dict(_item) for _item in obj["attachments_by_file_version"]] if obj.get("attachments_by_file_version") is not None else None,
            "attachments_by_form": [ChangeEventAttachmentsByDrawingRevisionInner.from_dict(_item) for _item in obj["attachments_by_form"]] if obj.get("attachments_by_form") is not None else None,
            "attachments_by_image": [ChangeEventAttachmentsByDrawingRevisionInner.from_dict(_item) for _item in obj["attachments_by_image"]] if obj.get("attachments_by_image") is not None else None,
            "attachments_by_uuid": [ChangeEventAttachmentsByUuidInner.from_dict(_item) for _item in obj["attachments_by_uuid"]] if obj.get("attachments_by_uuid") is not None else None
        })
        return _obj


