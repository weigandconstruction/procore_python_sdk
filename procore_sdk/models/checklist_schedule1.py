# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ChecklistSchedule1(BaseModel):
    """
    Checklist Schedule object
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name for the Checklist Schedule.")
    days_created_before_due_date: Optional[StrictInt] = Field(default=None, description="The number of days an Inspection is to be created before the due date")
    inspection_template_id: Optional[StrictInt] = Field(default=None, description="The ID of the Inspection Template to create the Schedule from.")
    first_inspection_due_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the first Inspection in the Schedule should be due. Cannot be in the past.")
    ends_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the last Inspection in the Schedule should be due. Not used when frequency is once.")
    frequency: Optional[StrictStr] = Field(default=None, description="The frequency at which Inspections will be created by the Schedule.")
    location_id: Optional[StrictInt] = Field(default=None, description="The ID of the Location to set on the Schedule.")
    point_of_contact_id: Optional[StrictInt] = Field(default=None, description="The ID of a User to be set as the of the point of contact on the Schedule")
    responsible_contractor_id: Optional[StrictInt] = Field(default=None, description="The ID of a vendor to set as the responsible contractor on the Schedule.")
    specification_section_id: Optional[StrictInt] = Field(default=None, description="The ID of the specification section to set on the Schedule.")
    assignee_ids: Optional[List[StrictInt]] = None
    distribution_member_ids: Optional[List[StrictInt]] = None
    __properties: ClassVar[List[str]] = ["name", "days_created_before_due_date", "inspection_template_id", "first_inspection_due_at", "ends_at", "frequency", "location_id", "point_of_contact_id", "responsible_contractor_id", "specification_section_id", "assignee_ids", "distribution_member_ids"]

    @field_validator('frequency')
    def frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['once', 'once_every_two_weeks', 'daily', 'weekly', 'monthly', 'yearly']):
            raise ValueError("must be one of enum values ('once', 'once_every_two_weeks', 'daily', 'weekly', 'monthly', 'yearly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChecklistSchedule1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChecklistSchedule1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "days_created_before_due_date": obj.get("days_created_before_due_date"),
            "inspection_template_id": obj.get("inspection_template_id"),
            "first_inspection_due_at": obj.get("first_inspection_due_at"),
            "ends_at": obj.get("ends_at"),
            "frequency": obj.get("frequency"),
            "location_id": obj.get("location_id"),
            "point_of_contact_id": obj.get("point_of_contact_id"),
            "responsible_contractor_id": obj.get("responsible_contractor_id"),
            "specification_section_id": obj.get("specification_section_id"),
            "assignee_ids": obj.get("assignee_ids"),
            "distribution_member_ids": obj.get("distribution_member_ids")
        })
        return _obj


