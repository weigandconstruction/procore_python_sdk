# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomFieldDefinition(BaseModel):
    """
    CustomFieldDefinition
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Custom Field Definition ID")
    label: Optional[StrictStr] = Field(default=None, description="Custom Field Definition Label")
    active: Optional[StrictBool] = Field(default=None, description="Whether or not the Custom Field Definition is active")
    company_id: Optional[StrictInt] = Field(default=None, description="Company ID")
    data_type: Optional[StrictStr] = Field(default=None, description="Type of Custom field")
    variant: Optional[StrictStr] = Field(default=None, description="The variant type of the Custom Field")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    default_value: Optional[StrictStr] = Field(default=None, description="Text displayed on Read Only variant")
    configurable_field_sets_count: Optional[StrictInt] = Field(default=None, description="Number of Configurable Field Sets associated with the Custom Field")
    __properties: ClassVar[List[str]] = ["id", "label", "active", "company_id", "data_type", "variant", "description", "default_value", "configurable_field_sets_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomFieldDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if variant (nullable) is None
        # and model_fields_set contains the field
        if self.variant is None and "variant" in self.model_fields_set:
            _dict['variant'] = None

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['default_value'] = None

        # set to None if configurable_field_sets_count (nullable) is None
        # and model_fields_set contains the field
        if self.configurable_field_sets_count is None and "configurable_field_sets_count" in self.model_fields_set:
            _dict['configurable_field_sets_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomFieldDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "label": obj.get("label"),
            "active": obj.get("active"),
            "company_id": obj.get("company_id"),
            "data_type": obj.get("data_type"),
            "variant": obj.get("variant"),
            "description": obj.get("description"),
            "default_value": obj.get("default_value"),
            "configurable_field_sets_count": obj.get("configurable_field_sets_count")
        })
        return _obj


