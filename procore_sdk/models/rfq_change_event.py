# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rfq_change_event_change_event_line_items_inner import RFQChangeEventChangeEventLineItemsInner
from procore_sdk.models.rfq_change_event_change_event_status import RFQChangeEventChangeEventStatus
from procore_sdk.models.rfq_change_event_change_order_change_reason import RFQChangeEventChangeOrderChangeReason
from procore_sdk.models.rfq_change_event_rfi import RFQChangeEventRfi
from procore_sdk.models.rfq_quote_attachments_inner import RFQQuoteAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class RFQChangeEvent(BaseModel):
    """
    RFQChangeEvent
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    number: Optional[StrictInt] = Field(default=None, description="Number with alpha characters stripped out")
    alphanumeric_number: Optional[StrictStr] = Field(default=None, description="Number including alpha characters")
    origin_data: Optional[StrictStr] = Field(default=None, description="Origin data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Origin ID")
    title: Optional[StrictStr] = Field(default=None, description="Title")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    project_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    event_type: Optional[StrictStr] = Field(default=None, description="Event type")
    event_scope: Optional[StrictStr] = Field(default=None, description="Event scope")
    change_event_origin_id: Optional[StrictInt] = Field(default=None, description="Origin ID")
    change_event_origin_type: Optional[StrictStr] = Field(default=None, description="Origin type")
    rfi: Optional[RFQChangeEventRfi] = None
    change_event_line_items: Optional[List[RFQChangeEventChangeEventLineItemsInner]] = None
    change_order_change_reason: Optional[RFQChangeEventChangeOrderChangeReason] = None
    change_event_status: Optional[RFQChangeEventChangeEventStatus] = None
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    attachments: Optional[List[RFQQuoteAttachmentsInner]] = None
    __properties: ClassVar[List[str]] = ["id", "number", "alphanumeric_number", "origin_data", "origin_id", "title", "description", "status", "project_id", "created_at", "updated_at", "event_type", "event_scope", "change_event_origin_id", "change_event_origin_type", "rfi", "change_event_line_items", "change_order_change_reason", "change_event_status", "created_by", "attachments"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tbd', 'allowance', 'contingency', 'owner_change', 'transfer']):
            raise ValueError("must be one of enum values ('tbd', 'allowance', 'contingency', 'owner_change', 'transfer')")
        return value

    @field_validator('event_scope')
    def event_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tbd', 'in_scope', 'out_of_scope']):
            raise ValueError("must be one of enum values ('tbd', 'in_scope', 'out_of_scope')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RFQChangeEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rfi
        if self.rfi:
            _dict['rfi'] = self.rfi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in change_event_line_items (list)
        _items = []
        if self.change_event_line_items:
            for _item_change_event_line_items in self.change_event_line_items:
                if _item_change_event_line_items:
                    _items.append(_item_change_event_line_items.to_dict())
            _dict['change_event_line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of change_order_change_reason
        if self.change_order_change_reason:
            _dict['change_order_change_reason'] = self.change_order_change_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_event_status
        if self.change_event_status:
            _dict['change_event_status'] = self.change_event_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RFQChangeEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "alphanumeric_number": obj.get("alphanumeric_number"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "project_id": obj.get("project_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "event_type": obj.get("event_type"),
            "event_scope": obj.get("event_scope"),
            "change_event_origin_id": obj.get("change_event_origin_id"),
            "change_event_origin_type": obj.get("change_event_origin_type"),
            "rfi": RFQChangeEventRfi.from_dict(obj["rfi"]) if obj.get("rfi") is not None else None,
            "change_event_line_items": [RFQChangeEventChangeEventLineItemsInner.from_dict(_item) for _item in obj["change_event_line_items"]] if obj.get("change_event_line_items") is not None else None,
            "change_order_change_reason": RFQChangeEventChangeOrderChangeReason.from_dict(obj["change_order_change_reason"]) if obj.get("change_order_change_reason") is not None else None,
            "change_event_status": RFQChangeEventChangeEventStatus.from_dict(obj["change_event_status"]) if obj.get("change_event_status") is not None else None,
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "attachments": [RFQQuoteAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


