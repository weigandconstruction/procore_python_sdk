# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.bim_file_extraction_item_artifact_web_format_cell_file import BIMFileExtractionItemArtifactWebFormatCellFile
from typing import Optional, Set
from typing_extensions import Self

class BIMFileExtractionItemArtifactWebFormat(BaseModel):
    """
    BIMFileExtractionItemArtifactWebFormat
    """ # noqa: E501
    cell_file: Optional[BIMFileExtractionItemArtifactWebFormatCellFile] = None
    node_file: Optional[BIMFileExtractionItemArtifactWebFormatCellFile] = None
    mesh_node_file: Optional[BIMFileExtractionItemArtifactWebFormatCellFile] = None
    mesh_file: Optional[BIMFileExtractionItemArtifactWebFormatCellFile] = None
    manifest_file: Optional[BIMFileExtractionItemArtifactWebFormatCellFile] = None
    __properties: ClassVar[List[str]] = ["cell_file", "node_file", "mesh_node_file", "mesh_file", "manifest_file"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMFileExtractionItemArtifactWebFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cell_file
        if self.cell_file:
            _dict['cell_file'] = self.cell_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_file
        if self.node_file:
            _dict['node_file'] = self.node_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mesh_node_file
        if self.mesh_node_file:
            _dict['mesh_node_file'] = self.mesh_node_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mesh_file
        if self.mesh_file:
            _dict['mesh_file'] = self.mesh_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manifest_file
        if self.manifest_file:
            _dict['manifest_file'] = self.manifest_file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMFileExtractionItemArtifactWebFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cell_file": BIMFileExtractionItemArtifactWebFormatCellFile.from_dict(obj["cell_file"]) if obj.get("cell_file") is not None else None,
            "node_file": BIMFileExtractionItemArtifactWebFormatCellFile.from_dict(obj["node_file"]) if obj.get("node_file") is not None else None,
            "mesh_node_file": BIMFileExtractionItemArtifactWebFormatCellFile.from_dict(obj["mesh_node_file"]) if obj.get("mesh_node_file") is not None else None,
            "mesh_file": BIMFileExtractionItemArtifactWebFormatCellFile.from_dict(obj["mesh_file"]) if obj.get("mesh_file") is not None else None,
            "manifest_file": BIMFileExtractionItemArtifactWebFormatCellFile.from_dict(obj["manifest_file"]) if obj.get("manifest_file") is not None else None
        })
        return _obj


