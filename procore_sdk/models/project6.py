# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.project6_address import Project6Address
from procore_sdk.models.project6_created_by import Project6CreatedBy
from procore_sdk.models.project6_open_items_inner import Project6OpenItemsInner
from typing import Optional, Set
from typing_extensions import Self

class Project6(BaseModel):
    """
    Project6
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Project ID")
    name: Optional[StrictStr] = Field(default=None, description="Project name")
    address: Optional[Project6Address] = None
    stage_name: Optional[StrictStr] = Field(default=None, description="Project stage")
    status_name: Optional[StrictStr] = Field(default=None, description="Project status")
    type_name: Optional[StrictStr] = Field(default=None, description="Project type")
    open_items: Optional[List[Project6OpenItemsInner]] = None
    created_by: Optional[Project6CreatedBy] = None
    __properties: ClassVar[List[str]] = ["id", "name", "address", "stage_name", "status_name", "type_name", "open_items", "created_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project6 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in open_items (list)
        _items = []
        if self.open_items:
            for _item_open_items in self.open_items:
                if _item_open_items:
                    _items.append(_item_open_items.to_dict())
            _dict['open_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if type_name (nullable) is None
        # and model_fields_set contains the field
        if self.type_name is None and "type_name" in self.model_fields_set:
            _dict['type_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project6 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address": Project6Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "stage_name": obj.get("stage_name"),
            "status_name": obj.get("status_name"),
            "type_name": obj.get("type_name"),
            "open_items": [Project6OpenItemsInner.from_dict(_item) for _item in obj["open_items"]] if obj.get("open_items") is not None else None,
            "created_by": Project6CreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None
        })
        return _obj


