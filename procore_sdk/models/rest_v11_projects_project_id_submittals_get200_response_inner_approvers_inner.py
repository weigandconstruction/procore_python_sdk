# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner_associated_attachments_inner import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerAssociatedAttachmentsInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner_response import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerResponse
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner_user import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner(BaseModel):
    """
    RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    approver_type: Optional[StrictStr] = None
    associated_attachments: Optional[List[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerAssociatedAttachmentsInner]] = None
    comment: Optional[StrictStr] = None
    due_date: Optional[date] = None
    response_required: Optional[StrictBool] = None
    response: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerResponse] = None
    returned_date: Optional[date] = None
    sent_date: Optional[date] = None
    user: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser] = None
    workflow_group_number: Optional[StrictInt] = Field(default=None, description="The step in the workflow that the approver is on")
    __properties: ClassVar[List[str]] = ["id", "approver_type", "associated_attachments", "comment", "due_date", "response_required", "response", "returned_date", "sent_date", "user", "workflow_group_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_attachments (list)
        _items = []
        if self.associated_attachments:
            for _item_associated_attachments in self.associated_attachments:
                if _item_associated_attachments:
                    _items.append(_item_associated_attachments.to_dict())
            _dict['associated_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "approver_type": obj.get("approver_type"),
            "associated_attachments": [RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerAssociatedAttachmentsInner.from_dict(_item) for _item in obj["associated_attachments"]] if obj.get("associated_attachments") is not None else None,
            "comment": obj.get("comment"),
            "due_date": obj.get("due_date"),
            "response_required": obj.get("response_required"),
            "response": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerResponse.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "returned_date": obj.get("returned_date"),
            "sent_date": obj.get("sent_date"),
            "user": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "workflow_group_number": obj.get("workflow_group_number")
        })
        return _obj


