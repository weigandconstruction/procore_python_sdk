# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdManagedEquipmentLogsPostRequestManagedEquipmentLog(BaseModel):
    """
    RestV10CompaniesCompanyIdManagedEquipmentLogsPostRequestManagedEquipmentLog
    """ # noqa: E501
    project_id: Optional[StrictInt] = Field(default=None, description="ID of the project the equipment was logged for")
    managed_equipment_id: Optional[StrictInt] = Field(default=None, description="Equipment Id the log is associated with")
    onsite: Optional[date] = Field(default=None, description="The Date equipment arrived on site")
    offsite: Optional[date] = Field(default=None, description="The Date equipment left the site")
    inspection_date: Optional[date] = Field(default=None, description="The date the equipment was inspected")
    induction_checklist_list_id: Optional[StrictInt] = Field(default=None, description="Id of the inspection list the equipment uses")
    induction_number: Optional[StrictStr] = Field(default=None, description="The number used for equipment induction")
    induction_status: Optional[StrictBool] = Field(default=None, description="Indicates if the equipemnt has been successfully inspected and allowed to perform work")
    __properties: ClassVar[List[str]] = ["project_id", "managed_equipment_id", "onsite", "offsite", "inspection_date", "induction_checklist_list_id", "induction_number", "induction_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdManagedEquipmentLogsPostRequestManagedEquipmentLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdManagedEquipmentLogsPostRequestManagedEquipmentLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "managed_equipment_id": obj.get("managed_equipment_id"),
            "onsite": obj.get("onsite"),
            "offsite": obj.get("offsite"),
            "inspection_date": obj.get("inspection_date"),
            "induction_checklist_list_id": obj.get("induction_checklist_list_id"),
            "induction_number": obj.get("induction_number"),
            "induction_status": obj.get("induction_status")
        })
        return _obj


