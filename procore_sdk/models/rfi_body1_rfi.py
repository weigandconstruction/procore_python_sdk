# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rfi_body1_rfi_question import RFIBody1RfiQuestion
from procore_sdk.models.rfi_body_rfi_cost_impact import RFIBodyRfiCostImpact
from procore_sdk.models.rfi_body_rfi_schedule_impact import RFIBodyRfiScheduleImpact
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class RFIBody1Rfi(BaseModel):
    """
    RFIBody1Rfi
    """ # noqa: E501
    subject: StrictStr = Field(description="The Subject of the RFI")
    reference: Optional[StrictStr] = Field(default=None, description="The Reference of the RFI")
    assignee_id: Optional[StrictInt] = Field(default=None, description="The ID of the Assignee User. *Only admin users can set this field DEPRECATED. Please use assignee_ids instead")
    assignee_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of IDs of the Assignees of the RFI *Only admin users can set this field **If this param is not provided, the assigned_id will be used instead")
    required_assignee_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of IDs of the Assignees that are required to respond to the RFI * Only admin users can set this field ** IDs must also be present in assignee_ids ")
    draft: Optional[StrictBool] = Field(default=False, description="The Draft status of the RFI")
    due_date: Optional[date] = Field(default=None, description="The Due Date of the RFI *Only admin users can set this field")
    received_from_login_information_id: Optional[StrictInt] = Field(default=None, description="The ID of the Received From User of the RFI")
    responsible_contractor_id: Optional[StrictInt] = Field(default=None, description="The ID of the Responsible Contractor Vendor of the RFI")
    distribution_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of IDs of the Distributions of the RFI")
    number: Optional[StrictStr] = Field(default=None, description="The Number of the RFI *This field will be auto-populated if the RFI is not draft")
    private: Optional[StrictBool] = Field(default=False, description="The Private status of the RFI")
    project_stage_id: Optional[StrictInt] = Field(default=None, description="The ID of the Project Stage of the RFI *If Number By Stage is enabled in RFI settings, this will add the prefix of the project stage to the full number of the RFI.")
    schedule_impact: Optional[RFIBodyRfiScheduleImpact] = None
    cost_impact: Optional[RFIBodyRfiCostImpact] = None
    location_id: Optional[StrictInt] = Field(default=None, description="The ID of the Location of the RFI")
    drawing_number: Optional[StrictStr] = Field(default=None, description="The Drawing Number of the RFI")
    specification_section_id: Optional[StrictInt] = Field(default=None, description="The ID of the Specification Section of the RFI")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="The ID of the Cost Code of the RFI")
    rfi_manager_id: StrictInt = Field(description="The ID of the RFI Manager User of the RFI *Only admin users (or standard users, if the project's configuration allows for it) can set this field")
    question: RFIBody1RfiQuestion
    custom_textfield_1: Optional[StrictStr] = Field(default=None, description="The Custom Textfield 1 of the RFI")
    custom_textfield_2: Optional[StrictStr] = Field(default=None, description="The Custom Textfield 2 of the RFI")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["subject", "reference", "assignee_id", "assignee_ids", "required_assignee_ids", "draft", "due_date", "received_from_login_information_id", "responsible_contractor_id", "distribution_ids", "number", "private", "project_stage_id", "schedule_impact", "cost_impact", "location_id", "drawing_number", "specification_section_id", "cost_code_id", "rfi_manager_id", "question", "custom_textfield_1", "custom_textfield_2", "custom_field_%{custom_field_definition_id}"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RFIBody1Rfi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule_impact
        if self.schedule_impact:
            _dict['schedule_impact'] = self.schedule_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_impact
        if self.cost_impact:
            _dict['cost_impact'] = self.cost_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of question
        if self.question:
            _dict['question'] = self.question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RFIBody1Rfi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subject": obj.get("subject"),
            "reference": obj.get("reference"),
            "assignee_id": obj.get("assignee_id"),
            "assignee_ids": obj.get("assignee_ids"),
            "required_assignee_ids": obj.get("required_assignee_ids"),
            "draft": obj.get("draft") if obj.get("draft") is not None else False,
            "due_date": obj.get("due_date"),
            "received_from_login_information_id": obj.get("received_from_login_information_id"),
            "responsible_contractor_id": obj.get("responsible_contractor_id"),
            "distribution_ids": obj.get("distribution_ids"),
            "number": obj.get("number"),
            "private": obj.get("private") if obj.get("private") is not None else False,
            "project_stage_id": obj.get("project_stage_id"),
            "schedule_impact": RFIBodyRfiScheduleImpact.from_dict(obj["schedule_impact"]) if obj.get("schedule_impact") is not None else None,
            "cost_impact": RFIBodyRfiCostImpact.from_dict(obj["cost_impact"]) if obj.get("cost_impact") is not None else None,
            "location_id": obj.get("location_id"),
            "drawing_number": obj.get("drawing_number"),
            "specification_section_id": obj.get("specification_section_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "rfi_manager_id": obj.get("rfi_manager_id"),
            "question": RFIBody1RfiQuestion.from_dict(obj["question"]) if obj.get("question") is not None else None,
            "custom_textfield_1": obj.get("custom_textfield_1"),
            "custom_textfield_2": obj.get("custom_textfield_2"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


