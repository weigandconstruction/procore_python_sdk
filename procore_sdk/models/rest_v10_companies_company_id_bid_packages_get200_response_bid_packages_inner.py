# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v10_companies_company_id_bid_packages_get200_response_bid_packages_inner_links import RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInnerLinks
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInner(BaseModel):
    """
    RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    project_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    bid_due_date: Optional[datetime] = Field(default=None, description="Due date")
    number: Optional[StrictInt] = Field(default=None, description="Bid Package Number")
    title: Optional[StrictStr] = Field(default=None, description="Title")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of bid package project")
    project_location: Optional[StrictStr] = Field(default=None, description="Address of bid package project")
    accounting_method: Optional[StrictStr] = Field(default=None, description="Bid package accounting method, either 'amount' or 'unit'")
    formatted_bid_due_date: Optional[StrictStr] = Field(default=None, description="This is the date at which bids are due for this bid package")
    links: Optional[RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInnerLinks] = None
    allow_bidder_sum: Optional[StrictBool] = Field(default=None, description="TODO")
    accept_post_due_submissions: Optional[StrictBool] = None
    sealed: Optional[StrictBool] = None
    bid_invites_sent_count: Optional[Union[StrictFloat, StrictInt]] = None
    bids_received_count: Optional[Union[StrictFloat, StrictInt]] = None
    enable_prebid_walkthrough: Optional[StrictBool] = None
    enable_prebid_rfi_deadline: Optional[StrictBool] = None
    pre_bid_rfi_deadline_date: Optional[StrictStr] = None
    formatted_bid_web_message: Optional[StrictStr] = None
    formatted_bid_email_message: Optional[StrictStr] = None
    formatted_pre_bid_walk_through_notes: Optional[StrictStr] = None
    has_bid_docs: Optional[StrictBool] = None
    user_bid_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "project_id", "bid_due_date", "number", "title", "project_name", "project_location", "accounting_method", "formatted_bid_due_date", "links", "allow_bidder_sum", "accept_post_due_submissions", "sealed", "bid_invites_sent_count", "bids_received_count", "enable_prebid_walkthrough", "enable_prebid_rfi_deadline", "pre_bid_rfi_deadline_date", "formatted_bid_web_message", "formatted_bid_email_message", "formatted_pre_bid_walk_through_notes", "has_bid_docs", "user_bid_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if formatted_pre_bid_walk_through_notes (nullable) is None
        # and model_fields_set contains the field
        if self.formatted_pre_bid_walk_through_notes is None and "formatted_pre_bid_walk_through_notes" in self.model_fields_set:
            _dict['formatted_pre_bid_walk_through_notes'] = None

        # set to None if user_bid_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_bid_id is None and "user_bid_id" in self.model_fields_set:
            _dict['user_bid_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "bid_due_date": obj.get("bid_due_date"),
            "number": obj.get("number"),
            "title": obj.get("title"),
            "project_name": obj.get("project_name"),
            "project_location": obj.get("project_location"),
            "accounting_method": obj.get("accounting_method"),
            "formatted_bid_due_date": obj.get("formatted_bid_due_date"),
            "links": RestV10CompaniesCompanyIdBidPackagesGet200ResponseBidPackagesInnerLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "allow_bidder_sum": obj.get("allow_bidder_sum"),
            "accept_post_due_submissions": obj.get("accept_post_due_submissions"),
            "sealed": obj.get("sealed"),
            "bid_invites_sent_count": obj.get("bid_invites_sent_count"),
            "bids_received_count": obj.get("bids_received_count"),
            "enable_prebid_walkthrough": obj.get("enable_prebid_walkthrough"),
            "enable_prebid_rfi_deadline": obj.get("enable_prebid_rfi_deadline"),
            "pre_bid_rfi_deadline_date": obj.get("pre_bid_rfi_deadline_date"),
            "formatted_bid_web_message": obj.get("formatted_bid_web_message"),
            "formatted_bid_email_message": obj.get("formatted_bid_email_message"),
            "formatted_pre_bid_walk_through_notes": obj.get("formatted_pre_bid_walk_through_notes"),
            "has_bid_docs": obj.get("has_bid_docs"),
            "user_bid_id": obj.get("user_bid_id")
        })
        return _obj


