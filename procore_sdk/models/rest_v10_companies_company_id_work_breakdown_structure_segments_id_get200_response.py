# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsIdGet200Response(BaseModel):
    """
    A work breakdown structure project segment
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    type: Optional[StrictStr] = Field(default=None, description="The type of Wbs Segment.")
    name: Optional[StrictStr] = Field(default=None, description="The i18n display name of the Wbs Segment.")
    position: Optional[StrictInt] = Field(default=None, description="Position of the Wbs Segment according to the Project Wbs Pattern.")
    segment_items_count: Optional[StrictInt] = Field(default=None, description="Number of items that belong to this segment")
    required: Optional[StrictBool] = Field(default=None, description="Whether this Wbs Segment is required.")
    delimiter: Optional[StrictStr] = Field(default=None, description="The delimiter between this Wbs Segment and the subsequent Wbs Segment.")
    project_can_modify_origin_project: Optional[StrictBool] = Field(default=None, description="Whether project-specific Segment Items are able to be added to a Project.")
    project_can_delete_origin_company: Optional[StrictBool] = Field(default=None, description="Whether Segment Items inherited from the company-level are able to be deleted from a Project.")
    structure: Optional[StrictStr] = Field(default=None, description="The Structure for this Wbs Segment.")
    selectable_tiers: Optional[StrictBool] = Field(default=None, description="Whether non-leaf Segment Items can be selected in the Budget Code picker.")
    is_included_in_project_pattern: Optional[StrictBool] = Field(default=None, description="Whether this Wbs Segment is included in the Project Wbs Pattern.")
    tiered: Optional[StrictBool] = Field(default=None, description="Structure is tiered for Wbs Segment")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    wbs_pattern_id: Optional[StrictInt] = Field(default=None, description="ID of the associated WBS Pattern")
    __properties: ClassVar[List[str]] = ["id", "type", "name", "position", "segment_items_count", "required", "delimiter", "project_can_modify_origin_project", "project_can_delete_origin_company", "structure", "selectable_tiers", "is_included_in_project_pattern", "tiered", "created_at", "updated_at", "wbs_pattern_id"]

    @field_validator('structure')
    def structure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tiered', 'flat']):
            raise ValueError("must be one of enum values ('tiered', 'flat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "position": obj.get("position"),
            "segment_items_count": obj.get("segment_items_count"),
            "required": obj.get("required"),
            "delimiter": obj.get("delimiter"),
            "project_can_modify_origin_project": obj.get("project_can_modify_origin_project"),
            "project_can_delete_origin_company": obj.get("project_can_delete_origin_company"),
            "structure": obj.get("structure"),
            "selectable_tiers": obj.get("selectable_tiers"),
            "is_included_in_project_pattern": obj.get("is_included_in_project_pattern"),
            "tiered": obj.get("tiered"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "wbs_pattern_id": obj.get("wbs_pattern_id")
        })
        return _obj


