# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.checklist_item_response import ChecklistItemResponse
from procore_sdk.models.checklist_item_type import ChecklistItemType
from procore_sdk.models.checklist_response import ChecklistResponse
from procore_sdk.models.checklist_section_item_attachment_histories_inner import ChecklistSectionItemAttachmentHistoriesInner
from procore_sdk.models.checklist_section_item_comments_inner import ChecklistSectionItemCommentsInner
from procore_sdk.models.checklist_section_item_histories_inner import ChecklistSectionItemHistoriesInner
from procore_sdk.models.checklist_section_item_observations_inner import ChecklistSectionItemObservationsInner
from procore_sdk.models.checklist_section_item_response_set import ChecklistSectionItemResponseSet
from typing import Optional, Set
from typing_extensions import Self

class ChecklistSectionItem(BaseModel):
    """
    ChecklistSectionItem
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    details: Optional[StrictStr] = Field(default=None, description="Details")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    responded_with: Optional[StrictStr] = Field(default=None, description="Representation of an Item's Response")
    origin_id: Optional[StrictInt] = Field(default=None, description="ID of Corresponding Checklist Template Item")
    section_id: Optional[StrictInt] = Field(default=None, description="Checklist Section ID")
    position: Optional[StrictInt] = Field(default=None, description="Position")
    observations: Optional[List[ChecklistSectionItemObservationsInner]] = Field(default=None, description="Observations created from the Checklist Item")
    attachment_histories: Optional[List[ChecklistSectionItemAttachmentHistoriesInner]] = Field(default=None, description="Item attachment histories")
    attachments: Optional[List[ChecklistSectionItemAttachmentHistoriesInner]] = Field(default=None, description="Item attachments")
    histories: Optional[List[ChecklistSectionItemHistoriesInner]] = Field(default=None, description="Item histories")
    item_response: Optional[ChecklistItemResponse] = None
    comments: Optional[List[ChecklistSectionItemCommentsInner]] = Field(default=None, description="Item comments")
    response: Optional[ChecklistResponse] = None
    response_set: Optional[ChecklistSectionItemResponseSet] = None
    type: Optional[ChecklistItemType] = None
    response_set_id: Optional[StrictInt] = Field(default=None, description="Response Set ID")
    template_item_id: Optional[StrictInt] = Field(default=None, description="Template Item ID")
    response_type_id: Optional[StrictInt] = Field(default=None, description="Response Type ID")
    __properties: ClassVar[List[str]] = ["id", "name", "details", "status", "responded_with", "origin_id", "section_id", "position", "observations", "attachment_histories", "attachments", "histories", "item_response", "comments", "response", "response_set", "type", "response_set_id", "template_item_id", "response_type_id"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yes', 'no', 'n/a', 'none']):
            raise ValueError("must be one of enum values ('yes', 'no', 'n/a', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChecklistSectionItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in observations (list)
        _items = []
        if self.observations:
            for _item_observations in self.observations:
                if _item_observations:
                    _items.append(_item_observations.to_dict())
            _dict['observations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_histories (list)
        _items = []
        if self.attachment_histories:
            for _item_attachment_histories in self.attachment_histories:
                if _item_attachment_histories:
                    _items.append(_item_attachment_histories.to_dict())
            _dict['attachment_histories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in histories (list)
        _items = []
        if self.histories:
            for _item_histories in self.histories:
                if _item_histories:
                    _items.append(_item_histories.to_dict())
            _dict['histories'] = _items
        # override the default output from pydantic by calling `to_dict()` of item_response
        if self.item_response:
            _dict['item_response'] = self.item_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item_comments in self.comments:
                if _item_comments:
                    _items.append(_item_comments.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_set
        if self.response_set:
            _dict['response_set'] = self.response_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        # set to None if item_response (nullable) is None
        # and model_fields_set contains the field
        if self.item_response is None and "item_response" in self.model_fields_set:
            _dict['item_response'] = None

        # set to None if response_set_id (nullable) is None
        # and model_fields_set contains the field
        if self.response_set_id is None and "response_set_id" in self.model_fields_set:
            _dict['response_set_id'] = None

        # set to None if template_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.template_item_id is None and "template_item_id" in self.model_fields_set:
            _dict['template_item_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChecklistSectionItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "details": obj.get("details"),
            "status": obj.get("status"),
            "responded_with": obj.get("responded_with"),
            "origin_id": obj.get("origin_id"),
            "section_id": obj.get("section_id"),
            "position": obj.get("position"),
            "observations": [ChecklistSectionItemObservationsInner.from_dict(_item) for _item in obj["observations"]] if obj.get("observations") is not None else None,
            "attachment_histories": [ChecklistSectionItemAttachmentHistoriesInner.from_dict(_item) for _item in obj["attachment_histories"]] if obj.get("attachment_histories") is not None else None,
            "attachments": [ChecklistSectionItemAttachmentHistoriesInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "histories": [ChecklistSectionItemHistoriesInner.from_dict(_item) for _item in obj["histories"]] if obj.get("histories") is not None else None,
            "item_response": ChecklistItemResponse.from_dict(obj["item_response"]) if obj.get("item_response") is not None else None,
            "comments": [ChecklistSectionItemCommentsInner.from_dict(_item) for _item in obj["comments"]] if obj.get("comments") is not None else None,
            "response": ChecklistResponse.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "response_set": ChecklistSectionItemResponseSet.from_dict(obj["response_set"]) if obj.get("response_set") is not None else None,
            "type": ChecklistItemType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "response_set_id": obj.get("response_set_id"),
            "template_item_id": obj.get("template_item_id"),
            "response_type_id": obj.get("response_type_id")
        })
        return _obj


