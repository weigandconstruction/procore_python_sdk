# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.custom_field_lov_entry import CustomFieldLovEntry
from typing import Optional, Set
from typing_extensions import Self

class CustomFieldMetadatum(BaseModel):
    """
    CustomFieldMetadatum
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Custom Field Metadatum ID")
    custom_field_definition_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Custom Field Definition ID")
    position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Position is sorted ascending, lowest position is visually the top left of the page on a grid basis (used in conjunction with column_width property to calculate row and column properties).")
    required: Optional[StrictBool] = Field(default=None, description="Whether or not the Custom Field Metadatum is required")
    visible: Optional[StrictBool] = Field(default=None, description="Whether or not the Custom Field Metadatum is visible")
    company_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Company ID")
    host_type: Optional[StrictStr] = Field(default=None, description="Procore Entity")
    source_type: Optional[StrictStr] = Field(default=None, description="Configurable FieldSet Class")
    source_id: Optional[StrictStr] = Field(default=None, description="Configurable FieldSet ID")
    label: Optional[StrictStr] = Field(default=None, description="Custom Field Metadatum Label")
    data_type: Optional[StrictStr] = Field(default=None, description="Type of Custom field")
    variant: Optional[StrictStr] = Field(default=None, description="The variant type of the Custom Field")
    default_value: Optional[StrictStr] = Field(default=None, description="The default value of the Custom Field")
    row: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Row the Field is position on the Form")
    column: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Column the Field is position on the Form")
    column_width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="How many columns the field spans on the Form")
    custom_fields_section_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The display section of the Custom Field, if null it is the general section, visually in the top level section typically called \"General Information\".")
    lov_entries: Optional[List[CustomFieldLovEntry]] = None
    __properties: ClassVar[List[str]] = ["id", "custom_field_definition_id", "position", "required", "visible", "company_id", "host_type", "source_type", "source_id", "label", "data_type", "variant", "default_value", "row", "column", "column_width", "custom_fields_section_id", "lov_entries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomFieldMetadatum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lov_entries (list)
        _items = []
        if self.lov_entries:
            for _item_lov_entries in self.lov_entries:
                if _item_lov_entries:
                    _items.append(_item_lov_entries.to_dict())
            _dict['lov_entries'] = _items
        # set to None if custom_fields_section_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields_section_id is None and "custom_fields_section_id" in self.model_fields_set:
            _dict['custom_fields_section_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomFieldMetadatum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "custom_field_definition_id": obj.get("custom_field_definition_id"),
            "position": obj.get("position"),
            "required": obj.get("required"),
            "visible": obj.get("visible"),
            "company_id": obj.get("company_id"),
            "host_type": obj.get("host_type"),
            "source_type": obj.get("source_type"),
            "source_id": obj.get("source_id"),
            "label": obj.get("label"),
            "data_type": obj.get("data_type"),
            "variant": obj.get("variant"),
            "default_value": obj.get("default_value"),
            "row": obj.get("row"),
            "column": obj.get("column"),
            "column_width": obj.get("column_width"),
            "custom_fields_section_id": obj.get("custom_fields_section_id"),
            "lov_entries": [CustomFieldLovEntry.from_dict(_item) for _item in obj["lov_entries"]] if obj.get("lov_entries") is not None else None
        })
        return _obj


