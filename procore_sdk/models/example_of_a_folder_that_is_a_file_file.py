# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.example_of_a_folder_that_is_a_file_file_checked_out_by import ExampleOfAFolderThatIsAFileFileCheckedOutBy
from procore_sdk.models.rest_v10_file_versions_post201_response import RestV10FileVersionsPost201Response
from typing import Optional, Set
from typing_extensions import Self

class ExampleOfAFolderThatIsAFileFile(BaseModel):
    """
    will be filled if document_type is a file
    """ # noqa: E501
    checked_out_by: Optional[ExampleOfAFolderThatIsAFileFileCheckedOutBy] = None
    checked_out_until: Optional[StrictStr] = Field(default=None, description="File checked out time")
    current_version: Optional[RestV10FileVersionsPost201Response] = None
    description: Optional[StrictStr] = Field(default=None, description="File name")
    file_type: Optional[StrictStr] = Field(default=None, description="File type")
    __properties: ClassVar[List[str]] = ["checked_out_by", "checked_out_until", "current_version", "description", "file_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExampleOfAFolderThatIsAFileFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checked_out_by
        if self.checked_out_by:
            _dict['checked_out_by'] = self.checked_out_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_version
        if self.current_version:
            _dict['current_version'] = self.current_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExampleOfAFolderThatIsAFileFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checked_out_by": ExampleOfAFolderThatIsAFileFileCheckedOutBy.from_dict(obj["checked_out_by"]) if obj.get("checked_out_by") is not None else None,
            "checked_out_until": obj.get("checked_out_until"),
            "current_version": RestV10FileVersionsPost201Response.from_dict(obj["current_version"]) if obj.get("current_version") is not None else None,
            "description": obj.get("description"),
            "file_type": obj.get("file_type")
        })
        return _obj


