# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_correspondence_types_defaults_get200_response_inner_statuses_inner import RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInnerStatusesInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner_user import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    correspondence_type_id: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    due_days: Optional[StrictInt] = None
    distribution_members: Optional[List[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser]] = Field(default=None, description="Distribution Members")
    available_statuses: Optional[List[StrictStr]] = None
    statuses: Optional[List[RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInnerStatusesInner]] = Field(default=None, description="Statuses")
    private_by_default: Optional[StrictBool] = None
    workflows_enabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "correspondence_type_id", "description", "due_days", "distribution_members", "available_statuses", "statuses", "private_by_default", "workflows_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statuses (list)
        _items = []
        if self.statuses:
            for _item_statuses in self.statuses:
                if _item_statuses:
                    _items.append(_item_statuses.to_dict())
            _dict['statuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "correspondence_type_id": obj.get("correspondence_type_id"),
            "description": obj.get("description"),
            "due_days": obj.get("due_days"),
            "distribution_members": [RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "available_statuses": obj.get("available_statuses"),
            "statuses": [RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInnerStatusesInner.from_dict(_item) for _item in obj["statuses"]] if obj.get("statuses") is not None else None,
            "private_by_default": obj.get("private_by_default"),
            "workflows_enabled": obj.get("workflows_enabled")
        })
        return _obj


