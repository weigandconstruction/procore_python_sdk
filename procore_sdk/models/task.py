# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for this task.")
    name: Optional[StrictStr] = Field(default=None, description="Task name as the user sees it in Procore. Depending on the project settings this may include the full outline path")
    task_name: Optional[StrictStr] = Field(default=None, description="Task name. This will always contain just the task name, and will not include the full outline path.")
    key: Optional[StrictStr] = Field(default=None, description="A deprecated value which was originally used to uniquely identify tasks. This value will be removed in a later version of the API.")
    start_datetime: Optional[datetime] = Field(default=None, description="Task start timestamp in ISO 8601 UTC format.")
    finish_datetime: Optional[datetime] = Field(default=None, description="Task finish timestamp in ISO 8601 UTC format.")
    percentage: Optional[StrictInt] = Field(default=None, description="Percent complete value for this task.")
    color: Optional[StrictStr] = Field(default=None, description="The RGB color value, expressed in hex digits for the color used when displaying the task in Procore. The color varies depending on whether the task is on the critical path, complete, unstarted or in progress.")
    parent_id: Optional[StrictInt] = Field(default=None, description="ID of the parent task.")
    pending: Optional[StrictBool] = Field(default=None, description="True if one or more change requests are pending for this task.")
    activity_id: Optional[StrictStr] = Field(default=None, description="The external unique identifier for this task. Note that due to an oversight in the original API, the value returned for this attribute will be the `source_uid` value supplied when creating a task.")
    schedule_activity_id: Optional[StrictStr] = Field(default=None, description="For tasks imported from external systems which have the concept of an \"Activity ID\" (for example Primavera P6), this attribute is used to hold the Activity ID value. Note that due to an oversight during the creation of this API, this is the value supplied in the `activity_id` attribute. This will be corrected in a later version of the API.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Names of any resources assigned to this task.")
    critical_path: Optional[StrictBool] = Field(default=None, description="True if this task is on the critical path.")
    milestone: Optional[StrictBool] = Field(default=None, description="True if this task is a milestone.")
    actual_start: Optional[datetime] = Field(default=None, description="Actual start timestamp for this task in ISO 8601 UTC format.")
    actual_finish: Optional[datetime] = Field(default=None, description="Actual finish timestamp for this task in ISO 8601 UTC format.")
    row_number: Optional[StrictInt] = Field(default=None, description="The row number of a task defines the sequence in which tasks are normally expected to be displayed.")
    has_children: Optional[StrictBool] = Field(default=None, description="True if this is a summary task, i.e. this task has child tasks.")
    full_outline_path: Optional[StrictStr] = Field(default=None, description="Task full outline path")
    source_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier for this task from the external system which owns the schedule data.")
    wbs: Optional[StrictStr] = Field(default=None, description="Work Breakdown Structure (WBS) number for this task.")
    schedule_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration of this task in days as defined by the external system which owns the schedule data.")
    resource_ids: Optional[List[StrictInt]] = Field(default=None, description="The resources assigned to this task, represented as an array of resource ID values.")
    notes: Optional[StrictStr] = Field(default=None, description="Arbitrary notes about this task.")
    baseline_start: Optional[datetime] = Field(default=None, description="The baseline start timestamp for this task in ISO 8601 UTC format.")
    baseline_finish: Optional[datetime] = Field(default=None, description="The baseline finish timestamp for this task in ISO 8601 UTC format.")
    start_variance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The start variance in days for this task.")
    finish_variance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The finish variance in days for this task.")
    manually_edited: Optional[StrictBool] = Field(default=None, description="Set to true if the task has been created or modified in Procore, false if the task was imported from an external schedule and has not been modified in Procore.")
    created_at: Optional[datetime] = Field(default=None, description="Date/time the Task was created in ISO 8601 UTC format.")
    updated_at: Optional[datetime] = Field(default=None, description="Date/time the Task was last updated in ISO 8601 UTC format.")
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    updated_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    __properties: ClassVar[List[str]] = ["id", "name", "task_name", "key", "start_datetime", "finish_datetime", "percentage", "color", "parent_id", "pending", "activity_id", "schedule_activity_id", "resource_name", "critical_path", "milestone", "actual_start", "actual_finish", "row_number", "has_children", "full_outline_path", "source_uid", "wbs", "schedule_duration", "resource_ids", "notes", "baseline_start", "baseline_finish", "start_variance", "finish_variance", "manually_edited", "created_at", "updated_at", "created_by", "updated_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updated_by'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "task_name": obj.get("task_name"),
            "key": obj.get("key"),
            "start_datetime": obj.get("start_datetime"),
            "finish_datetime": obj.get("finish_datetime"),
            "percentage": obj.get("percentage"),
            "color": obj.get("color"),
            "parent_id": obj.get("parent_id"),
            "pending": obj.get("pending"),
            "activity_id": obj.get("activity_id"),
            "schedule_activity_id": obj.get("schedule_activity_id"),
            "resource_name": obj.get("resource_name"),
            "critical_path": obj.get("critical_path"),
            "milestone": obj.get("milestone"),
            "actual_start": obj.get("actual_start"),
            "actual_finish": obj.get("actual_finish"),
            "row_number": obj.get("row_number"),
            "has_children": obj.get("has_children"),
            "full_outline_path": obj.get("full_outline_path"),
            "source_uid": obj.get("source_uid"),
            "wbs": obj.get("wbs"),
            "schedule_duration": obj.get("schedule_duration"),
            "resource_ids": obj.get("resource_ids"),
            "notes": obj.get("notes"),
            "baseline_start": obj.get("baseline_start"),
            "baseline_finish": obj.get("baseline_finish"),
            "start_variance": obj.get("start_variance"),
            "finish_variance": obj.get("finish_variance"),
            "manually_edited": obj.get("manually_edited"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "updated_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["updated_by"]) if obj.get("updated_by") is not None else None
        })
        return _obj


