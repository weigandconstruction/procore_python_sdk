# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plan_items_get200_response_inner_plan_item_assignees_inner_signature import RestV10ProjectsProjectIdActionPlansPlanItemsGet200ResponseInnerPlanItemAssigneesInnerSignature
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plan_items_get200_response_inner_plan_item_assignees_inner_verification_method import RestV10ProjectsProjectIdActionPlansPlanItemsGet200ResponseInnerPlanItemAssigneesInnerVerificationMethod
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plan_templates_get200_response_inner_manager import RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerManager
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdActionPlansPlanItemAssigneesGet200ResponseInner(BaseModel):
    """
    Action Plan Item Assignee (Show)
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    plan_item_id: Optional[StrictInt] = Field(default=None, description="Plan Item ID of the Action Plan Item Assignee")
    created_at: Optional[StrictStr] = Field(default=None, description="Time the Action Plan Item Assignee was created")
    is_holding: Optional[StrictBool] = Field(default=None, description="Boolean flag indicating whether the assignee is necessary to sign for a hold point")
    is_locked: Optional[StrictBool] = Field(default=None, description="Boolean flag indicating whether the assignee was added prior to an Action Plan's approval")
    party: Optional[RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerManager] = None
    plan_id: Optional[StrictInt] = Field(default=None, description="Plan ID of the Action Plan Item Assignee")
    role: Optional[StrictStr] = Field(default=None, description="Role of the Action Plan Item Assignee")
    role_id: Optional[StrictInt] = Field(default=None, description="Role ID")
    signature: Optional[RestV10ProjectsProjectIdActionPlansPlanItemsGet200ResponseInnerPlanItemAssigneesInnerSignature] = None
    updated_at: Optional[StrictStr] = Field(default=None, description="Time the Action Plan Item Assignee was updated")
    verification_method: Optional[RestV10ProjectsProjectIdActionPlansPlanItemsGet200ResponseInnerPlanItemAssigneesInnerVerificationMethod] = None
    plan_template_item_id: Optional[StrictInt] = Field(default=None, description="Plan Template Item ID")
    plan_template_id: Optional[StrictInt] = Field(default=None, description="Plan Template ID")
    __properties: ClassVar[List[str]] = ["id", "plan_item_id", "created_at", "is_holding", "is_locked", "party", "plan_id", "role", "role_id", "signature", "updated_at", "verification_method", "plan_template_item_id", "plan_template_id"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['contractor', 'specialty_contractor', 'client', 'architect', 'third_party', 'internal']):
            raise ValueError("must be one of enum values ('contractor', 'specialty_contractor', 'client', 'architect', 'third_party', 'internal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlanItemAssigneesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of party
        if self.party:
            _dict['party'] = self.party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature
        if self.signature:
            _dict['signature'] = self.signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verification_method
        if self.verification_method:
            _dict['verification_method'] = self.verification_method.to_dict()
        # set to None if party (nullable) is None
        # and model_fields_set contains the field
        if self.party is None and "party" in self.model_fields_set:
            _dict['party'] = None

        # set to None if signature (nullable) is None
        # and model_fields_set contains the field
        if self.signature is None and "signature" in self.model_fields_set:
            _dict['signature'] = None

        # set to None if verification_method (nullable) is None
        # and model_fields_set contains the field
        if self.verification_method is None and "verification_method" in self.model_fields_set:
            _dict['verification_method'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlanItemAssigneesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "plan_item_id": obj.get("plan_item_id"),
            "created_at": obj.get("created_at"),
            "is_holding": obj.get("is_holding"),
            "is_locked": obj.get("is_locked"),
            "party": RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerManager.from_dict(obj["party"]) if obj.get("party") is not None else None,
            "plan_id": obj.get("plan_id"),
            "role": obj.get("role"),
            "role_id": obj.get("role_id"),
            "signature": RestV10ProjectsProjectIdActionPlansPlanItemsGet200ResponseInnerPlanItemAssigneesInnerSignature.from_dict(obj["signature"]) if obj.get("signature") is not None else None,
            "updated_at": obj.get("updated_at"),
            "verification_method": RestV10ProjectsProjectIdActionPlansPlanItemsGet200ResponseInnerPlanItemAssigneesInnerVerificationMethod.from_dict(obj["verification_method"]) if obj.get("verification_method") is not None else None,
            "plan_template_item_id": obj.get("plan_template_item_id"),
            "plan_template_id": obj.get("plan_template_id")
        })
        return _obj


