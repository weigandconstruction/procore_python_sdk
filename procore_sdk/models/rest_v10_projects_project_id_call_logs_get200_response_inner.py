# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from procore_sdk.models.rest_v10_projects_project_id_notes_logs_get200_response_inner_attachments_inner import RestV10ProjectsProjectIdNotesLogsGet200ResponseInnerAttachmentsInner
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_permissions import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerPermissions
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdCallLogsGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdCallLogsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    var_date: Optional[date] = Field(default=None, description="Date that the call took place", alias="date")
    datetime: Optional[datetime] = Field(default=None, description="Estimated UTC datetime of record")
    deleted_at: Optional[datetime] = Field(default=None, description="Deleted at")
    subject_to: Optional[StrictStr] = Field(default=None, description="Name of the person that received the call")
    subject_from: Optional[StrictStr] = Field(default=None, description="Name of the person that called")
    description: Optional[StrictStr] = Field(default=None, description="Details describing the call")
    start_hour: Optional[Annotated[int, Field(le=23, strict=True, ge=0)]] = Field(default=None, description="Time when the call started - hour")
    start_minute: Optional[Annotated[int, Field(le=59, strict=True, ge=0)]] = Field(default=None, description="Time when the call started - minute")
    end_hour: Optional[Annotated[int, Field(le=23, strict=True, ge=0)]] = Field(default=None, description="Time when the call ended - hour")
    end_minute: Optional[Annotated[int, Field(le=59, strict=True, ge=0)]] = Field(default=None, description="Time when the call ended - minute")
    permissions: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerPermissions] = None
    position: Optional[StrictInt] = Field(default=None, description="Position in the list of recorded calls for the day")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    attachments: Optional[List[RestV10ProjectsProjectIdNotesLogsGet200ResponseInnerAttachmentsInner]] = Field(default=None, description=":filename to be deprecated, use :name")
    __properties: ClassVar[List[str]] = ["id", "created_at", "date", "datetime", "deleted_at", "subject_to", "subject_from", "description", "start_hour", "start_minute", "end_hour", "end_minute", "permissions", "position", "updated_at", "created_by", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdCallLogsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdCallLogsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "deleted_at": obj.get("deleted_at"),
            "subject_to": obj.get("subject_to"),
            "subject_from": obj.get("subject_from"),
            "description": obj.get("description"),
            "start_hour": obj.get("start_hour"),
            "start_minute": obj.get("start_minute"),
            "end_hour": obj.get("end_hour"),
            "end_minute": obj.get("end_minute"),
            "permissions": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "position": obj.get("position"),
            "updated_at": obj.get("updated_at"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "attachments": [RestV10ProjectsProjectIdNotesLogsGet200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


