# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.meeting_topic_assignment_ids_inner import MeetingTopicAssignmentIdsInner
from typing import Optional, Set
from typing_extensions import Self

class MeetingTopic(BaseModel):
    """
    Meeting topic object
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="The Title of the Meeting Topic")
    description: Optional[StrictStr] = Field(default=None, description="The Description of the Meeting Topic")
    due_date: Optional[date] = Field(default=None, description="The Due Date of the Meeting Topic")
    status: Optional[StrictStr] = Field(default=None, description="The Status of the Meeting Topic")
    minutes: Optional[StrictStr] = Field(default=None, description="<p><span style=\\\\\\\"font-size: large;\\\\\\\">Please look at Item 1 and have those pieces completed <strong>before</strong></span></p>")
    is_private: Optional[StrictBool] = Field(default=None, description="The Private status of the Meeting Topic")
    closed_at: Optional[datetime] = Field(default=None, description="The Date of the Meeting Topic being closed")
    priority: Optional[StrictStr] = Field(default=None, description="The Priority of the Meeting Topic")
    added_under_agenda: Optional[StrictBool] = Field(default=True, description="The Added Under Agenda status of the Meeting Topic")
    meeting_wide_number: Optional[StrictInt] = Field(default=None, description="The Meeting Wide Number of the Meeting Topic")
    meeting_category_id: Optional[StrictInt] = Field(default=None, description="The ID of the Meeting Category the Meeting Topic belongs to")
    assignment_ids: Optional[List[MeetingTopicAssignmentIdsInner]] = Field(default=None, description="An array of the IDs of the Assignments of the Meeting Topic.  Setting `meeting_topic[assignment_ids]` to \"none\" erases assignments.")
    __properties: ClassVar[List[str]] = ["title", "description", "due_date", "status", "minutes", "is_private", "closed_at", "priority", "added_under_agenda", "meeting_wide_number", "meeting_category_id", "assignment_ids"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Open', 'On Hold', 'Closed']):
            raise ValueError("must be one of enum values ('Open', 'On Hold', 'Closed')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', 'High', 'Medium', 'Low']):
            raise ValueError("must be one of enum values ('', 'High', 'Medium', 'Low')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeetingTopic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignment_ids (list)
        _items = []
        if self.assignment_ids:
            for _item_assignment_ids in self.assignment_ids:
                if _item_assignment_ids:
                    _items.append(_item_assignment_ids.to_dict())
            _dict['assignment_ids'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeetingTopic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "status": obj.get("status"),
            "minutes": obj.get("minutes"),
            "is_private": obj.get("is_private"),
            "closed_at": obj.get("closed_at"),
            "priority": obj.get("priority"),
            "added_under_agenda": obj.get("added_under_agenda") if obj.get("added_under_agenda") is not None else True,
            "meeting_wide_number": obj.get("meeting_wide_number"),
            "meeting_category_id": obj.get("meeting_category_id"),
            "assignment_ids": [MeetingTopicAssignmentIdsInner.from_dict(_item) for _item in obj["assignment_ids"]] if obj.get("assignment_ids") is not None else None
        })
        return _obj


