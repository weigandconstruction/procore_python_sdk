# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_item_packages_inner_batch import RestV11RequisitionsGet200ResponseInnerItemPackagesInnerBatch
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_item_packages_inner_change_order_request import RestV11RequisitionsGet200ResponseInnerItemPackagesInnerChangeOrderRequest
from typing import Optional, Set
from typing_extensions import Self

class RestV11RequisitionsGet200ResponseInnerItemPackagesInner(BaseModel):
    """
    Requisition (Subcontractor Invoice) item package
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID of the item package")
    contract_id: Optional[StrictInt] = Field(default=None, description="ID of the contract associated with the item package")
    change_order_id: Optional[StrictInt] = Field(default=None, description="ID of the change order associated with the item package")
    number: Optional[StrictStr] = Field(default=None, description="number associated with the item package's parent entity")
    title: Optional[StrictStr] = Field(default=None, description="title associated with the item package's parent entity")
    status: Optional[StrictStr] = Field(default=None, description="status associated with the item package's parent entity")
    position: Optional[StrictInt] = Field(default=None, description="position associated with the item package's parent entity")
    change_order_acronym_number: Optional[StrictStr] = Field(default=None, description="acronym for the change order object associated with the item package. Null if the item package's parent entity is a contract.")
    change_order_request: Optional[RestV11RequisitionsGet200ResponseInnerItemPackagesInnerChangeOrderRequest] = None
    batch: Optional[RestV11RequisitionsGet200ResponseInnerItemPackagesInnerBatch] = None
    __properties: ClassVar[List[str]] = ["id", "contract_id", "change_order_id", "number", "title", "status", "position", "change_order_acronym_number", "change_order_request", "batch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInnerItemPackagesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_order_request
        if self.change_order_request:
            _dict['change_order_request'] = self.change_order_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of batch
        if self.batch:
            _dict['batch'] = self.batch.to_dict()
        # set to None if change_order_id (nullable) is None
        # and model_fields_set contains the field
        if self.change_order_id is None and "change_order_id" in self.model_fields_set:
            _dict['change_order_id'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInnerItemPackagesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "contract_id": obj.get("contract_id"),
            "change_order_id": obj.get("change_order_id"),
            "number": obj.get("number"),
            "title": obj.get("title"),
            "status": obj.get("status"),
            "position": obj.get("position"),
            "change_order_acronym_number": obj.get("change_order_acronym_number"),
            "change_order_request": RestV11RequisitionsGet200ResponseInnerItemPackagesInnerChangeOrderRequest.from_dict(obj["change_order_request"]) if obj.get("change_order_request") is not None else None,
            "batch": RestV11RequisitionsGet200ResponseInnerItemPackagesInnerBatch.from_dict(obj["batch"]) if obj.get("batch") is not None else None
        })
        return _obj


