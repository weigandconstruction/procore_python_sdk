# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfProjectStage(BaseModel):
    """
    RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfProjectStage
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    default_stage: Optional[StrictBool] = Field(default=None, description="Default Stage")
    dependent_projects: Optional[StrictInt] = Field(default=None, description="Dependent Projects count")
    formatted_name: Optional[StrictStr] = Field(default=None, description="Formatted Name")
    formatted_parent_name: Optional[StrictStr] = Field(default=None, description="Formatted Parent Name")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    parent_id: Optional[StrictInt] = Field(default=None, description="Construction Volume Stage ID. Returns null if prefix is linked to a project stage that is the parent.")
    procore_category: Optional[StrictBool] = Field(default=None, description="Indicates whether the project stage the prefix is linked to is a Construction Volume default stage.")
    __properties: ClassVar[List[str]] = ["id", "default_stage", "dependent_projects", "formatted_name", "formatted_parent_name", "name", "parent_id", "procore_category"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfProjectStage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfProjectStage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "default_stage": obj.get("default_stage"),
            "dependent_projects": obj.get("dependent_projects"),
            "formatted_name": obj.get("formatted_name"),
            "formatted_parent_name": obj.get("formatted_parent_name"),
            "name": obj.get("name"),
            "parent_id": obj.get("parent_id"),
            "procore_category": obj.get("procore_category")
        })
        return _obj


