# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDelayLogsPostRequestDelayLog(BaseModel):
    """
    RestV10ProjectsProjectIdDelayLogsPostRequestDelayLog
    """ # noqa: E501
    comments: Optional[StrictStr] = Field(default=None, description="Additional comments")
    var_date: Optional[date] = Field(default=None, description="Format: YYYY-MM-DD Example: 2016-04-19", alias="date")
    datetime: Optional[datetime] = Field(default=None, description="Datetime of record. Mutually exclusive with the date property.")
    daily_log_header_id: Optional[StrictInt] = Field(default=None, description="Daily Log Header ID")
    delay_type: Optional[StrictStr] = Field(default=None, description="Type of delay")
    location_id: Optional[StrictInt] = Field(default=None, description="The ID of the Location of the Log. `location_id` takes precedence over `mt_location`")
    mt_location: Optional[List[StrictStr]] = Field(default=None, description="Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.")
    start_time: Optional[StrictStr] = Field(default=None, description="Time when the delay started, Format: HH:MM Example: 21:39")
    start_time_hour: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number between 0 and 23 representing hour of day")
    start_time_minute: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number between 0 and 59 representing minute")
    end_time: Optional[StrictStr] = Field(default=None, description="Time when the delay started, Format: HH:MM Example: 21:39")
    end_time_hour: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number between 0 and 23 representing hour of day")
    end_time_minute: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number between 0 and 59 representing minute")
    __properties: ClassVar[List[str]] = ["comments", "date", "datetime", "daily_log_header_id", "delay_type", "location_id", "mt_location", "start_time", "start_time_hour", "start_time_minute", "end_time", "end_time_hour", "end_time_minute"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDelayLogsPostRequestDelayLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDelayLogsPostRequestDelayLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "daily_log_header_id": obj.get("daily_log_header_id"),
            "delay_type": obj.get("delay_type"),
            "location_id": obj.get("location_id"),
            "mt_location": obj.get("mt_location"),
            "start_time": obj.get("start_time"),
            "start_time_hour": obj.get("start_time_hour"),
            "start_time_minute": obj.get("start_time_minute"),
            "end_time": obj.get("end_time"),
            "end_time_hour": obj.get("end_time_hour"),
            "end_time_minute": obj.get("end_time_minute")
        })
        return _obj


