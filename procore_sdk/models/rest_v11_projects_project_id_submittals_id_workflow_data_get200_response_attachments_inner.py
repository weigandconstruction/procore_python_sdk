# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdSubmittalsIdWorkflowDataGet200ResponseAttachmentsInner(BaseModel):
    """
    RestV11ProjectsProjectIdSubmittalsIdWorkflowDataGet200ResponseAttachmentsInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    approver_id: Optional[StrictInt] = None
    approver_marked_up_at: Optional[StrictStr] = None
    can_carry_forward: Optional[StrictBool] = None
    download_url: Optional[StrictStr] = None
    has_failed: Optional[StrictBool] = None
    is_originating_attachment: Optional[StrictBool] = None
    is_processing: Optional[StrictBool] = None
    last_marked_up_at: Optional[StrictStr] = None
    last_marked_up_by: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    viewer_type: Optional[StrictStr] = None
    viewer_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "approver_id", "approver_marked_up_at", "can_carry_forward", "download_url", "has_failed", "is_originating_attachment", "is_processing", "last_marked_up_at", "last_marked_up_by", "name", "viewer_type", "viewer_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsIdWorkflowDataGet200ResponseAttachmentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsIdWorkflowDataGet200ResponseAttachmentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "approver_id": obj.get("approver_id"),
            "approver_marked_up_at": obj.get("approver_marked_up_at"),
            "can_carry_forward": obj.get("can_carry_forward"),
            "download_url": obj.get("download_url"),
            "has_failed": obj.get("has_failed"),
            "is_originating_attachment": obj.get("is_originating_attachment"),
            "is_processing": obj.get("is_processing"),
            "last_marked_up_at": obj.get("last_marked_up_at"),
            "last_marked_up_by": obj.get("last_marked_up_by"),
            "name": obj.get("name"),
            "viewer_type": obj.get("viewer_type"),
            "viewer_url": obj.get("viewer_url")
        })
        return _obj


