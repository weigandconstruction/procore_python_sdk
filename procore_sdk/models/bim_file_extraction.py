# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.bim_file_extraction_created_by import BIMFileExtractionCreatedBy
from procore_sdk.models.bim_file_extraction_item import BIMFileExtractionItem
from procore_sdk.models.bim_file_extraction_item_error import BIMFileExtractionItemError
from procore_sdk.models.bim_file_extraction_item_type import BIMFileExtractionItemType
from procore_sdk.models.bim_file_upload import BIMFileUpload
from typing import Optional, Set
from typing_extensions import Self

class BIMFileExtraction(BaseModel):
    """
    BIMFileExtraction
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    parent_bim_file_extraction_id: Optional[StrictInt] = Field(default=None, description="ID of the parent BIM File Extraction")
    bim_file_upload_id: Optional[StrictInt] = Field(default=None, description="ID of the uploaded BIM File")
    bim_file_upload: Optional[BIMFileUpload] = None
    bim_model_revision_id: Optional[StrictInt] = Field(default=None, description="ID of the BIM Model Revision")
    status: Optional[StrictStr] = Field(default=None, description="Extraction Status")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Progress of overall extraction taking into account the individual extraction items")
    retry_count: Optional[StrictInt] = Field(default=None, description="No. of retries performed on the extraction")
    viewpoint_id: Optional[StrictInt] = Field(default=None, description="ID of the BIM Viewpoint")
    extraction_format_requests: Optional[List[BIMFileExtractionItemType]] = Field(default=None, description="Array of items indicating formats of items requested to be extracted")
    extraction_items: Optional[List[BIMFileExtractionItem]] = Field(default=None, description="An array of items extracted from a 3d model")
    errors: Optional[List[BIMFileExtractionItemError]] = Field(default=None, description="An array of errors encountered during extraction")
    created_by: Optional[BIMFileExtractionCreatedBy] = None
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    __properties: ClassVar[List[str]] = ["id", "parent_bim_file_extraction_id", "bim_file_upload_id", "bim_file_upload", "bim_model_revision_id", "status", "progress", "retry_count", "viewpoint_id", "extraction_format_requests", "extraction_items", "errors", "created_by", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMFileExtraction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bim_file_upload
        if self.bim_file_upload:
            _dict['bim_file_upload'] = self.bim_file_upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extraction_format_requests (list)
        _items = []
        if self.extraction_format_requests:
            for _item_extraction_format_requests in self.extraction_format_requests:
                if _item_extraction_format_requests:
                    _items.append(_item_extraction_format_requests.to_dict())
            _dict['extraction_format_requests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extraction_items (list)
        _items = []
        if self.extraction_items:
            for _item_extraction_items in self.extraction_items:
                if _item_extraction_items:
                    _items.append(_item_extraction_items.to_dict())
            _dict['extraction_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if bim_model_revision_id (nullable) is None
        # and model_fields_set contains the field
        if self.bim_model_revision_id is None and "bim_model_revision_id" in self.model_fields_set:
            _dict['bim_model_revision_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMFileExtraction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parent_bim_file_extraction_id": obj.get("parent_bim_file_extraction_id"),
            "bim_file_upload_id": obj.get("bim_file_upload_id"),
            "bim_file_upload": BIMFileUpload.from_dict(obj["bim_file_upload"]) if obj.get("bim_file_upload") is not None else None,
            "bim_model_revision_id": obj.get("bim_model_revision_id"),
            "status": obj.get("status"),
            "progress": obj.get("progress"),
            "retry_count": obj.get("retry_count"),
            "viewpoint_id": obj.get("viewpoint_id"),
            "extraction_format_requests": [BIMFileExtractionItemType.from_dict(_item) for _item in obj["extraction_format_requests"]] if obj.get("extraction_format_requests") is not None else None,
            "extraction_items": [BIMFileExtractionItem.from_dict(_item) for _item in obj["extraction_items"]] if obj.get("extraction_items") is not None else None,
            "errors": [BIMFileExtractionItemError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "created_by": BIMFileExtractionCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


