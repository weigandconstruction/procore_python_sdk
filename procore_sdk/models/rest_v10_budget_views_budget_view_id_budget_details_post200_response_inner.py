# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_biller import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerBiller
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_contract import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerContract
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_cost_code import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerCostCode
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_cost_type import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerCostType
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_detail_type import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerDetailType
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_root_cost_code import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerRootCostCode
from procore_sdk.models.rest_v10_budget_views_budget_view_id_budget_details_post200_response_inner_vendor import RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerVendor
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_line_items_inner_wbs_code import RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode
from typing import Optional, Set
from typing_extensions import Self

class RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInner(BaseModel):
    """
    Budget Details
    """ # noqa: E501
    biller: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerBiller] = None
    contract: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerContract] = None
    cost_code: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerCostCode] = None
    cost_type: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerCostType] = None
    description: Optional[StrictStr] = Field(default=None, description="Information about the record being returned by the Budget Detail Report")
    detail_type: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerDetailType] = None
    id: Optional[StrictStr] = Field(default=None, description="ID of a given budget detail row")
    item: Optional[StrictStr] = Field(default=None, description="Information about the budget detail row as it pertains to its source")
    link: Optional[StrictStr] = Field(default=None, description="Link to the source in the web app where a detail row can be found")
    root_cost_code: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerRootCostCode] = None
    vendor: Optional[RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerVendor] = None
    wbs_code: Optional[RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["biller", "contract", "cost_code", "cost_type", "description", "detail_type", "id", "item", "link", "root_cost_code", "vendor", "wbs_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of biller
        if self.biller:
            _dict['biller'] = self.biller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_type
        if self.cost_type:
            _dict['cost_type'] = self.cost_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detail_type
        if self.detail_type:
            _dict['detail_type'] = self.detail_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of root_cost_code
        if self.root_cost_code:
            _dict['root_cost_code'] = self.root_cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wbs_code
        if self.wbs_code:
            _dict['wbs_code'] = self.wbs_code.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if item (nullable) is None
        # and model_fields_set contains the field
        if self.item is None and "item" in self.model_fields_set:
            _dict['item'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biller": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerBiller.from_dict(obj["biller"]) if obj.get("biller") is not None else None,
            "contract": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "cost_code": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "cost_type": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerCostType.from_dict(obj["cost_type"]) if obj.get("cost_type") is not None else None,
            "description": obj.get("description"),
            "detail_type": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerDetailType.from_dict(obj["detail_type"]) if obj.get("detail_type") is not None else None,
            "id": obj.get("id"),
            "item": obj.get("item"),
            "link": obj.get("link"),
            "root_cost_code": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerRootCostCode.from_dict(obj["root_cost_code"]) if obj.get("root_cost_code") is not None else None,
            "vendor": RestV10BudgetViewsBudgetViewIdBudgetDetailsPost200ResponseInnerVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "wbs_code": RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode.from_dict(obj["wbs_code"]) if obj.get("wbs_code") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


