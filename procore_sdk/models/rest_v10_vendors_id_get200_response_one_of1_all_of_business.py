# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.business_normal_view_provided_services_inner import BusinessNormalViewProvidedServicesInner
from procore_sdk.models.rest_v10_vendors_id_get200_response_one_of1_all_of_business_avg_contract_size import RestV10VendorsIdGet200ResponseOneOf1AllOfBusinessAvgContractSize
from procore_sdk.models.rest_v10_vendors_id_get200_response_one_of1_all_of_business_company_size import RestV10VendorsIdGet200ResponseOneOf1AllOfBusinessCompanySize
from typing import Optional, Set
from typing_extensions import Self

class RestV10VendorsIdGet200ResponseOneOf1AllOfBusiness(BaseModel):
    """
    RestV10VendorsIdGet200ResponseOneOf1AllOfBusiness
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the Business")
    dba: Optional[StrictStr] = Field(default=None, description="Business Name DBA (Doing Business As)")
    logo_url: Optional[StrictStr] = None
    primary_slug: Optional[StrictStr] = Field(default=None, description="Slug for Business")
    construction_sectors: Optional[List[StrictStr]] = Field(default=None, description="Construction Sectors this Business works in")
    business_types: Optional[List[StrictStr]] = Field(default=None, description="Business Types this Business falls under")
    provided_services: Optional[List[BusinessNormalViewProvidedServicesInner]] = Field(default=None, description="Services the Business Provides")
    avg_contract_size: Optional[RestV10VendorsIdGet200ResponseOneOf1AllOfBusinessAvgContractSize] = None
    company_size: Optional[RestV10VendorsIdGet200ResponseOneOf1AllOfBusinessCompanySize] = None
    __properties: ClassVar[List[str]] = ["id", "name", "dba", "logo_url", "primary_slug", "construction_sectors", "business_types", "provided_services", "avg_contract_size", "company_size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10VendorsIdGet200ResponseOneOf1AllOfBusiness from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provided_services (list)
        _items = []
        if self.provided_services:
            for _item_provided_services in self.provided_services:
                if _item_provided_services:
                    _items.append(_item_provided_services.to_dict())
            _dict['provided_services'] = _items
        # override the default output from pydantic by calling `to_dict()` of avg_contract_size
        if self.avg_contract_size:
            _dict['avg_contract_size'] = self.avg_contract_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_size
        if self.company_size:
            _dict['company_size'] = self.company_size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10VendorsIdGet200ResponseOneOf1AllOfBusiness from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "dba": obj.get("dba"),
            "logo_url": obj.get("logo_url"),
            "primary_slug": obj.get("primary_slug"),
            "construction_sectors": obj.get("construction_sectors"),
            "business_types": obj.get("business_types"),
            "provided_services": [BusinessNormalViewProvidedServicesInner.from_dict(_item) for _item in obj["provided_services"]] if obj.get("provided_services") is not None else None,
            "avg_contract_size": RestV10VendorsIdGet200ResponseOneOf1AllOfBusinessAvgContractSize.from_dict(obj["avg_contract_size"]) if obj.get("avg_contract_size") is not None else None,
            "company_size": RestV10VendorsIdGet200ResponseOneOf1AllOfBusinessCompanySize.from_dict(obj["company_size"]) if obj.get("company_size") is not None else None
        })
        return _obj


