# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_companies_company_id_action_plans_plan_template_test_record_requests_post_request_plan_template_test_record_request_payload import RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequestPayload
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequest(BaseModel):
    """
    RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequest
    """ # noqa: E501
    plan_template_item_id: StrictInt = Field(description="ID of the associated Company Action Plan Template Item")
    type: StrictStr = Field(description="Action Plan Template Test Record Type")
    payload: Optional[RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequestPayload] = None
    __properties: ClassVar[List[str]] = ["plan_template_item_id", "type", "payload"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['checklist', 'attachment', 'photo']):
            raise ValueError("must be one of enum values ('checklist', 'attachment', 'photo')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plan_template_item_id": obj.get("plan_template_item_id"),
            "type": obj.get("type"),
            "payload": RestV10CompaniesCompanyIdActionPlansPlanTemplateTestRecordRequestsPostRequestPlanTemplateTestRecordRequestPayload.from_dict(obj["payload"]) if obj.get("payload") is not None else None
        })
        return _obj


