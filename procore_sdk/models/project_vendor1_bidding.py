# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProjectVendor1Bidding(BaseModel):
    """
    Bidding statuses
    """ # noqa: E501
    affirmative_action: Optional[StrictBool] = False
    small_business: Optional[StrictBool] = False
    african_american_business: Optional[StrictBool] = False
    hispanic_business: Optional[StrictBool] = False
    womens_business: Optional[StrictBool] = False
    historically_underutilized_business: Optional[StrictBool] = False
    sdvo_business: Optional[StrictBool] = False
    certified_business_enterprise: Optional[StrictBool] = False
    asian_american_business: Optional[StrictBool] = False
    native_american_business: Optional[StrictBool] = False
    disadvantaged_business: Optional[StrictBool] = False
    minority_business_enterprise: Optional[StrictBool] = False
    eight_a_business: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["affirmative_action", "small_business", "african_american_business", "hispanic_business", "womens_business", "historically_underutilized_business", "sdvo_business", "certified_business_enterprise", "asian_american_business", "native_american_business", "disadvantaged_business", "minority_business_enterprise", "eight_a_business"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectVendor1Bidding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectVendor1Bidding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affirmative_action": obj.get("affirmative_action") if obj.get("affirmative_action") is not None else False,
            "small_business": obj.get("small_business") if obj.get("small_business") is not None else False,
            "african_american_business": obj.get("african_american_business") if obj.get("african_american_business") is not None else False,
            "hispanic_business": obj.get("hispanic_business") if obj.get("hispanic_business") is not None else False,
            "womens_business": obj.get("womens_business") if obj.get("womens_business") is not None else False,
            "historically_underutilized_business": obj.get("historically_underutilized_business") if obj.get("historically_underutilized_business") is not None else False,
            "sdvo_business": obj.get("sdvo_business") if obj.get("sdvo_business") is not None else False,
            "certified_business_enterprise": obj.get("certified_business_enterprise") if obj.get("certified_business_enterprise") is not None else False,
            "asian_american_business": obj.get("asian_american_business") if obj.get("asian_american_business") is not None else False,
            "native_american_business": obj.get("native_american_business") if obj.get("native_american_business") is not None else False,
            "disadvantaged_business": obj.get("disadvantaged_business") if obj.get("disadvantaged_business") is not None else False,
            "minority_business_enterprise": obj.get("minority_business_enterprise") if obj.get("minority_business_enterprise") is not None else False,
            "eight_a_business": obj.get("eight_a_business") if obj.get("eight_a_business") is not None else False
        })
        return _obj


