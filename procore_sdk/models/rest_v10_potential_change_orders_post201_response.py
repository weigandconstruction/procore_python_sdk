# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_prime_contracts_get200_response_inner_contractor import RestV10PrimeContractsGet200ResponseInnerContractor
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_custom_fields import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_currency_configuration import RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RestV10PotentialChangeOrdersPost201Response(BaseModel):
    """
    RestV10PotentialChangeOrdersPost201Response
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    accounting_method: Optional[StrictStr] = Field(default=None, description="Accounting method")
    change_order_request_id: Optional[StrictInt] = Field(default=None, description="Change Order Request ID")
    commitment_change_event_id: Optional[StrictInt] = Field(default=None, description="Commitment Change Event ID")
    contract_id: Optional[StrictInt] = Field(default=None, description="Contract ID")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    creator: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    description: Optional[StrictStr] = Field(default=None, description="Description")
    due_date: Optional[datetime] = Field(default=None, description="Due date")
    field_change: Optional[StrictBool] = Field(default=None, description="Field change")
    grand_total: Optional[StrictStr] = Field(default=None, description="Total including markup")
    invoiced_date: Optional[date] = Field(default=None, description="Invoiced date")
    line_items: Optional[List[Dict[str, Any]]] = None
    line_items_extended_total: Optional[StrictStr] = Field(default=None, description="Line items extended total")
    line_items_total: Optional[StrictStr] = Field(default=None, description="Line items total")
    number: Optional[StrictStr] = Field(default=None, description="Number")
    origin_data: Optional[StrictStr] = Field(default=None, description="Origin data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Origin ID")
    paid: Optional[StrictBool] = Field(default=None, description="Paid")
    paid_date: Optional[date] = Field(default=None, description="Paid date")
    position: Optional[StrictInt] = Field(default=None, description="Position")
    prime_change_event_id: Optional[StrictInt] = Field(default=None, description="Prime Contract Change Event ID")
    private: Optional[StrictBool] = Field(default=None, description="If true, visible to admins only; otherwise visible to those with access to the parent contract.")
    revision: Optional[StrictInt] = Field(default=None, description="Revision")
    schedule_impact_amount: Optional[StrictInt] = Field(default=None, description="Schedule impact in days")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    title: Optional[StrictStr] = Field(default=None, description="Title")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    vendor: Optional[RestV10PrimeContractsGet200ResponseInnerContractor] = None
    void: Optional[StrictBool] = Field(default=None, description="Void")
    currency_configuration: Optional[RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration] = None
    custom_fields: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "accounting_method", "change_order_request_id", "commitment_change_event_id", "contract_id", "created_at", "creator", "description", "due_date", "field_change", "grand_total", "invoiced_date", "line_items", "line_items_extended_total", "line_items_total", "number", "origin_data", "origin_id", "paid", "paid_date", "position", "prime_change_event_id", "private", "revision", "schedule_impact_amount", "status", "title", "updated_at", "vendor", "void", "currency_configuration", "custom_fields"]

    @field_validator('accounting_method')
    def accounting_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['amount', 'unit']):
            raise ValueError("must be one of enum values ('amount', 'unit')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'not_pricing', 'pricing', 'pending', 'revised', 'proceeding', 'not_proceeding', 'no_charge', 'approved', 'rejected', 'void']):
            raise ValueError("must be one of enum values ('draft', 'not_pricing', 'pricing', 'pending', 'revised', 'proceeding', 'not_proceeding', 'no_charge', 'approved', 'rejected', 'void')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10PotentialChangeOrdersPost201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10PotentialChangeOrdersPost201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accounting_method": obj.get("accounting_method"),
            "change_order_request_id": obj.get("change_order_request_id"),
            "commitment_change_event_id": obj.get("commitment_change_event_id"),
            "contract_id": obj.get("contract_id"),
            "created_at": obj.get("created_at"),
            "creator": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "field_change": obj.get("field_change"),
            "grand_total": obj.get("grand_total"),
            "invoiced_date": obj.get("invoiced_date"),
            "line_items": obj.get("line_items"),
            "line_items_extended_total": obj.get("line_items_extended_total"),
            "line_items_total": obj.get("line_items_total"),
            "number": obj.get("number"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "paid": obj.get("paid"),
            "paid_date": obj.get("paid_date"),
            "position": obj.get("position"),
            "prime_change_event_id": obj.get("prime_change_event_id"),
            "private": obj.get("private"),
            "revision": obj.get("revision"),
            "schedule_impact_amount": obj.get("schedule_impact_amount"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at"),
            "vendor": RestV10PrimeContractsGet200ResponseInnerContractor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "void": obj.get("void"),
            "currency_configuration": RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None,
            "custom_fields": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


