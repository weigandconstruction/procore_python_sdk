# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.location import Location
from procore_sdk.models.party import Party
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.timecard_entry3_sub_job import TimecardEntry3SubJob
from procore_sdk.models.timecard_entry8 import TimecardEntry8
from procore_sdk.models.timecard_entry8_crew import TimecardEntry8Crew
from procore_sdk.models.timecard_entry_full_cost_code import TimecardEntryFullCostCode
from procore_sdk.models.timecard_time_type import TimecardTimeType
from procore_sdk.models.timesheet3 import Timesheet3
from procore_sdk.models.timesheets_signature import TimesheetsSignature
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdTimecardEntriesGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdTimecardEntriesGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    billable: Optional[StrictBool] = Field(default=None, description="The billable status of the timecard entry. Must be either true or false.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the timecard entry was created.")
    var_date: Optional[date] = Field(default=None, description="The date when the timecard was created.", alias="date")
    datetime: Optional[datetime] = Field(default=None, description="The estimated UTC date time of record.")
    deleted_at: Optional[datetime] = Field(default=None, description="The date and time when the timecard entry was deleted.")
    description: Optional[StrictStr] = Field(default=None, description="The description for the timecard entry.")
    hours: Optional[StrictStr] = Field(default=None, description="Total number of hours the resource was on sight.")
    timesheet_status: Optional[StrictStr] = Field(default=None, description="Deprecated. Reference status property.")
    approval_status: Optional[StrictStr] = Field(default=None, description="Supervisor approval status")
    lunch_time: Optional[StrictInt] = Field(default=None, description="Number of hours taken for lunch")
    time_in: Optional[date] = Field(default=None, description="The date and time the timecard was last updated")
    time_out: Optional[date] = Field(default=None, description="The date and time the timecard was last updated")
    injured: Optional[StrictBool] = Field(default=None, description="Whether or not an injury occured during work hours. Must be either true or false.")
    signed: Optional[StrictBool] = Field(default=None, description="Whether or not the timecard has been signed. Must be either true or false.")
    origin_id: Optional[StrictInt] = Field(default=None, description="The ID of related external data")
    origin_data: Optional[StrictStr] = Field(default=None, description="The value of related external data")
    timesheet: Optional[Timesheet3] = None
    updated_at: Optional[datetime] = Field(default=None, description="The date and time when the timesheet was updated.")
    cost_code: Optional[TimecardEntryFullCostCode] = None
    crew: Optional[TimecardEntry8Crew] = None
    location: Optional[Location] = None
    party: Optional[Party] = None
    procore_signature: Optional[TimesheetsSignature] = None
    sub_job: Optional[TimecardEntry3SubJob] = None
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    login_information: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    timecard_time_type: Optional[TimecardTimeType] = None
    line_item_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the line item type of the timecard entry")
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    automatically_split_timecard_entries: Optional[List[TimecardEntry8]] = Field(default=None, description="Timecard entries returned with associated object as part of overtime_management")
    __properties: ClassVar[List[str]] = ["id", "billable", "created_at", "date", "datetime", "deleted_at", "description", "hours", "timesheet_status", "approval_status", "lunch_time", "time_in", "time_out", "injured", "signed", "origin_id", "origin_data", "timesheet", "updated_at", "cost_code", "crew", "location", "party", "procore_signature", "sub_job", "created_by", "login_information", "timecard_time_type", "line_item_type_id", "custom_fields", "automatically_split_timecard_entries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdTimecardEntriesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timesheet
        if self.timesheet:
            _dict['timesheet'] = self.timesheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crew
        if self.crew:
            _dict['crew'] = self.crew.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of party
        if self.party:
            _dict['party'] = self.party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of procore_signature
        if self.procore_signature:
            _dict['procore_signature'] = self.procore_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_job
        if self.sub_job:
            _dict['sub_job'] = self.sub_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of login_information
        if self.login_information:
            _dict['login_information'] = self.login_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timecard_time_type
        if self.timecard_time_type:
            _dict['timecard_time_type'] = self.timecard_time_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in automatically_split_timecard_entries (list)
        _items = []
        if self.automatically_split_timecard_entries:
            for _item_automatically_split_timecard_entries in self.automatically_split_timecard_entries:
                if _item_automatically_split_timecard_entries:
                    _items.append(_item_automatically_split_timecard_entries.to_dict())
            _dict['automatically_split_timecard_entries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdTimecardEntriesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "billable": obj.get("billable"),
            "created_at": obj.get("created_at"),
            "date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "deleted_at": obj.get("deleted_at"),
            "description": obj.get("description"),
            "hours": obj.get("hours"),
            "timesheet_status": obj.get("timesheet_status"),
            "approval_status": obj.get("approval_status"),
            "lunch_time": obj.get("lunch_time"),
            "time_in": obj.get("time_in"),
            "time_out": obj.get("time_out"),
            "injured": obj.get("injured"),
            "signed": obj.get("signed"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "timesheet": Timesheet3.from_dict(obj["timesheet"]) if obj.get("timesheet") is not None else None,
            "updated_at": obj.get("updated_at"),
            "cost_code": TimecardEntryFullCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "crew": TimecardEntry8Crew.from_dict(obj["crew"]) if obj.get("crew") is not None else None,
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "party": Party.from_dict(obj["party"]) if obj.get("party") is not None else None,
            "procore_signature": TimesheetsSignature.from_dict(obj["procore_signature"]) if obj.get("procore_signature") is not None else None,
            "sub_job": TimecardEntry3SubJob.from_dict(obj["sub_job"]) if obj.get("sub_job") is not None else None,
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "login_information": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["login_information"]) if obj.get("login_information") is not None else None,
            "timecard_time_type": TimecardTimeType.from_dict(obj["timecard_time_type"]) if obj.get("timecard_time_type") is not None else None,
            "line_item_type_id": obj.get("line_item_type_id"),
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "automatically_split_timecard_entries": [TimecardEntry8.from_dict(_item) for _item in obj["automatically_split_timecard_entries"]] if obj.get("automatically_split_timecard_entries") is not None else None
        })
        return _obj


