# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_correspondence_types_permissions_get200_response_inner_user_access_level import RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInnerUserAccessLevel
from procore_sdk.models.rest_v10_settings_permissions_get200_response_tools_inner_permitted_actions_inner import RestV10SettingsPermissionsGet200ResponseToolsInnerPermittedActionsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    friendly_name: Optional[StrictStr] = None
    domain_id: Optional[StrictInt] = None
    tab_group: Optional[StrictStr] = None
    available_for_user: Optional[StrictBool] = None
    url: Optional[StrictStr] = None
    user_access_level: Optional[RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInnerUserAccessLevel] = None
    permitted_actions: Optional[List[RestV10SettingsPermissionsGet200ResponseToolsInnerPermittedActionsInner]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "friendly_name", "domain_id", "tab_group", "available_for_user", "url", "user_access_level", "permitted_actions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_access_level
        if self.user_access_level:
            _dict['user_access_level'] = self.user_access_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permitted_actions (list)
        _items = []
        if self.permitted_actions:
            for _item_permitted_actions in self.permitted_actions:
                if _item_permitted_actions:
                    _items.append(_item_permitted_actions.to_dict())
            _dict['permitted_actions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "friendly_name": obj.get("friendly_name"),
            "domain_id": obj.get("domain_id"),
            "tab_group": obj.get("tab_group"),
            "available_for_user": obj.get("available_for_user"),
            "url": obj.get("url"),
            "user_access_level": RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInnerUserAccessLevel.from_dict(obj["user_access_level"]) if obj.get("user_access_level") is not None else None,
            "permitted_actions": [RestV10SettingsPermissionsGet200ResponseToolsInnerPermittedActionsInner.from_dict(_item) for _item in obj["permitted_actions"]] if obj.get("permitted_actions") is not None else None
        })
        return _obj


