# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.array_of_potential_change_orders_entities_inner_line_items_inner_markup_line_items_inner_markup_destination_cost_code import ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode
from procore_sdk.models.generic_tool_item_generic_tool import GenericToolItemGenericTool
from procore_sdk.models.generic_tool_item_tasks_inner import GenericToolItemTasksInner
from procore_sdk.models.generic_tool_item_trades_inner import GenericToolItemTradesInner
from procore_sdk.models.location import Location
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_custom_fields import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_attachments_inner import RestV10WorkOrderContractsPost201ResponseAttachmentsInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_specification_section import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection
from procore_sdk.models.sub_job import SubJob
from procore_sdk.models.trade2 import Trade2
from typing import Optional, Set
from typing_extensions import Self

class GenericToolItem(BaseModel):
    """
    Generic Tool Item
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Generic Tool Item ID")
    closed_at: Optional[datetime] = Field(default=None, description="Generic Tool Item closed at")
    created_at: Optional[datetime] = Field(default=None, description="Generic Tool Item created at")
    description: Optional[StrictStr] = Field(default=None, description="Description of a Generic Tool Item")
    due_date: Optional[date] = Field(default=None, description="Generic Tool Item Due Date")
    issued_at: Optional[datetime] = Field(default=None, description="Generic Tool Item issued at")
    origin_generic_tool_item_id: Optional[StrictInt] = Field(default=None, description="Origin Generic Tool Item ID")
    origin_rfi_id: Optional[StrictInt] = Field(default=None, description="Origin RFI ID")
    position: Optional[StrictStr] = Field(default=None, description="The Number of the Generic Tool Item")
    private: Optional[StrictBool] = Field(default=None, description="If the Generic Tool Item is private")
    schedule_impact: Optional[StrictStr] = Field(default=None, description="Amount of Schedule Impact")
    updated_at: Optional[datetime] = Field(default=None, description="Generic Tool Item updated at")
    cost_impact: Optional[StrictStr] = Field(default=None, description="Amount of Cost Impact")
    status: Optional[StrictStr] = Field(default=None, description="Status of the Generic Tool Item")
    title: Optional[StrictStr] = Field(default=None, description="Title of the Generic Tool Item")
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    received_from: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    location: Optional[Location] = None
    cost_code: Optional[ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode] = None
    specification_section: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection] = None
    sub_job: Optional[SubJob] = None
    tasks: Optional[List[GenericToolItemTasksInner]] = Field(default=None, description="Tasks")
    trade: Optional[Trade2] = None
    trades: Optional[List[GenericToolItemTradesInner]] = Field(default=None, description="Trades")
    generic_tool: Optional[GenericToolItemGenericTool] = None
    attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = Field(default=None, description="Attachments")
    distribution_members: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = Field(default=None, description="Distribution Members")
    assignees: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = Field(default=None, description="Assignees")
    custom_fields: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "closed_at", "created_at", "description", "due_date", "issued_at", "origin_generic_tool_item_id", "origin_rfi_id", "position", "private", "schedule_impact", "updated_at", "cost_impact", "status", "title", "created_by", "received_from", "location", "cost_code", "specification_section", "sub_job", "tasks", "trade", "trades", "generic_tool", "attachments", "distribution_members", "assignees", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenericToolItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of received_from
        if self.received_from:
            _dict['received_from'] = self.received_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_section
        if self.specification_section:
            _dict['specification_section'] = self.specification_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_job
        if self.sub_job:
            _dict['sub_job'] = self.sub_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trades (list)
        _items = []
        if self.trades:
            for _item_trades in self.trades:
                if _item_trades:
                    _items.append(_item_trades.to_dict())
            _dict['trades'] = _items
        # override the default output from pydantic by calling `to_dict()` of generic_tool
        if self.generic_tool:
            _dict['generic_tool'] = self.generic_tool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenericToolItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "closed_at": obj.get("closed_at"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "issued_at": obj.get("issued_at"),
            "origin_generic_tool_item_id": obj.get("origin_generic_tool_item_id"),
            "origin_rfi_id": obj.get("origin_rfi_id"),
            "position": obj.get("position"),
            "private": obj.get("private"),
            "schedule_impact": obj.get("schedule_impact"),
            "updated_at": obj.get("updated_at"),
            "cost_impact": obj.get("cost_impact"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "received_from": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["received_from"]) if obj.get("received_from") is not None else None,
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "cost_code": ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "specification_section": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection.from_dict(obj["specification_section"]) if obj.get("specification_section") is not None else None,
            "sub_job": SubJob.from_dict(obj["sub_job"]) if obj.get("sub_job") is not None else None,
            "tasks": [GenericToolItemTasksInner.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None,
            "trade": Trade2.from_dict(obj["trade"]) if obj.get("trade") is not None else None,
            "trades": [GenericToolItemTradesInner.from_dict(_item) for _item in obj["trades"]] if obj.get("trades") is not None else None,
            "generic_tool": GenericToolItemGenericTool.from_dict(obj["generic_tool"]) if obj.get("generic_tool") is not None else None,
            "attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "distribution_members": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "assignees": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "custom_fields": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


