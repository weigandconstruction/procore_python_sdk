# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.change_event_line_item1_wbs_code_id import ChangeEventLineItem1WbsCodeId
from typing import Optional, Set
from typing_extensions import Self

class ChangeEventLineItem1(BaseModel):
    """
    ChangeEventLineItem1
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    wbs_code_id: Optional[ChangeEventLineItem1WbsCodeId] = None
    description: Optional[StrictStr] = Field(default=None, description="Description")
    uom: Optional[StrictStr] = Field(default=None, description="Unit of Measure")
    estimated_cost_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated Cost Amount")
    estimated_cost_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated Cost Quantity")
    estimated_cost_unit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated Cost Unit Cost")
    estimated_cost_calculation_strategy: Optional[StrictStr] = Field(default=None, description="Estimated Cost Calculation Strategy. Controls whether estimated_cost_amount is calculated from the quantity and unit_cost attributes or set manually to a provided value.")
    line_item_type_id: Optional[StrictInt] = Field(default=None, description="Line Item Type ID")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="Cost Code ID")
    proposed_vendor_id: Optional[StrictInt] = Field(default=None, description="Proposed Vendor ID")
    proposed_contract_id: Optional[StrictInt] = Field(default=None, description="Proposed Contract ID")
    commitment_contract_line_item_id: Optional[StrictInt] = Field(default=None, description="Commitment Contract Line Item ID")
    __properties: ClassVar[List[str]] = ["id", "wbs_code_id", "description", "uom", "estimated_cost_amount", "estimated_cost_quantity", "estimated_cost_unit_cost", "estimated_cost_calculation_strategy", "line_item_type_id", "cost_code_id", "proposed_vendor_id", "proposed_contract_id", "commitment_contract_line_item_id"]

    @field_validator('uom')
    def uom_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Any value present in the Company list of Units of Measure']):
            raise ValueError("must be one of enum values ('Any value present in the Company list of Units of Measure')")
        return value

    @field_validator('estimated_cost_calculation_strategy')
    def estimated_cost_calculation_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['automatic', 'manual']):
            raise ValueError("must be one of enum values ('automatic', 'manual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeEventLineItem1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wbs_code_id
        if self.wbs_code_id:
            _dict['wbs_code_id'] = self.wbs_code_id.to_dict()
        # set to None if wbs_code_id (nullable) is None
        # and model_fields_set contains the field
        if self.wbs_code_id is None and "wbs_code_id" in self.model_fields_set:
            _dict['wbs_code_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeEventLineItem1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "wbs_code_id": ChangeEventLineItem1WbsCodeId.from_dict(obj["wbs_code_id"]) if obj.get("wbs_code_id") is not None else None,
            "description": obj.get("description"),
            "uom": obj.get("uom"),
            "estimated_cost_amount": obj.get("estimated_cost_amount"),
            "estimated_cost_quantity": obj.get("estimated_cost_quantity"),
            "estimated_cost_unit_cost": obj.get("estimated_cost_unit_cost"),
            "estimated_cost_calculation_strategy": obj.get("estimated_cost_calculation_strategy"),
            "line_item_type_id": obj.get("line_item_type_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "proposed_vendor_id": obj.get("proposed_vendor_id"),
            "proposed_contract_id": obj.get("proposed_contract_id"),
            "commitment_contract_line_item_id": obj.get("commitment_contract_line_item_id")
        })
        return _obj


