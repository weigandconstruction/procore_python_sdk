# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_project_project_id_email_communications_emails_get200_response_emails_inner_attachments_inner import RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInnerAttachmentsInner
from procore_sdk.models.rest_v10_project_project_id_email_communications_id_get200_response_emails_inner_bcc_distribution_inner import RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner
from procore_sdk.models.rest_v10_project_project_id_email_communications_id_get200_response_emails_inner_login_information import RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerLoginInformation
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInner(BaseModel):
    """
    RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Email ID")
    communication_id: Optional[StrictInt] = Field(default=None, description="Communication ID")
    subject: Optional[StrictStr] = Field(default=None, description="Subject of the email")
    private: Optional[StrictBool] = Field(default=None, description="Private Indicator")
    attachments: Optional[List[RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInnerAttachmentsInner]] = Field(default=None, description="Email attachnents")
    bcc_distribution: Optional[List[RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner]] = Field(default=None, description="Users on the email BCC distribution")
    body: Optional[StrictStr] = Field(default=None, description="Company name")
    sanitized_body_html: Optional[StrictStr] = Field(default=None, description="Body of the email in HTML format")
    cc_distribution: Optional[List[RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner]] = Field(default=None, description="Users on the email CC distribution")
    distribution: Optional[List[RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner]] = Field(default=None, description="An array of users of the Distributions of the topic")
    email_sent_at: Optional[datetime] = Field(default=None, description="Date email sent")
    login_information: Optional[RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerLoginInformation] = None
    __properties: ClassVar[List[str]] = ["id", "communication_id", "subject", "private", "attachments", "bcc_distribution", "body", "sanitized_body_html", "cc_distribution", "distribution", "email_sent_at", "login_information"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bcc_distribution (list)
        _items = []
        if self.bcc_distribution:
            for _item_bcc_distribution in self.bcc_distribution:
                if _item_bcc_distribution:
                    _items.append(_item_bcc_distribution.to_dict())
            _dict['bcc_distribution'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cc_distribution (list)
        _items = []
        if self.cc_distribution:
            for _item_cc_distribution in self.cc_distribution:
                if _item_cc_distribution:
                    _items.append(_item_cc_distribution.to_dict())
            _dict['cc_distribution'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution (list)
        _items = []
        if self.distribution:
            for _item_distribution in self.distribution:
                if _item_distribution:
                    _items.append(_item_distribution.to_dict())
            _dict['distribution'] = _items
        # override the default output from pydantic by calling `to_dict()` of login_information
        if self.login_information:
            _dict['login_information'] = self.login_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "communication_id": obj.get("communication_id"),
            "subject": obj.get("subject"),
            "private": obj.get("private"),
            "attachments": [RestV10ProjectProjectIdEmailCommunicationsEmailsGet200ResponseEmailsInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "bcc_distribution": [RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner.from_dict(_item) for _item in obj["bcc_distribution"]] if obj.get("bcc_distribution") is not None else None,
            "body": obj.get("body"),
            "sanitized_body_html": obj.get("sanitized_body_html"),
            "cc_distribution": [RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner.from_dict(_item) for _item in obj["cc_distribution"]] if obj.get("cc_distribution") is not None else None,
            "distribution": [RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerBccDistributionInner.from_dict(_item) for _item in obj["distribution"]] if obj.get("distribution") is not None else None,
            "email_sent_at": obj.get("email_sent_at"),
            "login_information": RestV10ProjectProjectIdEmailCommunicationsIdGet200ResponseEmailsInnerLoginInformation.from_dict(obj["login_information"]) if obj.get("login_information") is not None else None
        })
        return _obj


