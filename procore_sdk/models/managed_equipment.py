# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagedEquipment(BaseModel):
    """
    Managed Equipment Object
    """ # noqa: E501
    current_project_id: Optional[StrictInt] = Field(default=None, description="ID of the project the equipment is currently dispatched to")
    name: Optional[StrictStr] = Field(default=None, description="Name of the equipment")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the equipment")
    identification_number: Optional[StrictStr] = Field(default=None, description="Identification number of the equipment")
    description: Optional[StrictStr] = Field(default=None, description="description of the equipment")
    managed_equipment_make_id: Optional[StrictInt] = Field(default=None, description="ID of the equipment make")
    managed_equipment_model_id: Optional[StrictInt] = Field(default=None, description="ID of the equipment model")
    managed_equipment_type_id: Optional[StrictInt] = Field(default=None, description="ID of the equipment type")
    managed_equipment_category_id: Optional[StrictInt] = Field(default=None, description="ID of the equipment category")
    company_visible: Optional[StrictBool] = Field(default=None, description="Company visible")
    year: Optional[StrictInt] = Field(default=None, description="Year the equipment was manufactured in")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    ownership: Optional[StrictStr] = Field(default=None, description="The type of ownership")
    __properties: ClassVar[List[str]] = ["current_project_id", "name", "serial_number", "identification_number", "description", "managed_equipment_make_id", "managed_equipment_model_id", "managed_equipment_type_id", "managed_equipment_category_id", "company_visible", "year", "status", "ownership"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['available', 'in_use', 'under_maintenance']):
            raise ValueError("must be one of enum values ('available', 'in_use', 'under_maintenance')")
        return value

    @field_validator('ownership')
    def ownership_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['owned', 'rented', 'sub']):
            raise ValueError("must be one of enum values ('owned', 'rented', 'sub')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedEquipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedEquipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "current_project_id": obj.get("current_project_id"),
            "name": obj.get("name"),
            "serial_number": obj.get("serial_number"),
            "identification_number": obj.get("identification_number"),
            "description": obj.get("description"),
            "managed_equipment_make_id": obj.get("managed_equipment_make_id"),
            "managed_equipment_model_id": obj.get("managed_equipment_model_id"),
            "managed_equipment_type_id": obj.get("managed_equipment_type_id"),
            "managed_equipment_category_id": obj.get("managed_equipment_category_id"),
            "company_visible": obj.get("company_visible"),
            "year": obj.get("year"),
            "status": obj.get("status"),
            "ownership": obj.get("ownership")
        })
        return _obj


