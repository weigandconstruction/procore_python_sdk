# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.bim_file_upload_attachment import BIMFileUploadAttachment
from procore_sdk.models.bim_file_upload_created_by import BIMFileUploadCreatedBy
from procore_sdk.models.bim_file_upload_file_version import BIMFileUploadFileVersion
from procore_sdk.models.bim_file_upload_metadata import BIMFileUploadMetadata
from typing import Optional, Set
from typing_extensions import Self

class BIMFileUpload(BaseModel):
    """
    BIMFileUpload
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    bim_file_id: Optional[StrictInt] = Field(default=None, description="ID of the associated BIM File")
    document_upload_id: Optional[StrictInt] = Field(default=None, description="ID of the associated Document Upload")
    file_version: Optional[BIMFileUploadFileVersion] = None
    attachment: Optional[BIMFileUploadAttachment] = None
    created_by: Optional[BIMFileUploadCreatedBy] = None
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    metadata: Optional[BIMFileUploadMetadata] = None
    __properties: ClassVar[List[str]] = ["id", "bim_file_id", "document_upload_id", "file_version", "attachment", "created_by", "created_at", "updated_at", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMFileUpload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_version
        if self.file_version:
            _dict['file_version'] = self.file_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attachment
        if self.attachment:
            _dict['attachment'] = self.attachment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # set to None if bim_file_id (nullable) is None
        # and model_fields_set contains the field
        if self.bim_file_id is None and "bim_file_id" in self.model_fields_set:
            _dict['bim_file_id'] = None

        # set to None if document_upload_id (nullable) is None
        # and model_fields_set contains the field
        if self.document_upload_id is None and "document_upload_id" in self.model_fields_set:
            _dict['document_upload_id'] = None

        # set to None if file_version (nullable) is None
        # and model_fields_set contains the field
        if self.file_version is None and "file_version" in self.model_fields_set:
            _dict['file_version'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMFileUpload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bim_file_id": obj.get("bim_file_id"),
            "document_upload_id": obj.get("document_upload_id"),
            "file_version": BIMFileUploadFileVersion.from_dict(obj["file_version"]) if obj.get("file_version") is not None else None,
            "attachment": BIMFileUploadAttachment.from_dict(obj["attachment"]) if obj.get("attachment") is not None else None,
            "created_by": BIMFileUploadCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "metadata": BIMFileUploadMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


