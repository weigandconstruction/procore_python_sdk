# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_schedule_integration_get200_response_inner_file import RestV10ScheduleIntegrationGet200ResponseInnerFile
from typing import Optional, Set
from typing_extensions import Self

class RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevisionBimGridline(BaseModel):
    """
    RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevisionBimGridline
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    filename: Optional[StrictStr] = Field(default=None, description="Filename")
    coordinate_system: Optional[StrictStr] = Field(default=None, description="Coordinate system used in exporting gridlines")
    project_id: Optional[StrictInt] = Field(default=None, description="Project ID")
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    gridline_file: Optional[RestV10ScheduleIntegrationGet200ResponseInnerFile] = None
    __properties: ClassVar[List[str]] = ["id", "filename", "coordinate_system", "project_id", "created_at", "updated_at", "gridline_file"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevisionBimGridline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gridline_file
        if self.gridline_file:
            _dict['gridline_file'] = self.gridline_file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevisionBimGridline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "filename": obj.get("filename"),
            "coordinate_system": obj.get("coordinate_system"),
            "project_id": obj.get("project_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "gridline_file": RestV10ScheduleIntegrationGet200ResponseInnerFile.from_dict(obj["gridline_file"]) if obj.get("gridline_file") is not None else None
        })
        return _obj


