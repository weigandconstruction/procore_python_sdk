# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.comment import Comment
from procore_sdk.models.coordination_issue_assignment_activity_details_created_by import CoordinationIssueAssignmentActivityDetailsCreatedBy
from procore_sdk.models.coordination_issue_assignment_activity_details_new_assignee import CoordinationIssueAssignmentActivityDetailsNewAssignee
from procore_sdk.models.coordination_issue_assignment_activity_details_old_assignee import CoordinationIssueAssignmentActivityDetailsOldAssignee
from typing import Optional, Set
from typing_extensions import Self

class CoordinationIssueAssignmentActivityDetails(BaseModel):
    """
    CoordinationIssueAssignmentActivityDetails
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Assignment ID")
    old_assignee: Optional[CoordinationIssueAssignmentActivityDetailsOldAssignee] = None
    new_assignee: Optional[CoordinationIssueAssignmentActivityDetailsNewAssignee] = None
    comment: Optional[Comment] = None
    created_by: Optional[CoordinationIssueAssignmentActivityDetailsCreatedBy] = None
    __properties: ClassVar[List[str]] = ["id", "old_assignee", "new_assignee", "comment", "created_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoordinationIssueAssignmentActivityDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of old_assignee
        if self.old_assignee:
            _dict['old_assignee'] = self.old_assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_assignee
        if self.new_assignee:
            _dict['new_assignee'] = self.new_assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['comment'] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoordinationIssueAssignmentActivityDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "old_assignee": CoordinationIssueAssignmentActivityDetailsOldAssignee.from_dict(obj["old_assignee"]) if obj.get("old_assignee") is not None else None,
            "new_assignee": CoordinationIssueAssignmentActivityDetailsNewAssignee.from_dict(obj["new_assignee"]) if obj.get("new_assignee") is not None else None,
            "comment": Comment.from_dict(obj["comment"]) if obj.get("comment") is not None else None,
            "created_by": CoordinationIssueAssignmentActivityDetailsCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None
        })
        return _obj


