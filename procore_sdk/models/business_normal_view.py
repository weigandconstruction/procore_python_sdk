# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.business_normal_view_addresses_inner import BusinessNormalViewAddressesInner
from procore_sdk.models.business_normal_view_classifications_inner import BusinessNormalViewClassificationsInner
from procore_sdk.models.business_normal_view_coverage_areas_inner import BusinessNormalViewCoverageAreasInner
from procore_sdk.models.business_normal_view_provided_services_inner import BusinessNormalViewProvidedServicesInner
from procore_sdk.models.business_normal_view_source import BusinessNormalViewSource
from procore_sdk.models.business_normal_view_tags import BusinessNormalViewTags
from typing import Optional, Set
from typing_extensions import Self

class BusinessNormalView(BaseModel):
    """
    BusinessNormalView
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="UUID for the business")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Business")
    dba: Optional[StrictStr] = Field(default=None, description="Business Name DBA (Doing Business As)")
    website: Optional[StrictStr] = Field(default=None, description="Primary URL for the business website")
    about: Optional[StrictStr] = Field(default=None, description="About the Business text")
    published: Optional[StrictBool] = Field(default=None, description="Indicates whether the Business has been publically published on PCN")
    primary_slug: Optional[StrictStr] = Field(default=None, description="Slug for Business")
    logo_url: Optional[StrictStr] = Field(default=None, description="URL link to Logo for the Business")
    source: Optional[BusinessNormalViewSource] = None
    addresses: Optional[List[BusinessNormalViewAddressesInner]] = Field(default=None, description="Addresses for the Business. These are also reflected in Offices for the Company.")
    provided_services: Optional[List[BusinessNormalViewProvidedServicesInner]] = Field(default=None, description="Services the Business Provides")
    construction_sectors: Optional[List[StrictStr]] = Field(default=None, description="Construction Sectors this Business works in")
    business_types: Optional[List[StrictStr]] = Field(default=None, description="Business Types this Business falls under")
    project_types: Optional[List[StrictStr]] = Field(default=None, description="Project Types this Business falls under")
    classifications: Optional[List[BusinessNormalViewClassificationsInner]] = Field(default=None, description="Classifications this Business falls under")
    coverage_areas: Optional[List[BusinessNormalViewCoverageAreasInner]] = Field(default=None, description="Business area coverage")
    claimed: Optional[StrictBool] = Field(default=None, description="Indicates whether the Business has been claimed by a user")
    tags: Optional[BusinessNormalViewTags] = Field(default=None, alias="Tags")
    start_of_operations: Optional[date] = Field(default=None, description="Date when the business started operations")
    __properties: ClassVar[List[str]] = ["id", "name", "dba", "website", "about", "published", "primary_slug", "logo_url", "source", "addresses", "provided_services", "construction_sectors", "business_types", "project_types", "classifications", "coverage_areas", "claimed", "Tags", "start_of_operations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessNormalView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in provided_services (list)
        _items = []
        if self.provided_services:
            for _item_provided_services in self.provided_services:
                if _item_provided_services:
                    _items.append(_item_provided_services.to_dict())
            _dict['provided_services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in classifications (list)
        _items = []
        if self.classifications:
            for _item_classifications in self.classifications:
                if _item_classifications:
                    _items.append(_item_classifications.to_dict())
            _dict['classifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coverage_areas (list)
        _items = []
        if self.coverage_areas:
            for _item_coverage_areas in self.coverage_areas:
                if _item_coverage_areas:
                    _items.append(_item_coverage_areas.to_dict())
            _dict['coverage_areas'] = _items
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['Tags'] = self.tags.to_dict()
        # set to None if start_of_operations (nullable) is None
        # and model_fields_set contains the field
        if self.start_of_operations is None and "start_of_operations" in self.model_fields_set:
            _dict['start_of_operations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessNormalView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "dba": obj.get("dba"),
            "website": obj.get("website"),
            "about": obj.get("about"),
            "published": obj.get("published"),
            "primary_slug": obj.get("primary_slug"),
            "logo_url": obj.get("logo_url"),
            "source": BusinessNormalViewSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "addresses": [BusinessNormalViewAddressesInner.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "provided_services": [BusinessNormalViewProvidedServicesInner.from_dict(_item) for _item in obj["provided_services"]] if obj.get("provided_services") is not None else None,
            "construction_sectors": obj.get("construction_sectors"),
            "business_types": obj.get("business_types"),
            "project_types": obj.get("project_types"),
            "classifications": [BusinessNormalViewClassificationsInner.from_dict(_item) for _item in obj["classifications"]] if obj.get("classifications") is not None else None,
            "coverage_areas": [BusinessNormalViewCoverageAreasInner.from_dict(_item) for _item in obj["coverage_areas"]] if obj.get("coverage_areas") is not None else None,
            "claimed": obj.get("claimed"),
            "Tags": BusinessNormalViewTags.from_dict(obj["Tags"]) if obj.get("Tags") is not None else None,
            "start_of_operations": obj.get("start_of_operations")
        })
        return _obj


