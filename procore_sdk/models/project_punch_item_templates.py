# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.punch_item6_created_by import PunchItem6CreatedBy
from procore_sdk.models.template_category import TemplateCategory
from procore_sdk.models.trade import Trade
from typing import Optional, Set
from typing_extensions import Self

class ProjectPunchItemTemplates(BaseModel):
    """
    ProjectPunchItemTemplates
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Project Punch Item Template ID")
    active: Optional[StrictBool] = Field(default=None, description="Flag that denotes if the Punch Item Template is available for use")
    company_punch_item_template_id: Optional[StrictInt] = Field(default=None, description="Parent Punch Item Template ID")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Punch Item Template")
    project_id: Optional[StrictInt] = Field(default=None, description="Project ID")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    punch_item_manager: Optional[PunchItem6CreatedBy] = None
    final_approver: Optional[PunchItem6CreatedBy] = None
    template_category: Optional[TemplateCategory] = None
    assignee: Optional[PunchItem6CreatedBy] = None
    trade: Optional[Trade] = None
    __properties: ClassVar[List[str]] = ["id", "active", "company_punch_item_template_id", "name", "project_id", "updated_at", "punch_item_manager", "final_approver", "template_category", "assignee", "trade"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectPunchItemTemplates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of punch_item_manager
        if self.punch_item_manager:
            _dict['punch_item_manager'] = self.punch_item_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_approver
        if self.final_approver:
            _dict['final_approver'] = self.final_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template_category
        if self.template_category:
            _dict['template_category'] = self.template_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # set to None if punch_item_manager (nullable) is None
        # and model_fields_set contains the field
        if self.punch_item_manager is None and "punch_item_manager" in self.model_fields_set:
            _dict['punch_item_manager'] = None

        # set to None if final_approver (nullable) is None
        # and model_fields_set contains the field
        if self.final_approver is None and "final_approver" in self.model_fields_set:
            _dict['final_approver'] = None

        # set to None if assignee (nullable) is None
        # and model_fields_set contains the field
        if self.assignee is None and "assignee" in self.model_fields_set:
            _dict['assignee'] = None

        # set to None if trade (nullable) is None
        # and model_fields_set contains the field
        if self.trade is None and "trade" in self.model_fields_set:
            _dict['trade'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectPunchItemTemplates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "active": obj.get("active"),
            "company_punch_item_template_id": obj.get("company_punch_item_template_id"),
            "name": obj.get("name"),
            "project_id": obj.get("project_id"),
            "updated_at": obj.get("updated_at"),
            "punch_item_manager": PunchItem6CreatedBy.from_dict(obj["punch_item_manager"]) if obj.get("punch_item_manager") is not None else None,
            "final_approver": PunchItem6CreatedBy.from_dict(obj["final_approver"]) if obj.get("final_approver") is not None else None,
            "template_category": TemplateCategory.from_dict(obj["template_category"]) if obj.get("template_category") is not None else None,
            "assignee": PunchItem6CreatedBy.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "trade": Trade.from_dict(obj["trade"]) if obj.get("trade") is not None else None
        })
        return _obj


