# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10AppInstallationsPost201Response(BaseModel):
    """
    RestV10AppInstallationsPost201Response
    """ # noqa: E501
    manifest: Optional[Dict[str, Any]] = Field(default=None, description="Manifest Content")
    post_installation_instruction: Optional[Dict[str, Any]] = Field(default=None, description="Post Installation Instructions For App")
    id: Optional[StrictInt] = Field(default=None, description="ID")
    app_uid: Optional[StrictStr] = Field(default=None, description="App UID")
    app_version_id: Optional[StrictStr] = Field(default=None, description="App Version Id")
    status: Optional[StrictStr] = Field(default=None, description="Installation status")
    installed_by: Optional[StrictStr] = Field(default=None, description="Email Address of the user who installed the app")
    installed_at: Optional[datetime] = Field(default=None, description="Date the app was installed or reinstalled")
    uninstalled_at: Optional[datetime] = Field(default=None, description="Date the app was uninstalled")
    uninstalled_by: Optional[StrictStr] = Field(default=None, description="Email Address of the user who uninstalled the app")
    manifest_url: Optional[StrictStr] = Field(default=None, description="Presigned Temporary Url For Manifest Instance")
    developer_app: Optional[Dict[str, Any]] = Field(default=None, description="Information on associated developer app from dev-portal")
    components: Optional[List[StrictStr]] = Field(default=None, description="Component types associated with the installation")
    __properties: ClassVar[List[str]] = ["id", "app_uid", "app_version_id", "status", "installed_by", "installed_at", "uninstalled_at", "uninstalled_by", "manifest_url", "developer_app", "components"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['installed', 'uninstalled']):
            raise ValueError("must be one of enum values ('installed', 'uninstalled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10AppInstallationsPost201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10AppInstallationsPost201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "app_uid": obj.get("app_uid"),
            "app_version_id": obj.get("app_version_id"),
            "status": obj.get("status"),
            "installed_by": obj.get("installed_by"),
            "installed_at": obj.get("installed_at"),
            "uninstalled_at": obj.get("uninstalled_at"),
            "uninstalled_by": obj.get("uninstalled_by"),
            "manifest_url": obj.get("manifest_url"),
            "developer_app": obj.get("developer_app"),
            "components": obj.get("components")
        })
        return _obj


