# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.inactive_user_all_of_links import InactiveUserAllOfLinks
from procore_sdk.models.rest_v10_projects_project_id_waste_logs_get200_response_inner_vendor import RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor
from typing import Optional, Set
from typing_extensions import Self

class InactiveUser(BaseModel):
    """
    Inactive User
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="The address of the user.")
    avatar: Optional[StrictStr] = Field(default=None, description="The URL pointing to the user avatar.")
    business_id: Optional[StrictStr] = Field(default=None, description="Business id")
    business_phone: Optional[StrictStr] = Field(default=None, description="The business phone number of the user.")
    business_phone_extension: Optional[StrictInt] = Field(default=None, description="The business phone extension of the user.")
    city: Optional[StrictStr] = Field(default=None, description="The city that applies to the user.")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code that applies to the user, must be in ISO-3166 Alpha-2 format.")
    email_address: Optional[StrictStr] = Field(default=None, description="The email address of the user.")
    email_signature: Optional[StrictStr] = Field(default=None, description="The email signature of the user.")
    employee_id: Optional[StrictStr] = Field(default=None, description="The unique employee identifier of the user.")
    erp_integrated_accountant: Optional[StrictBool] = Field(default=None, description="If this property is set to true, the user is an ERP-integrated accountant, if this property is set to false, the user is not an ERP-integrated accountant.")
    fax_number: Optional[StrictStr] = Field(default=None, description="The fax number of the user.")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the user.")
    id: Optional[StrictInt] = Field(default=None, description="The unique idenfier of the user.")
    initials: Optional[StrictStr] = Field(default=None, description="The initials of the user.")
    is_active: Optional[StrictBool] = Field(default=None, description="If this property is set to true, the user status is active. If this property is set to false, the user status is inactive.")
    is_employee: Optional[StrictBool] = Field(default=None, description="If this property is set to true, the user is an employee. If this property is set to false, the user is not an employee.")
    job_title: Optional[StrictStr] = Field(default=None, description="The job title of the user.")
    last_login_at: Optional[datetime] = Field(default=None, description="The date and time when the user logged in last.")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the user.")
    mobile_phone: Optional[StrictStr] = Field(default=None, description="The mobile phone number of the user.")
    name: Optional[StrictStr] = Field(default=None, description="The full name of the user.")
    notes: Optional[StrictStr] = Field(default=None, description="The user notes.")
    state_code: Optional[StrictStr] = Field(default=None, description="The state code that applies to the user. Must be in ISO-3166 Alpha-2 format.")
    welcome_email_sent_at: Optional[datetime] = Field(default=None, description="The date and time when the welcome email was sent to the user.")
    zip: Optional[StrictStr] = Field(default=None, description="The ZIP code of the user.")
    origin_id: Optional[StrictStr] = Field(default=None, description="The unique idenfitier for the user origin.")
    origin_data: Optional[StrictStr] = Field(default=None, description="User origin data.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the user was created in the system.")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time when the user was updated in the system.")
    vendor: Optional[RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor] = None
    links: Optional[InactiveUserAllOfLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["address", "avatar", "business_id", "business_phone", "business_phone_extension", "city", "country_code", "email_address", "email_signature", "employee_id", "erp_integrated_accountant", "fax_number", "first_name", "id", "initials", "is_active", "is_employee", "job_title", "last_login_at", "last_name", "mobile_phone", "name", "notes", "state_code", "welcome_email_sent_at", "zip", "origin_id", "origin_data", "created_at", "updated_at", "vendor", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InactiveUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if avatar (nullable) is None
        # and model_fields_set contains the field
        if self.avatar is None and "avatar" in self.model_fields_set:
            _dict['avatar'] = None

        # set to None if business_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_id is None and "business_id" in self.model_fields_set:
            _dict['business_id'] = None

        # set to None if business_phone (nullable) is None
        # and model_fields_set contains the field
        if self.business_phone is None and "business_phone" in self.model_fields_set:
            _dict['business_phone'] = None

        # set to None if business_phone_extension (nullable) is None
        # and model_fields_set contains the field
        if self.business_phone_extension is None and "business_phone_extension" in self.model_fields_set:
            _dict['business_phone_extension'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if email_address (nullable) is None
        # and model_fields_set contains the field
        if self.email_address is None and "email_address" in self.model_fields_set:
            _dict['email_address'] = None

        # set to None if email_signature (nullable) is None
        # and model_fields_set contains the field
        if self.email_signature is None and "email_signature" in self.model_fields_set:
            _dict['email_signature'] = None

        # set to None if employee_id (nullable) is None
        # and model_fields_set contains the field
        if self.employee_id is None and "employee_id" in self.model_fields_set:
            _dict['employee_id'] = None

        # set to None if fax_number (nullable) is None
        # and model_fields_set contains the field
        if self.fax_number is None and "fax_number" in self.model_fields_set:
            _dict['fax_number'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if initials (nullable) is None
        # and model_fields_set contains the field
        if self.initials is None and "initials" in self.model_fields_set:
            _dict['initials'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['is_active'] = None

        # set to None if is_employee (nullable) is None
        # and model_fields_set contains the field
        if self.is_employee is None and "is_employee" in self.model_fields_set:
            _dict['is_employee'] = None

        # set to None if job_title (nullable) is None
        # and model_fields_set contains the field
        if self.job_title is None and "job_title" in self.model_fields_set:
            _dict['job_title'] = None

        # set to None if last_login_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_login_at is None and "last_login_at" in self.model_fields_set:
            _dict['last_login_at'] = None

        # set to None if mobile_phone (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_phone is None and "mobile_phone" in self.model_fields_set:
            _dict['mobile_phone'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['state_code'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InactiveUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "avatar": obj.get("avatar"),
            "business_id": obj.get("business_id"),
            "business_phone": obj.get("business_phone"),
            "business_phone_extension": obj.get("business_phone_extension"),
            "city": obj.get("city"),
            "country_code": obj.get("country_code"),
            "email_address": obj.get("email_address"),
            "email_signature": obj.get("email_signature"),
            "employee_id": obj.get("employee_id"),
            "erp_integrated_accountant": obj.get("erp_integrated_accountant"),
            "fax_number": obj.get("fax_number"),
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "initials": obj.get("initials"),
            "is_active": obj.get("is_active"),
            "is_employee": obj.get("is_employee"),
            "job_title": obj.get("job_title"),
            "last_login_at": obj.get("last_login_at"),
            "last_name": obj.get("last_name"),
            "mobile_phone": obj.get("mobile_phone"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "state_code": obj.get("state_code"),
            "welcome_email_sent_at": obj.get("welcome_email_sent_at"),
            "zip": obj.get("zip"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "vendor": RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "_links": InactiveUserAllOfLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None
        })
        return _obj


