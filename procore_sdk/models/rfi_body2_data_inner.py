# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rfi_body_rfi_cost_impact import RFIBodyRfiCostImpact
from procore_sdk.models.rfi_body_rfi_schedule_impact import RFIBodyRfiScheduleImpact
from typing import Optional, Set
from typing_extensions import Self

class RFIBody2DataInner(BaseModel):
    """
    RFIBody2DataInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The ID of the RFI")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="The ID of the Cost Code of the RFI")
    cost_impact: Optional[RFIBodyRfiCostImpact] = None
    drawing_number: Optional[StrictStr] = Field(default=None, description="The Drawing Number of the RFI")
    due_date: Optional[date] = Field(default=None, description="The Due Date of the RFI *Only admin users can set this field")
    location_id: Optional[StrictInt] = Field(default=None, description="The ID of the Location of the RFI")
    private: Optional[StrictBool] = Field(default=False, description="The Private status of the RFI")
    received_from_login_information_id: Optional[StrictInt] = Field(default=None, description="The ID of the Received From User of the RFI")
    reference: Optional[StrictStr] = Field(default=None, description="The Reference of the RFI")
    responsible_contractor_id: Optional[StrictInt] = Field(default=None, description="The ID of the Responsible Contractor Vendor of the RFI")
    rfi_manager_id: Optional[StrictInt] = Field(default=None, description="The ID of the RFI Manager User of the RFI *Only admin users (or standard users, if the project's configuration allows for it) can set this field")
    schedule_impact: Optional[RFIBodyRfiScheduleImpact] = None
    specification_section_id: Optional[StrictInt] = Field(default=None, description="The ID of the Specification Section of the RFI")
    sub_job_id: Optional[StrictInt] = Field(default=None, description="The ID of the Sub Job of the RFI")
    subject: Optional[StrictStr] = Field(default=None, description="The Subject of the RFI")
    __properties: ClassVar[List[str]] = ["id", "cost_code_id", "cost_impact", "drawing_number", "due_date", "location_id", "private", "received_from_login_information_id", "reference", "responsible_contractor_id", "rfi_manager_id", "schedule_impact", "specification_section_id", "sub_job_id", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RFIBody2DataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_impact
        if self.cost_impact:
            _dict['cost_impact'] = self.cost_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_impact
        if self.schedule_impact:
            _dict['schedule_impact'] = self.schedule_impact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RFIBody2DataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "cost_code_id": obj.get("cost_code_id"),
            "cost_impact": RFIBodyRfiCostImpact.from_dict(obj["cost_impact"]) if obj.get("cost_impact") is not None else None,
            "drawing_number": obj.get("drawing_number"),
            "due_date": obj.get("due_date"),
            "location_id": obj.get("location_id"),
            "private": obj.get("private") if obj.get("private") is not None else False,
            "received_from_login_information_id": obj.get("received_from_login_information_id"),
            "reference": obj.get("reference"),
            "responsible_contractor_id": obj.get("responsible_contractor_id"),
            "rfi_manager_id": obj.get("rfi_manager_id"),
            "schedule_impact": RFIBodyRfiScheduleImpact.from_dict(obj["schedule_impact"]) if obj.get("schedule_impact") is not None else None,
            "specification_section_id": obj.get("specification_section_id"),
            "sub_job_id": obj.get("sub_job_id"),
            "subject": obj.get("subject")
        })
        return _obj


