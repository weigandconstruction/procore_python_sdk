# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_communications_id_get200_response_all_of_communication_tags_inner import RestV10CommunicationsIdGet200ResponseAllOfCommunicationTagsInner
from procore_sdk.models.rest_v10_communications_id_get200_response_all_of_initial_post import RestV10CommunicationsIdGet200ResponseAllOfInitialPost
from typing import Optional, Set
from typing_extensions import Self

class RestV10CommunicationsIdGet200Response(BaseModel):
    """
    RestV10CommunicationsIdGet200Response
    """ # noqa: E501
    initial_post: Optional[RestV10CommunicationsIdGet200ResponseAllOfInitialPost] = None
    communication_tags: Optional[List[RestV10CommunicationsIdGet200ResponseAllOfCommunicationTagsInner]] = None
    created_at: Optional[date] = Field(default=None, description="Date created")
    private: Optional[StrictBool] = Field(default=None, description="Private flag")
    closed: Optional[StrictBool] = Field(default=None, description="Closed flag")
    id: Optional[StrictInt] = Field(default=None, description="ID")
    subject: Optional[StrictStr] = Field(default=None, description="Subject")
    __properties: ClassVar[List[str]] = ["initial_post", "communication_tags", "created_at", "private", "closed", "id", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CommunicationsIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_post
        if self.initial_post:
            _dict['initial_post'] = self.initial_post.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in communication_tags (list)
        _items = []
        if self.communication_tags:
            for _item_communication_tags in self.communication_tags:
                if _item_communication_tags:
                    _items.append(_item_communication_tags.to_dict())
            _dict['communication_tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CommunicationsIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initial_post": RestV10CommunicationsIdGet200ResponseAllOfInitialPost.from_dict(obj["initial_post"]) if obj.get("initial_post") is not None else None,
            "communication_tags": [RestV10CommunicationsIdGet200ResponseAllOfCommunicationTagsInner.from_dict(_item) for _item in obj["communication_tags"]] if obj.get("communication_tags") is not None else None,
            "created_at": obj.get("created_at"),
            "private": obj.get("private"),
            "closed": obj.get("closed"),
            "id": obj.get("id"),
            "subject": obj.get("subject")
        })
        return _obj


