# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.checklist5_default_response_phrasing import Checklist5DefaultResponsePhrasing
from procore_sdk.models.checklist5_specification_section import Checklist5SpecificationSection
from procore_sdk.models.checklist_closed_by import ChecklistClosedBy
from procore_sdk.models.checklist_inspection_attachment import ChecklistInspectionAttachment
from procore_sdk.models.checklist_responsible_contractor import ChecklistResponsibleContractor
from procore_sdk.models.checklist_signature_request import ChecklistSignatureRequest
from procore_sdk.models.inspection_type1 import InspectionType1
from procore_sdk.models.location8 import Location8
from procore_sdk.models.rest_v10_projects_project_id_checklist_list_templates_post201_response_all_of_created_by import RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.trade import Trade
from typing import Optional, Set
from typing_extensions import Self

class Checklist5(BaseModel):
    """
    Checklist5
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    list_template_id: Optional[StrictInt] = Field(default=None, description="Checklist Template ID from which this Checklist was created")
    list_template_name: Optional[StrictStr] = Field(default=None, description="Current name of the Checklist Template from which this Checklist was created")
    number: Optional[StrictInt] = Field(default=None, description="Number")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    location: Optional[Location8] = None
    created_at: Optional[datetime] = Field(default=None, description="Timestamp of creation")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of last update")
    closed_at: Optional[datetime] = Field(default=None, description="Timestamp of when inspection was closed")
    drawing_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of Drawing IDs")
    current_drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of Current Drawing Revision IDs")
    default_response_phrasing: Optional[Checklist5DefaultResponsePhrasing] = None
    description: Optional[StrictStr] = Field(default=None, description="Description")
    deleted: Optional[StrictBool] = Field(default=None, description="Indicates whether this Checklist has been deleted")
    due_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the Inspection is due")
    inspection_date: Optional[date] = Field(default=None, description="Date that the inspection was performed")
    inspection_type: Optional[InspectionType1] = None
    private: Optional[StrictBool] = Field(default=None, description="Indicates whether this Checklist is private")
    created_by: Optional[RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy] = None
    closed_by: Optional[ChecklistClosedBy] = None
    responsible_contractor: Optional[ChecklistResponsibleContractor] = None
    point_of_contact: Optional[ChecklistClosedBy] = None
    trade: Optional[Trade] = None
    inspectors: Optional[List[RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy]] = Field(default=None, description="Inspectors")
    distribution_members: Optional[List[RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy]] = Field(default=None, description="Distribution Members")
    signature_requests: Optional[List[ChecklistSignatureRequest]] = Field(default=None, description="Checklist Signature Requests")
    managed_equipment_id: Optional[StrictInt] = Field(default=None, description="Managed Equipment ID")
    specification_section: Optional[Checklist5SpecificationSection] = None
    attachments: Optional[List[ChecklistInspectionAttachment]] = Field(default=None, description="Attachments")
    conforming_item_count: Optional[StrictInt] = Field(default=None, description="Number of Checklist Items with a status of `yes`")
    deficient_item_count: Optional[StrictInt] = Field(default=None, description="Number of Checklist Items with a status of `no`")
    not_applicable_item_count: Optional[StrictInt] = Field(default=None, description="Number of Checklist Items with a status of `n/a`")
    neutral_item_count: Optional[StrictInt] = Field(default=None, description="Number of Checklist Items with a status of `neutral`")
    inspected_item_count: Optional[StrictInt] = Field(default=None, description="Number of Checklist Items that have been inspected")
    observations_count: Optional[StrictInt] = Field(default=None, description="Number of Observations from this Checklist")
    closed_observations_count: Optional[StrictInt] = Field(default=None, description="Number of closed Observations pertaining to the Checklist")
    item_count: Optional[StrictInt] = Field(default=None, description="Number of Checklist Items within the Checklist")
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    template_id: Optional[StrictInt] = Field(default=None, description="Template ID")
    overdue: Optional[StrictBool] = Field(default=None, description="Checklist List overdue flag")
    __properties: ClassVar[List[str]] = ["id", "name", "list_template_id", "list_template_name", "number", "status", "location", "created_at", "updated_at", "closed_at", "drawing_ids", "current_drawing_revision_ids", "default_response_phrasing", "description", "deleted", "due_at", "inspection_date", "inspection_type", "private", "created_by", "closed_by", "responsible_contractor", "point_of_contact", "trade", "inspectors", "distribution_members", "signature_requests", "managed_equipment_id", "specification_section", "attachments", "conforming_item_count", "deficient_item_count", "not_applicable_item_count", "neutral_item_count", "inspected_item_count", "observations_count", "closed_observations_count", "item_count", "custom_fields", "template_id", "overdue"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Open', 'In Review', 'Closed']):
            raise ValueError("must be one of enum values ('Open', 'In Review', 'Closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Checklist5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_response_phrasing
        if self.default_response_phrasing:
            _dict['default_response_phrasing'] = self.default_response_phrasing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inspection_type
        if self.inspection_type:
            _dict['inspection_type'] = self.inspection_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_by
        if self.closed_by:
            _dict['closed_by'] = self.closed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsible_contractor
        if self.responsible_contractor:
            _dict['responsible_contractor'] = self.responsible_contractor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of point_of_contact
        if self.point_of_contact:
            _dict['point_of_contact'] = self.point_of_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inspectors (list)
        _items = []
        if self.inspectors:
            for _item_inspectors in self.inspectors:
                if _item_inspectors:
                    _items.append(_item_inspectors.to_dict())
            _dict['inspectors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signature_requests (list)
        _items = []
        if self.signature_requests:
            for _item_signature_requests in self.signature_requests:
                if _item_signature_requests:
                    _items.append(_item_signature_requests.to_dict())
            _dict['signature_requests'] = _items
        # override the default output from pydantic by calling `to_dict()` of specification_section
        if self.specification_section:
            _dict['specification_section'] = self.specification_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if closed_at (nullable) is None
        # and model_fields_set contains the field
        if self.closed_at is None and "closed_at" in self.model_fields_set:
            _dict['closed_at'] = None

        # set to None if closed_by (nullable) is None
        # and model_fields_set contains the field
        if self.closed_by is None and "closed_by" in self.model_fields_set:
            _dict['closed_by'] = None

        # set to None if responsible_contractor (nullable) is None
        # and model_fields_set contains the field
        if self.responsible_contractor is None and "responsible_contractor" in self.model_fields_set:
            _dict['responsible_contractor'] = None

        # set to None if point_of_contact (nullable) is None
        # and model_fields_set contains the field
        if self.point_of_contact is None and "point_of_contact" in self.model_fields_set:
            _dict['point_of_contact'] = None

        # set to None if trade (nullable) is None
        # and model_fields_set contains the field
        if self.trade is None and "trade" in self.model_fields_set:
            _dict['trade'] = None

        # set to None if managed_equipment_id (nullable) is None
        # and model_fields_set contains the field
        if self.managed_equipment_id is None and "managed_equipment_id" in self.model_fields_set:
            _dict['managed_equipment_id'] = None

        # set to None if specification_section (nullable) is None
        # and model_fields_set contains the field
        if self.specification_section is None and "specification_section" in self.model_fields_set:
            _dict['specification_section'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Checklist5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "list_template_id": obj.get("list_template_id"),
            "list_template_name": obj.get("list_template_name"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "location": Location8.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "closed_at": obj.get("closed_at"),
            "drawing_ids": obj.get("drawing_ids"),
            "current_drawing_revision_ids": obj.get("current_drawing_revision_ids"),
            "default_response_phrasing": Checklist5DefaultResponsePhrasing.from_dict(obj["default_response_phrasing"]) if obj.get("default_response_phrasing") is not None else None,
            "description": obj.get("description"),
            "deleted": obj.get("deleted"),
            "due_at": obj.get("due_at"),
            "inspection_date": obj.get("inspection_date"),
            "inspection_type": InspectionType1.from_dict(obj["inspection_type"]) if obj.get("inspection_type") is not None else None,
            "private": obj.get("private"),
            "created_by": RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "closed_by": ChecklistClosedBy.from_dict(obj["closed_by"]) if obj.get("closed_by") is not None else None,
            "responsible_contractor": ChecklistResponsibleContractor.from_dict(obj["responsible_contractor"]) if obj.get("responsible_contractor") is not None else None,
            "point_of_contact": ChecklistClosedBy.from_dict(obj["point_of_contact"]) if obj.get("point_of_contact") is not None else None,
            "trade": Trade.from_dict(obj["trade"]) if obj.get("trade") is not None else None,
            "inspectors": [RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy.from_dict(_item) for _item in obj["inspectors"]] if obj.get("inspectors") is not None else None,
            "distribution_members": [RestV10ProjectsProjectIdChecklistListTemplatesPost201ResponseAllOfCreatedBy.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "signature_requests": [ChecklistSignatureRequest.from_dict(_item) for _item in obj["signature_requests"]] if obj.get("signature_requests") is not None else None,
            "managed_equipment_id": obj.get("managed_equipment_id"),
            "specification_section": Checklist5SpecificationSection.from_dict(obj["specification_section"]) if obj.get("specification_section") is not None else None,
            "attachments": [ChecklistInspectionAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "conforming_item_count": obj.get("conforming_item_count"),
            "deficient_item_count": obj.get("deficient_item_count"),
            "not_applicable_item_count": obj.get("not_applicable_item_count"),
            "neutral_item_count": obj.get("neutral_item_count"),
            "inspected_item_count": obj.get("inspected_item_count"),
            "observations_count": obj.get("observations_count"),
            "closed_observations_count": obj.get("closed_observations_count"),
            "item_count": obj.get("item_count"),
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "template_id": obj.get("template_id"),
            "overdue": obj.get("overdue")
        })
        return _obj


