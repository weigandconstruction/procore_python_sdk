# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV11RequisitionsGet200ResponseInnerSummary(BaseModel):
    """
    Requisition (Subcontractor Invoice) summary
    """ # noqa: E501
    balance_to_finish_including_retainage: Optional[StrictStr] = Field(default=None, description="Balance to finish including retainage")
    completed_work_retainage_percent: Optional[StrictStr] = Field(default=None, description="Completed work retainage percent")
    completed_work_retainage_amount: Optional[StrictStr] = Field(default=None, description="Completed work retainage amount")
    contract_sum_to_date: Optional[StrictStr] = Field(default=None, description="Contract sum to date")
    current_payment_due: Optional[StrictStr] = Field(default=None, description="Current payment due")
    formatted_period: Optional[StrictStr] = Field(default=None, description="Formatted billing period")
    less_previous_certificates_for_payment: Optional[StrictStr] = Field(default=None, description="Less previous certificates for payment")
    negative_change_order_item_total: Optional[StrictStr] = Field(default=None, description="Negative change order item total")
    negative_new_change_order_item_total: Optional[StrictStr] = Field(default=None, description="Negative new change order item total")
    negative_previous_change_order_item_total: Optional[StrictStr] = Field(default=None, description="Negative previous change order item total")
    net_change_by_change_orders: Optional[StrictStr] = Field(default=None, description="Net change by change orders")
    original_contract_sum: Optional[StrictStr] = Field(default=None, description="Original contract sum")
    positive_change_order_item_total: Optional[StrictStr] = Field(default=None, description="Positive change order item total")
    positive_new_change_order_item_total: Optional[StrictStr] = Field(default=None, description="Positive new change order item total")
    positive_previous_change_order_item_total: Optional[StrictStr] = Field(default=None, description="Positive previous change order item total")
    stored_materials_retainage_amount: Optional[StrictStr] = Field(default=None, description="Stored materials retainage amount")
    stored_materials_retainage_percent: Optional[StrictStr] = Field(default=None, description="Stored materials retainage percent")
    tax_applicable_to_this_payment: Optional[StrictStr] = Field(default=None, description="Tax applicable to this payment")
    total_completed_and_stored_to_date: Optional[StrictStr] = Field(default=None, description="Total completed and stored to date")
    total_earned_less_retainage: Optional[StrictStr] = Field(default=None, description="Total earned less retainage")
    total_retainage: Optional[StrictStr] = Field(default=None, description="Total retainage")
    new_materials: Optional[StrictStr] = Field(default=None, description="Amount of new materials added this period")
    new_materials_quantity: Optional[StrictStr] = Field(default=None, description="Quantity of new materials added this period, only for unit based line items")
    stored_materials: Optional[StrictStr] = Field(default=None, description="Amount of materials presently stored less the new materials added this period")
    stored_materials_quantity: Optional[StrictStr] = Field(default=None, description="Quantity of materials presently stored less the new materials added this period")
    __properties: ClassVar[List[str]] = ["balance_to_finish_including_retainage", "completed_work_retainage_percent", "completed_work_retainage_amount", "contract_sum_to_date", "current_payment_due", "formatted_period", "less_previous_certificates_for_payment", "negative_change_order_item_total", "negative_new_change_order_item_total", "negative_previous_change_order_item_total", "net_change_by_change_orders", "original_contract_sum", "positive_change_order_item_total", "positive_new_change_order_item_total", "positive_previous_change_order_item_total", "stored_materials_retainage_amount", "stored_materials_retainage_percent", "tax_applicable_to_this_payment", "total_completed_and_stored_to_date", "total_earned_less_retainage", "total_retainage", "new_materials", "new_materials_quantity", "stored_materials", "stored_materials_quantity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInnerSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInnerSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balance_to_finish_including_retainage": obj.get("balance_to_finish_including_retainage"),
            "completed_work_retainage_percent": obj.get("completed_work_retainage_percent"),
            "completed_work_retainage_amount": obj.get("completed_work_retainage_amount"),
            "contract_sum_to_date": obj.get("contract_sum_to_date"),
            "current_payment_due": obj.get("current_payment_due"),
            "formatted_period": obj.get("formatted_period"),
            "less_previous_certificates_for_payment": obj.get("less_previous_certificates_for_payment"),
            "negative_change_order_item_total": obj.get("negative_change_order_item_total"),
            "negative_new_change_order_item_total": obj.get("negative_new_change_order_item_total"),
            "negative_previous_change_order_item_total": obj.get("negative_previous_change_order_item_total"),
            "net_change_by_change_orders": obj.get("net_change_by_change_orders"),
            "original_contract_sum": obj.get("original_contract_sum"),
            "positive_change_order_item_total": obj.get("positive_change_order_item_total"),
            "positive_new_change_order_item_total": obj.get("positive_new_change_order_item_total"),
            "positive_previous_change_order_item_total": obj.get("positive_previous_change_order_item_total"),
            "stored_materials_retainage_amount": obj.get("stored_materials_retainage_amount"),
            "stored_materials_retainage_percent": obj.get("stored_materials_retainage_percent"),
            "tax_applicable_to_this_payment": obj.get("tax_applicable_to_this_payment"),
            "total_completed_and_stored_to_date": obj.get("total_completed_and_stored_to_date"),
            "total_earned_less_retainage": obj.get("total_earned_less_retainage"),
            "total_retainage": obj.get("total_retainage"),
            "new_materials": obj.get("new_materials"),
            "new_materials_quantity": obj.get("new_materials_quantity"),
            "stored_materials": obj.get("stored_materials"),
            "stored_materials_quantity": obj.get("stored_materials_quantity")
        })
        return _obj


