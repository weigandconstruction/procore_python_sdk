# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV11RequisitionsGet200ResponseInnerSummaryText(BaseModel):
    """
    Requisition (Subcontractor Invoice) summary text
    """ # noqa: E501
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the project")
    project_number: Optional[StrictStr] = Field(default=None, description="Number of the project")
    to_general_contractor: Optional[StrictStr] = Field(default=None, description="Name of the company the requisition is for")
    requisition_period_start: Optional[date] = Field(default=None, description="Requisition period start date")
    requisition_period_end: Optional[date] = Field(default=None, description="Requisition period end date")
    subcontractor_name: Optional[StrictStr] = Field(default=None, description="Name of the company the requisition is from")
    subcontractor_street: Optional[StrictStr] = Field(default=None, description="Street address of the company the requisition is from")
    subcontractor_city: Optional[StrictStr] = Field(default=None, description="City of the company the requisition is from")
    subcontractor_state_code: Optional[StrictStr] = Field(default=None, description="State code of the company the requisition is from")
    subcontractor_zip: Optional[StrictStr] = Field(default=None, description="Zip code of the company the requisition is from")
    subcontractor_country_code: Optional[StrictStr] = Field(default=None, description="Country code of the company the requisition is from")
    application_number: Optional[StrictStr] = Field(default=None, description="Invoice number")
    contract_for: Optional[StrictStr] = Field(default=None, description="The contract title")
    contract_date: Optional[date] = Field(default=None, description="Date the signed contract is received")
    __properties: ClassVar[List[str]] = ["project_name", "project_number", "to_general_contractor", "requisition_period_start", "requisition_period_end", "subcontractor_name", "subcontractor_street", "subcontractor_city", "subcontractor_state_code", "subcontractor_zip", "subcontractor_country_code", "application_number", "contract_for", "contract_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInnerSummaryText from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInnerSummaryText from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_name": obj.get("project_name"),
            "project_number": obj.get("project_number"),
            "to_general_contractor": obj.get("to_general_contractor"),
            "requisition_period_start": obj.get("requisition_period_start"),
            "requisition_period_end": obj.get("requisition_period_end"),
            "subcontractor_name": obj.get("subcontractor_name"),
            "subcontractor_street": obj.get("subcontractor_street"),
            "subcontractor_city": obj.get("subcontractor_city"),
            "subcontractor_state_code": obj.get("subcontractor_state_code"),
            "subcontractor_zip": obj.get("subcontractor_zip"),
            "subcontractor_country_code": obj.get("subcontractor_country_code"),
            "application_number": obj.get("application_number"),
            "contract_for": obj.get("contract_for"),
            "contract_date": obj.get("contract_date")
        })
        return _obj


