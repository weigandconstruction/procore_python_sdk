# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDailyLogsClonesPostRequest(BaseModel):
    """
    RestV10ProjectsProjectIdDailyLogsClonesPostRequest
    """ # noqa: E501
    from_date: date = Field(description="Date to copy logs from in YYYY-MM-DD format")
    to_date: date = Field(description="Date to copy logs to in YYYY-MM-DD format")
    log_types: List[StrictStr] = Field(description="Log types to copy. More than one log type can be provided. ")
    __properties: ClassVar[List[str]] = ["from_date", "to_date", "log_types"]

    @field_validator('log_types')
    def log_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['accident_log', 'call_log', 'delay_log', 'delivery_log', 'dumpster_log', 'equipment_log', 'inspection_log', 'manpower_log', 'daily_construction_report_log', 'notes_log', 'plan_revision_log', 'productivity_log', 'quantity_log', 'safety_violation_log', 'timecard_entry', 'visitor_log', 'waste_log', 'weather', 'work_log']):
                raise ValueError("each list item must be one of ('accident_log', 'call_log', 'delay_log', 'delivery_log', 'dumpster_log', 'equipment_log', 'inspection_log', 'manpower_log', 'daily_construction_report_log', 'notes_log', 'plan_revision_log', 'productivity_log', 'quantity_log', 'safety_violation_log', 'timecard_entry', 'visitor_log', 'waste_log', 'weather', 'work_log')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogsClonesPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogsClonesPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from_date": obj.get("from_date"),
            "to_date": obj.get("to_date"),
            "log_types": obj.get("log_types")
        })
        return _obj


