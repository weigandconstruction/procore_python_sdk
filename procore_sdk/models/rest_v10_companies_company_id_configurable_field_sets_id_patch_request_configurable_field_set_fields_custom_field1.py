# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequestConfigurableFieldSetFieldsCustomField1(BaseModel):
    """
    Existing Custom Fields to be edited for this Configurable Field Set
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Custom Field Metadatum ID")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Custom Field")
    label: Optional[StrictStr] = Field(default=None, description="The label of the Custom Field Definition")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Custom Field Definition")
    custom_field_definition_id: Optional[StrictInt] = Field(default=None, description="Custom Field Definition ID")
    data_type: Optional[StrictStr] = Field(default=None, description="Data type of the Custom Field")
    position: Optional[StrictInt] = Field(default=None, description="The display position of the Custom Field, which is sorted ascending, lowest position is visually the top left of the page on a grid basis (used in conjunction with column_width property to calculate row and column properties).")
    required: Optional[StrictBool] = Field(default=None, description="Whether or not the Field is required")
    visible: Optional[StrictBool] = Field(default=None, description="Whether or not the Custom Field is visible")
    row: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Row the Field is position on the Form")
    column: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Column the Field is position on the Form")
    column_width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="How many columns the field spans on the Form")
    __properties: ClassVar[List[str]] = ["id", "name", "label", "description", "custom_field_definition_id", "data_type", "position", "required", "visible", "row", "column", "column_width"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['string', 'number', 'boolean', 'lov_entry', 'lov_entries']):
            raise ValueError("must be one of enum values ('string', 'number', 'boolean', 'lov_entry', 'lov_entries')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequestConfigurableFieldSetFieldsCustomField1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdConfigurableFieldSetsIdPatchRequestConfigurableFieldSetFieldsCustomField1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "custom_field_definition_id": obj.get("custom_field_definition_id"),
            "data_type": obj.get("data_type"),
            "position": obj.get("position"),
            "required": obj.get("required"),
            "visible": obj.get("visible"),
            "row": obj.get("row"),
            "column": obj.get("column"),
            "column_width": obj.get("column_width")
        })
        return _obj


