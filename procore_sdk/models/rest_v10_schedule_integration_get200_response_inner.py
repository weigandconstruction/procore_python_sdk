# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_schedule_integration_get200_response_inner_file import RestV10ScheduleIntegrationGet200ResponseInnerFile
from procore_sdk.models.rest_v10_schedule_integration_get200_response_inner_uploaded_by import RestV10ScheduleIntegrationGet200ResponseInnerUploadedBy
from typing import Optional, Set
from typing_extensions import Self

class RestV10ScheduleIntegrationGet200ResponseInner(BaseModel):
    """
    RestV10ScheduleIntegrationGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="id of schedule import")
    message: Optional[StrictStr] = Field(default=None, description="In the event that the schedule import failed, this field will contain a description of the failure. Note that if the import was successful, or if the import has not yet been processed, this field will be `null`.")
    processed_at: Optional[datetime] = Field(default=None, description="The time at which the schedule import processing completed.")
    success: Optional[StrictBool] = Field(default=None, description="If this field is `true`, this indicates that the schedule import was successful. `false` indicates that the schedule import failed. The `message` field should indicate why the import failed. `null` indicates that the schedule has not yet been imported, or the import was skipped as a more recent schedule was imported before this one was processed.")
    uploaded_at: Optional[datetime] = Field(default=None, description="The time at which the schedule was uploaded.")
    schedule_source: Optional[StrictStr] = Field(default=None, description="Used schedule upload method")
    uploaded_by: Optional[RestV10ScheduleIntegrationGet200ResponseInnerUploadedBy] = None
    file: Optional[RestV10ScheduleIntegrationGet200ResponseInnerFile] = None
    __properties: ClassVar[List[str]] = ["id", "message", "processed_at", "success", "uploaded_at", "schedule_source", "uploaded_by", "file"]

    @field_validator('schedule_source')
    def schedule_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Procore', 'Procore API', 'Procore Documents', 'Procore Drive']):
            raise ValueError("must be one of enum values ('Procore', 'Procore API', 'Procore Documents', 'Procore Drive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ScheduleIntegrationGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of uploaded_by
        if self.uploaded_by:
            _dict['uploaded_by'] = self.uploaded_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ScheduleIntegrationGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "message": obj.get("message"),
            "processed_at": obj.get("processed_at"),
            "success": obj.get("success"),
            "uploaded_at": obj.get("uploaded_at"),
            "schedule_source": obj.get("schedule_source"),
            "uploaded_by": RestV10ScheduleIntegrationGet200ResponseInnerUploadedBy.from_dict(obj["uploaded_by"]) if obj.get("uploaded_by") is not None else None,
            "file": RestV10ScheduleIntegrationGet200ResponseInnerFile.from_dict(obj["file"]) if obj.get("file") is not None else None
        })
        return _obj


