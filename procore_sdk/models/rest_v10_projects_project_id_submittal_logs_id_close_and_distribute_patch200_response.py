# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_distribution_groups_post200_response_users_inner import RestV10ProjectsProjectIdDistributionGroupsPost200ResponseUsersInner
from procore_sdk.models.rest_v10_projects_project_id_submittal_logs_id_close_and_distribute_patch200_response_distributed_responses_inner import RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200ResponseDistributedResponsesInner
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_attachments_inner import RestV10WorkOrderContractsPost201ResponseAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200Response(BaseModel):
    """
    RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200Response
    """ # noqa: E501
    id: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    submittal_description: Optional[StrictStr] = None
    sent_at: Optional[datetime] = None
    distributed_by: Optional[RestV10ProjectsProjectIdDistributionGroupsPost200ResponseUsersInner] = None
    distributed_to: Optional[List[RestV10ProjectsProjectIdDistributionGroupsPost200ResponseUsersInner]] = None
    distributed_attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = None
    download_all_attachments_url: Optional[StrictStr] = None
    submittal_distributed_attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = None
    download_all_submittal_distributed_attachments_url: Optional[StrictStr] = None
    message_distributed_attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = None
    download_all_message_distributed_attachments_url: Optional[StrictStr] = None
    distributed_responses: Optional[List[RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200ResponseDistributedResponsesInner]] = Field(default=None, description="List of submittal responses selected to be distributed")
    __properties: ClassVar[List[str]] = ["id", "message", "submittal_description", "sent_at", "distributed_by", "distributed_to", "distributed_attachments", "download_all_attachments_url", "submittal_distributed_attachments", "download_all_submittal_distributed_attachments_url", "message_distributed_attachments", "download_all_message_distributed_attachments_url", "distributed_responses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distributed_by
        if self.distributed_by:
            _dict['distributed_by'] = self.distributed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in distributed_to (list)
        _items = []
        if self.distributed_to:
            for _item_distributed_to in self.distributed_to:
                if _item_distributed_to:
                    _items.append(_item_distributed_to.to_dict())
            _dict['distributed_to'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distributed_attachments (list)
        _items = []
        if self.distributed_attachments:
            for _item_distributed_attachments in self.distributed_attachments:
                if _item_distributed_attachments:
                    _items.append(_item_distributed_attachments.to_dict())
            _dict['distributed_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in submittal_distributed_attachments (list)
        _items = []
        if self.submittal_distributed_attachments:
            for _item_submittal_distributed_attachments in self.submittal_distributed_attachments:
                if _item_submittal_distributed_attachments:
                    _items.append(_item_submittal_distributed_attachments.to_dict())
            _dict['submittal_distributed_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in message_distributed_attachments (list)
        _items = []
        if self.message_distributed_attachments:
            for _item_message_distributed_attachments in self.message_distributed_attachments:
                if _item_message_distributed_attachments:
                    _items.append(_item_message_distributed_attachments.to_dict())
            _dict['message_distributed_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distributed_responses (list)
        _items = []
        if self.distributed_responses:
            for _item_distributed_responses in self.distributed_responses:
                if _item_distributed_responses:
                    _items.append(_item_distributed_responses.to_dict())
            _dict['distributed_responses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "message": obj.get("message"),
            "submittal_description": obj.get("submittal_description"),
            "sent_at": obj.get("sent_at"),
            "distributed_by": RestV10ProjectsProjectIdDistributionGroupsPost200ResponseUsersInner.from_dict(obj["distributed_by"]) if obj.get("distributed_by") is not None else None,
            "distributed_to": [RestV10ProjectsProjectIdDistributionGroupsPost200ResponseUsersInner.from_dict(_item) for _item in obj["distributed_to"]] if obj.get("distributed_to") is not None else None,
            "distributed_attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["distributed_attachments"]] if obj.get("distributed_attachments") is not None else None,
            "download_all_attachments_url": obj.get("download_all_attachments_url"),
            "submittal_distributed_attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["submittal_distributed_attachments"]] if obj.get("submittal_distributed_attachments") is not None else None,
            "download_all_submittal_distributed_attachments_url": obj.get("download_all_submittal_distributed_attachments_url"),
            "message_distributed_attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["message_distributed_attachments"]] if obj.get("message_distributed_attachments") is not None else None,
            "download_all_message_distributed_attachments_url": obj.get("download_all_message_distributed_attachments_url"),
            "distributed_responses": [RestV10ProjectsProjectIdSubmittalLogsIdCloseAndDistributePatch200ResponseDistributedResponsesInner.from_dict(_item) for _item in obj["distributed_responses"]] if obj.get("distributed_responses") is not None else None
        })
        return _obj


