# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.body125_bim_plan_one_of_model_map_start import Body125BimPlanOneOfModelMapStart
from procore_sdk.models.body125_bim_plan_one_of_sheet_map_start import Body125BimPlanOneOfSheetMapStart
from procore_sdk.models.rest_v10_work_order_contracts_work_order_contract_id_line_items_sync_patch200_response_errors_inner_all_of_errors import RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors
from typing import Optional, Set
from typing_extensions import Self

class BIMPlanBatchCreateResponseErrorsInner(BaseModel):
    """
    BIMPlanBatchCreateResponseErrorsInner
    """ # noqa: E501
    bim_level_id: StrictInt = Field(description="ID of the BIM Level to be associated to the plan")
    drawing_id: Optional[StrictInt] = Field(default=None, description="ID of the Drawing to be associated to the plan")
    upload_uuid: Optional[StrictStr] = Field(default=None, description="UUID of uploaded 2D sheet image. One of drawing_id or upload_uid is required")
    sheet_map_start: Optional[Body125BimPlanOneOfSheetMapStart] = None
    sheet_map_end: Optional[Body125BimPlanOneOfSheetMapStart] = None
    model_map_start: Optional[Body125BimPlanOneOfModelMapStart] = None
    model_map_end: Optional[Body125BimPlanOneOfModelMapStart] = None
    errors: Optional[RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors] = None
    __properties: ClassVar[List[str]] = ["bim_level_id", "drawing_id", "upload_uuid", "sheet_map_start", "sheet_map_end", "model_map_start", "model_map_end", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMPlanBatchCreateResponseErrorsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sheet_map_start
        if self.sheet_map_start:
            _dict['sheet_map_start'] = self.sheet_map_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sheet_map_end
        if self.sheet_map_end:
            _dict['sheet_map_end'] = self.sheet_map_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_map_start
        if self.model_map_start:
            _dict['model_map_start'] = self.model_map_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_map_end
        if self.model_map_end:
            _dict['model_map_end'] = self.model_map_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMPlanBatchCreateResponseErrorsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bim_level_id": obj.get("bim_level_id"),
            "drawing_id": obj.get("drawing_id"),
            "upload_uuid": obj.get("upload_uuid"),
            "sheet_map_start": Body125BimPlanOneOfSheetMapStart.from_dict(obj["sheet_map_start"]) if obj.get("sheet_map_start") is not None else None,
            "sheet_map_end": Body125BimPlanOneOfSheetMapStart.from_dict(obj["sheet_map_end"]) if obj.get("sheet_map_end") is not None else None,
            "model_map_start": Body125BimPlanOneOfModelMapStart.from_dict(obj["model_map_start"]) if obj.get("model_map_start") is not None else None,
            "model_map_end": Body125BimPlanOneOfModelMapStart.from_dict(obj["model_map_end"]) if obj.get("model_map_end") is not None else None,
            "errors": RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors.from_dict(obj["errors"]) if obj.get("errors") is not None else None
        })
        return _obj


