# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.webhooks_delivery_event_metadata import WebhooksDeliveryEventMetadata
from typing import Optional, Set
from typing_extensions import Self

class WebhooksDeliveryEvent(BaseModel):
    """
    The event payload sent
    """ # noqa: E501
    user_id: Optional[StrictInt] = Field(default=None, description="ID of the user who made the change")
    timestamp: Optional[datetime] = Field(default=None, description="Time the change was made")
    resource_name: Optional[StrictStr] = Field(default=None, description="Name of the changed resource")
    resource_id: Optional[StrictInt] = Field(default=None, description="ID of the changed resource")
    project_id: Optional[StrictInt] = Field(default=None, description="ID of the project the resource belongs to")
    id: Optional[StrictInt] = Field(default=None, description="ID of the event")
    ulid: Optional[StrictStr] = Field(default=None, description="Unique identifier encoded as a 26 character string.")
    event_type: Optional[StrictStr] = Field(default=None, description="Type of event: [create | update | delete]")
    company_id: Optional[StrictInt] = Field(default=None, description="ID of the company the resource belongs to")
    api_version: Optional[StrictStr] = Field(default=None, description="Version of the originating api resource")
    metadata: Optional[WebhooksDeliveryEventMetadata] = None
    __properties: ClassVar[List[str]] = ["user_id", "timestamp", "resource_name", "resource_id", "project_id", "id", "ulid", "event_type", "company_id", "api_version", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhooksDeliveryEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhooksDeliveryEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "timestamp": obj.get("timestamp"),
            "resource_name": obj.get("resource_name"),
            "resource_id": obj.get("resource_id"),
            "project_id": obj.get("project_id"),
            "id": obj.get("id"),
            "ulid": obj.get("ulid"),
            "event_type": obj.get("event_type"),
            "company_id": obj.get("company_id"),
            "api_version": obj.get("api_version"),
            "metadata": WebhooksDeliveryEventMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


