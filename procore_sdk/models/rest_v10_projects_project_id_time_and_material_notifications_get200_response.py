# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdTimeAndMaterialNotificationsGet200Response(BaseModel):
    """
    Time and Material Notification
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    project_id: Optional[StrictInt] = Field(default=None, description="ID of the project the T&M ticket was logged for")
    company_id: Optional[StrictInt] = Field(default=None, description="ID of the company the T&M ticket was logged for")
    creation: Optional[List[StrictInt]] = None
    customer_signed: Optional[List[StrictInt]] = None
    company_signed: Optional[List[StrictInt]] = None
    closed: Optional[List[StrictInt]] = None
    group_equipment_totals_by: Optional[StrictStr] = Field(default=None, description="Grouping configurations for T&M Equipment push to Change Management")
    group_labor_totals_by: Optional[StrictStr] = Field(default=None, description="Grouping configurations for T&M Labor push to Change Management")
    notify_dl_on_customer_signed: Optional[StrictBool] = None
    notify_dl_on_company_signed: Optional[StrictBool] = None
    notify_dl_on_creation: Optional[StrictBool] = None
    notify_dl_on_closed: Optional[StrictBool] = None
    updated_at: Optional[datetime] = Field(default=None, description="Date the T&M ticket was updated")
    created_at: Optional[datetime] = Field(default=None, description="Date the T&M ticket was created")
    __properties: ClassVar[List[str]] = ["id", "project_id", "company_id", "creation", "customer_signed", "company_signed", "closed", "group_equipment_totals_by", "group_labor_totals_by", "notify_dl_on_customer_signed", "notify_dl_on_company_signed", "notify_dl_on_creation", "notify_dl_on_closed", "updated_at", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdTimeAndMaterialNotificationsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdTimeAndMaterialNotificationsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "company_id": obj.get("company_id"),
            "creation": obj.get("creation"),
            "customer_signed": obj.get("customer_signed"),
            "company_signed": obj.get("company_signed"),
            "closed": obj.get("closed"),
            "group_equipment_totals_by": obj.get("group_equipment_totals_by"),
            "group_labor_totals_by": obj.get("group_labor_totals_by"),
            "notify_dl_on_customer_signed": obj.get("notify_dl_on_customer_signed"),
            "notify_dl_on_company_signed": obj.get("notify_dl_on_company_signed"),
            "notify_dl_on_creation": obj.get("notify_dl_on_creation"),
            "notify_dl_on_closed": obj.get("notify_dl_on_closed"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at")
        })
        return _obj


