# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.drawing_log_import import DrawingLogImport
from typing import Optional, Set
from typing_extensions import Self

class DrawingUpload(BaseModel):
    """
    Drawing Upload
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Drawing Upload ID")
    project_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    company_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the company.")
    created_by_id: Optional[StrictInt] = Field(default=None, description="ID of creator")
    created_at: Optional[datetime] = Field(default=None, description="Drawing Upload created at")
    updated_at: Optional[datetime] = Field(default=None, description="Drawing Upload updated at")
    error_email_sent: Optional[StrictBool] = Field(default=None, description="Error email sent status")
    notify_on_success: Optional[StrictBool] = Field(default=None, description="Notify on success status")
    deletion_in_progress: Optional[StrictBool] = Field(default=None, description="Deletion in progress status")
    success_email_sent: Optional[StrictBool] = Field(default=None, description="Success email sent status")
    drawing_area_id: Optional[StrictInt] = Field(default=None, description="Drawing Area ID")
    status: Optional[StrictStr] = None
    pre_adaptive_complete: Optional[StrictBool] = Field(default=None, description="Pre adaptive complete status")
    drawing_number_contains_revision: Optional[StrictBool] = Field(default=None, description="Drawing number contains revision")
    get_info_from_filename: Optional[StrictBool] = Field(default=None, description="Get info from filename")
    language: Optional[StrictStr] = Field(default=None, description="Language for OCR")
    drawing_log_imports: Optional[List[DrawingLogImport]] = Field(default=None, description="Drawing Log Imports (Only included in 'with_drawing_log_imports' view)")
    __properties: ClassVar[List[str]] = ["id", "project_id", "company_id", "created_by_id", "created_at", "updated_at", "error_email_sent", "notify_on_success", "deletion_in_progress", "success_email_sent", "drawing_area_id", "status", "pre_adaptive_complete", "drawing_number_contains_revision", "get_info_from_filename", "language", "drawing_log_imports"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in_queue', 'in_progress', 'mechanical_turk', 'failed', 'ready_for_review', 'reviewed']):
            raise ValueError("must be one of enum values ('in_queue', 'in_progress', 'mechanical_turk', 'failed', 'ready_for_review', 'reviewed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DrawingUpload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in drawing_log_imports (list)
        _items = []
        if self.drawing_log_imports:
            for _item_drawing_log_imports in self.drawing_log_imports:
                if _item_drawing_log_imports:
                    _items.append(_item_drawing_log_imports.to_dict())
            _dict['drawing_log_imports'] = _items
        # set to None if company_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_id is None and "company_id" in self.model_fields_set:
            _dict['company_id'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DrawingUpload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "company_id": obj.get("company_id"),
            "created_by_id": obj.get("created_by_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "error_email_sent": obj.get("error_email_sent"),
            "notify_on_success": obj.get("notify_on_success"),
            "deletion_in_progress": obj.get("deletion_in_progress"),
            "success_email_sent": obj.get("success_email_sent"),
            "drawing_area_id": obj.get("drawing_area_id"),
            "status": obj.get("status"),
            "pre_adaptive_complete": obj.get("pre_adaptive_complete"),
            "drawing_number_contains_revision": obj.get("drawing_number_contains_revision"),
            "get_info_from_filename": obj.get("get_info_from_filename"),
            "language": obj.get("language"),
            "drawing_log_imports": [DrawingLogImport.from_dict(_item) for _item in obj["drawing_log_imports"]] if obj.get("drawing_log_imports") is not None else None
        })
        return _obj


