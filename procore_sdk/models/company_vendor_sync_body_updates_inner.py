# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.company_vendor_sync_body_updates_inner_bidding import CompanyVendorSyncBodyUpdatesInnerBidding
from typing import Optional, Set
from typing_extensions import Self

class CompanyVendorSyncBodyUpdatesInner(BaseModel):
    """
    CompanyVendorSyncBodyUpdatesInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    address: Optional[StrictStr] = Field(default=None, description="Address")
    city: Optional[StrictStr] = Field(default=None, description="City")
    zip: Optional[StrictStr] = Field(default=None, description="Zip code")
    business_phone: Optional[StrictStr] = Field(default=None, description="Business phone")
    mobile_phone: Optional[StrictStr] = Field(default=None, description="Mobile phone")
    fax_number: Optional[StrictStr] = Field(default=None, description="Fax number")
    email_address: Optional[StrictStr] = Field(default=None, description="Email address")
    is_active: Optional[StrictBool] = Field(default=None, description="Active status")
    state_code: Optional[StrictStr] = Field(default=None, description="State code (ISO-3166 Alpha-2 format)")
    authorized_bidder: Optional[StrictBool] = Field(default=None, description="Authorized bidder status")
    prequalified: Optional[StrictBool] = Field(default=False, description="Prequalified status")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code (ISO-3166 Alpha-2 format)")
    labor_union: Optional[StrictStr] = Field(default=None, description="Labor union")
    license_number: Optional[StrictStr] = Field(default=None, description="License number")
    website: Optional[StrictStr] = Field(default=None, description="Website url")
    union_member: Optional[StrictBool] = Field(default=None, description="Union member status")
    non_union_prevailing_wage: Optional[StrictBool] = Field(default=None, description="Non union prevailing wage status")
    abbreviated_name: Optional[StrictStr] = Field(default=None, description="Abbreviated name")
    notes: Optional[StrictStr] = Field(default=None, description="Notes (notes/keywords/tags)")
    vendor_group_id: Optional[StrictInt] = Field(default=None, description="Vendor Group ID")
    parent_id: Optional[StrictInt] = Field(default=None, description="Parent Vendor ID. Cannot be the same as ID. Only two levels of hierarchy are supported (parent/child).")
    primary_contact_id: Optional[StrictInt] = Field(default=None, description="Primary Contact ID")
    origin_id: Optional[StrictStr] = Field(default=None, description="Origin ID")
    origin_data: Optional[StrictStr] = Field(default=None, description="Origin Data")
    origin_code: Optional[StrictStr] = Field(default=None, description="Origin Code")
    trade_ids: Optional[List[StrictInt]] = None
    bidding_distribution_ids: Optional[List[StrictInt]] = None
    standard_cost_code_ids: Optional[List[StrictInt]] = None
    trade_name: Optional[StrictStr] = Field(default=None, description="Vendor's Trade Name, also known as Doing Business As (DBA).")
    bidding: Optional[CompanyVendorSyncBodyUpdatesInnerBidding] = None
    __properties: ClassVar[List[str]] = ["id", "name", "address", "city", "zip", "business_phone", "mobile_phone", "fax_number", "email_address", "is_active", "state_code", "authorized_bidder", "prequalified", "country_code", "labor_union", "license_number", "website", "union_member", "non_union_prevailing_wage", "abbreviated_name", "notes", "vendor_group_id", "parent_id", "primary_contact_id", "origin_id", "origin_data", "origin_code", "trade_ids", "bidding_distribution_ids", "standard_cost_code_ids", "trade_name", "bidding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompanyVendorSyncBodyUpdatesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bidding
        if self.bidding:
            _dict['bidding'] = self.bidding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompanyVendorSyncBodyUpdatesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "zip": obj.get("zip"),
            "business_phone": obj.get("business_phone"),
            "mobile_phone": obj.get("mobile_phone"),
            "fax_number": obj.get("fax_number"),
            "email_address": obj.get("email_address"),
            "is_active": obj.get("is_active"),
            "state_code": obj.get("state_code"),
            "authorized_bidder": obj.get("authorized_bidder"),
            "prequalified": obj.get("prequalified") if obj.get("prequalified") is not None else False,
            "country_code": obj.get("country_code"),
            "labor_union": obj.get("labor_union"),
            "license_number": obj.get("license_number"),
            "website": obj.get("website"),
            "union_member": obj.get("union_member"),
            "non_union_prevailing_wage": obj.get("non_union_prevailing_wage"),
            "abbreviated_name": obj.get("abbreviated_name"),
            "notes": obj.get("notes"),
            "vendor_group_id": obj.get("vendor_group_id"),
            "parent_id": obj.get("parent_id"),
            "primary_contact_id": obj.get("primary_contact_id"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "origin_code": obj.get("origin_code"),
            "trade_ids": obj.get("trade_ids"),
            "bidding_distribution_ids": obj.get("bidding_distribution_ids"),
            "standard_cost_code_ids": obj.get("standard_cost_code_ids"),
            "trade_name": obj.get("trade_name"),
            "bidding": CompanyVendorSyncBodyUpdatesInnerBidding.from_dict(obj["bidding"]) if obj.get("bidding") is not None else None
        })
        return _obj


