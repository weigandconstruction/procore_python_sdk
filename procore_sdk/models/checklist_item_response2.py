# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.checklist_item_response_payload import ChecklistItemResponsePayload
from procore_sdk.models.checklist_item_type import ChecklistItemType
from procore_sdk.models.punch_item6_created_by import PunchItem6CreatedBy
from typing import Optional, Set
from typing_extensions import Self

class ChecklistItemResponse2(BaseModel):
    """
    Item Response
    """ # noqa: E501
    item_id: Optional[StrictInt] = Field(default=None, description="Item ID")
    status: Optional[StrictStr] = Field(default=None, description="Item Status. Possible values are 'conforming', 'non_conforming', and 'not_applicable'.")
    responded_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when Response was added")
    responder: Optional[PunchItem6CreatedBy] = None
    item_type: Optional[ChecklistItemType] = None
    payload: Optional[ChecklistItemResponsePayload] = None
    __properties: ClassVar[List[str]] = ["item_id", "status", "responded_at", "responder", "item_type", "payload"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChecklistItemResponse2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of responder
        if self.responder:
            _dict['responder'] = self.responder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_type
        if self.item_type:
            _dict['item_type'] = self.item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        # set to None if responder (nullable) is None
        # and model_fields_set contains the field
        if self.responder is None and "responder" in self.model_fields_set:
            _dict['responder'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChecklistItemResponse2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "item_id": obj.get("item_id"),
            "status": obj.get("status"),
            "responded_at": obj.get("responded_at"),
            "responder": PunchItem6CreatedBy.from_dict(obj["responder"]) if obj.get("responder") is not None else None,
            "item_type": ChecklistItemType.from_dict(obj["item_type"]) if obj.get("item_type") is not None else None,
            "payload": ChecklistItemResponsePayload.from_dict(obj["payload"]) if obj.get("payload") is not None else None
        })
        return _obj


