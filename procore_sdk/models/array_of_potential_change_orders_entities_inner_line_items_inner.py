# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.array_of_potential_change_orders_entities_inner_line_items_inner_markup_line_items_inner import ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInner
from procore_sdk.models.line_item_type import LineItemType
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_currency_configuration import RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_line_items_inner_cost_code import RestV10WorkOrderContractsPost201ResponseLineItemsInnerCostCode
from typing import Optional, Set
from typing_extensions import Self

class ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInner(BaseModel):
    """
    ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Line Item ID")
    position: Optional[StrictInt] = Field(default=None, description="Postion")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity")
    uom: Optional[StrictStr] = Field(default=None, description="Unit of measurement")
    total_amount: Optional[StrictStr] = Field(default=None, description="Total amount")
    extended_amount: Optional[StrictStr] = Field(default=None, description="Extended amount")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="Cost Code ID")
    tax_code_id: Optional[StrictInt] = Field(default=None, description="Tax Code ID")
    unit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit cost")
    cost_code: Optional[RestV10WorkOrderContractsPost201ResponseLineItemsInnerCostCode] = None
    line_item_type: Optional[LineItemType] = None
    markup_line_items: Optional[List[ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInner]] = None
    currency_configuration: Optional[RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration] = None
    __properties: ClassVar[List[str]] = ["id", "position", "description", "quantity", "uom", "total_amount", "extended_amount", "cost_code_id", "tax_code_id", "unit_cost", "cost_code", "line_item_type", "markup_line_items", "currency_configuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line_item_type
        if self.line_item_type:
            _dict['line_item_type'] = self.line_item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in markup_line_items (list)
        _items = []
        if self.markup_line_items:
            for _item_markup_line_items in self.markup_line_items:
                if _item_markup_line_items:
                    _items.append(_item_markup_line_items.to_dict())
            _dict['markup_line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "position": obj.get("position"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "uom": obj.get("uom"),
            "total_amount": obj.get("total_amount"),
            "extended_amount": obj.get("extended_amount"),
            "cost_code_id": obj.get("cost_code_id"),
            "tax_code_id": obj.get("tax_code_id"),
            "unit_cost": obj.get("unit_cost"),
            "cost_code": RestV10WorkOrderContractsPost201ResponseLineItemsInnerCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "line_item_type": LineItemType.from_dict(obj["line_item_type"]) if obj.get("line_item_type") is not None else None,
            "markup_line_items": [ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInner.from_dict(_item) for _item in obj["markup_line_items"]] if obj.get("markup_line_items") is not None else None,
            "currency_configuration": RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None
        })
        return _obj


