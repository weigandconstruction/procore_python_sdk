# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BudgetedProductionQuantity(BaseModel):
    """
    Budgeted Production Quantity Object
    """ # noqa: E501
    project_id: Optional[StrictInt] = Field(default=None, description="Project")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="CostCode.  DO NOT provide if your project is configured for Task Codes.")
    wbs_code_id: Optional[StrictInt] = Field(default=None, description="The Production Quantity Code for the Budgeted Production Quantity. This is necessary if your project is configured for Task Codes. DO NOT provide if your project is not configured for Task Codes.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity budgeted for a project cost code")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="Unit of Measure")
    __properties: ClassVar[List[str]] = ["project_id", "cost_code_id", "wbs_code_id", "quantity", "unit_of_measure"]

    @field_validator('unit_of_measure')
    def unit_of_measure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Any value present in the Company list of Units of Measure except those categorized as \"Time\"']):
            raise ValueError("must be one of enum values ('Any value present in the Company list of Units of Measure except those categorized as \"Time\"')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BudgetedProductionQuantity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BudgetedProductionQuantity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "wbs_code_id": obj.get("wbs_code_id"),
            "quantity": obj.get("quantity"),
            "unit_of_measure": obj.get("unit_of_measure")
        })
        return _obj


