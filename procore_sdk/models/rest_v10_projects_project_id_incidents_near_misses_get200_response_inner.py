# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.array_of_task_items_that_were_sent_out_inner_all_of_assignee import ArrayOfTaskItemsThatWereSentOutInnerAllOfAssignee
from procore_sdk.models.harm_source import HarmSource
from procore_sdk.models.party1 import Party1
from procore_sdk.models.rest_v10_projects_project_id_incidents_near_misses_get200_response_inner_all_of_affected_person import RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInnerAllOfAffectedPerson
from procore_sdk.models.rest_v10_projects_project_id_incidents_property_damages_get200_response_inner_all_of_managed_equipment import RestV10ProjectsProjectIdIncidentsPropertyDamagesGet200ResponseInnerAllOfManagedEquipment
from procore_sdk.models.rest_v10_projects_project_id_punch_item_assignments_id_get200_response_vendor import RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.work_activity1 import WorkActivity1
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Incident Record ID")
    number: Optional[StrictInt] = Field(default=None, description="The number of the Record")
    full_number: Optional[StrictStr] = Field(default=None, description="The Incident Number combined with the Record Number")
    incident_id: Optional[StrictInt] = Field(default=None, description="The id of the Incident to which the record belongs")
    recordable: Optional[StrictBool] = Field(default=None, description="Indicates whether the Incident Record is recordable")
    type: Optional[StrictStr] = Field(default=None, description="The type of incident record (environmental, injury, near_miss, property_damage)")
    incident_title: Optional[StrictStr] = Field(default=None, description="The title of the Incident to which the record belongs")
    incident_private: Optional[StrictBool] = Field(default=None, description="Indicates whether the Incident to which the record belongs is private")
    summary: Optional[StrictStr] = Field(default=None, description="Summary combining the affliction type, body part affected, and source of harm.")
    description_plain_text: Optional[StrictStr] = Field(default=None, description="Description of event")
    description: Optional[StrictStr] = Field(default=None, description="Description of event in Rich Text format")
    affected_company: Optional[RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor] = None
    created_at: Optional[datetime] = Field(default=None, description="Timestamp of creation")
    deleted_at: Optional[datetime] = Field(default=None, description="Timestamp of deletion")
    managed_equipment: Optional[RestV10ProjectsProjectIdIncidentsPropertyDamagesGet200ResponseInnerAllOfManagedEquipment] = None
    incident_created_by: Optional[ArrayOfTaskItemsThatWereSentOutInnerAllOfAssignee] = None
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of last update")
    work_activity: Optional[WorkActivity1] = None
    affected_party: Optional[Party1] = None
    affected_person: Optional[RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInnerAllOfAffectedPerson] = None
    harm_source: Optional[HarmSource] = None
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "number", "full_number", "incident_id", "recordable", "type", "incident_title", "incident_private", "summary", "description_plain_text", "description", "affected_company", "created_at", "deleted_at", "managed_equipment", "incident_created_by", "updated_at", "work_activity", "affected_party", "affected_person", "harm_source", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affected_company
        if self.affected_company:
            _dict['affected_company'] = self.affected_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_equipment
        if self.managed_equipment:
            _dict['managed_equipment'] = self.managed_equipment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incident_created_by
        if self.incident_created_by:
            _dict['incident_created_by'] = self.incident_created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_activity
        if self.work_activity:
            _dict['work_activity'] = self.work_activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affected_party
        if self.affected_party:
            _dict['affected_party'] = self.affected_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affected_person
        if self.affected_person:
            _dict['affected_person'] = self.affected_person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of harm_source
        if self.harm_source:
            _dict['harm_source'] = self.harm_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if affected_company (nullable) is None
        # and model_fields_set contains the field
        if self.affected_company is None and "affected_company" in self.model_fields_set:
            _dict['affected_company'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if managed_equipment (nullable) is None
        # and model_fields_set contains the field
        if self.managed_equipment is None and "managed_equipment" in self.model_fields_set:
            _dict['managed_equipment'] = None

        # set to None if work_activity (nullable) is None
        # and model_fields_set contains the field
        if self.work_activity is None and "work_activity" in self.model_fields_set:
            _dict['work_activity'] = None

        # set to None if affected_party (nullable) is None
        # and model_fields_set contains the field
        if self.affected_party is None and "affected_party" in self.model_fields_set:
            _dict['affected_party'] = None

        # set to None if affected_person (nullable) is None
        # and model_fields_set contains the field
        if self.affected_person is None and "affected_person" in self.model_fields_set:
            _dict['affected_person'] = None

        # set to None if harm_source (nullable) is None
        # and model_fields_set contains the field
        if self.harm_source is None and "harm_source" in self.model_fields_set:
            _dict['harm_source'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "full_number": obj.get("full_number"),
            "incident_id": obj.get("incident_id"),
            "recordable": obj.get("recordable"),
            "type": obj.get("type"),
            "incident_title": obj.get("incident_title"),
            "incident_private": obj.get("incident_private"),
            "summary": obj.get("summary"),
            "description_plain_text": obj.get("description_plain_text"),
            "description": obj.get("description"),
            "affected_company": RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor.from_dict(obj["affected_company"]) if obj.get("affected_company") is not None else None,
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "managed_equipment": RestV10ProjectsProjectIdIncidentsPropertyDamagesGet200ResponseInnerAllOfManagedEquipment.from_dict(obj["managed_equipment"]) if obj.get("managed_equipment") is not None else None,
            "incident_created_by": ArrayOfTaskItemsThatWereSentOutInnerAllOfAssignee.from_dict(obj["incident_created_by"]) if obj.get("incident_created_by") is not None else None,
            "updated_at": obj.get("updated_at"),
            "work_activity": WorkActivity1.from_dict(obj["work_activity"]) if obj.get("work_activity") is not None else None,
            "affected_party": Party1.from_dict(obj["affected_party"]) if obj.get("affected_party") is not None else None,
            "affected_person": RestV10ProjectsProjectIdIncidentsNearMissesGet200ResponseInnerAllOfAffectedPerson.from_dict(obj["affected_person"]) if obj.get("affected_person") is not None else None,
            "harm_source": HarmSource.from_dict(obj["harm_source"]) if obj.get("harm_source") is not None else None,
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


