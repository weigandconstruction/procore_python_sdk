# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.bim_file_extraction_item_artifact import BIMFileExtractionItemArtifact
from procore_sdk.models.bim_file_extraction_item_error import BIMFileExtractionItemError
from typing import Optional, Set
from typing_extensions import Self

class BIMFileExtractionItem(BaseModel):
    """
    BIMFileExtractionItem
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    bim_file_extraction_id: Optional[StrictInt] = Field(default=None, description="BIM File extraction ID")
    item_type: Optional[StrictStr] = Field(default=None, description="Extraction type")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Extraction progress")
    artifact: Optional[BIMFileExtractionItemArtifact] = None
    error: Optional[BIMFileExtractionItemError] = None
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    __properties: ClassVar[List[str]] = ["id", "bim_file_extraction_id", "item_type", "progress", "artifact", "error", "created_at", "updated_at"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Grid', 'MobileFormat', 'Properties', 'WebFormat', 'ObjectSearch', 'ViewpointCollection']):
            raise ValueError("must be one of enum values ('Grid', 'MobileFormat', 'Properties', 'WebFormat', 'ObjectSearch', 'ViewpointCollection')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMFileExtractionItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict['artifact'] = self.artifact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMFileExtractionItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bim_file_extraction_id": obj.get("bim_file_extraction_id"),
            "item_type": obj.get("item_type"),
            "progress": obj.get("progress"),
            "artifact": BIMFileExtractionItemArtifact.from_dict(obj["artifact"]) if obj.get("artifact") is not None else None,
            "error": BIMFileExtractionItemError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


