# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_companies_company_id_programs_post201_response_all_of_projects_inner import RestV10CompaniesCompanyIdProgramsPost201ResponseAllOfProjectsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdProgramsPost201Response(BaseModel):
    """
    RestV10CompaniesCompanyIdProgramsPost201Response
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Program ID")
    name: Optional[StrictStr] = Field(default=None, description="Program name")
    address_freeform: Optional[StrictStr] = Field(default=None, description="Program address")
    website: Optional[StrictStr] = Field(default=None, description="Program website")
    zip: Optional[StrictStr] = Field(default=None, description="Program zip-code")
    longitude: Optional[StrictStr] = Field(default=None, description="Program longitude")
    latitude: Optional[StrictStr] = Field(default=None, description="Program latitude")
    projects: Optional[List[RestV10CompaniesCompanyIdProgramsPost201ResponseAllOfProjectsInner]] = Field(default=None, description="Array of program projects")
    __properties: ClassVar[List[str]] = ["id", "name", "address_freeform", "website", "zip", "longitude", "latitude", "projects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdProgramsPost201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        # set to None if address_freeform (nullable) is None
        # and model_fields_set contains the field
        if self.address_freeform is None and "address_freeform" in self.model_fields_set:
            _dict['address_freeform'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdProgramsPost201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address_freeform": obj.get("address_freeform"),
            "website": obj.get("website"),
            "zip": obj.get("zip"),
            "longitude": obj.get("longitude"),
            "latitude": obj.get("latitude"),
            "projects": [RestV10CompaniesCompanyIdProgramsPost201ResponseAllOfProjectsInner.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None
        })
        return _obj


