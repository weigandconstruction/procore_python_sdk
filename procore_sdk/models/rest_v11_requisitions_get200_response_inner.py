# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_custom_fields import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_attachments_inner import RestV11RequisitionsGet200ResponseInnerAttachmentsInner
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_created_by import RestV11RequisitionsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_currency_configuration import RestV11RequisitionsGet200ResponseInnerCurrencyConfiguration
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_item_packages_inner import RestV11RequisitionsGet200ResponseInnerItemPackagesInner
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_items_inner import RestV11RequisitionsGet200ResponseInnerItemsInner
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_summary import RestV11RequisitionsGet200ResponseInnerSummary
from procore_sdk.models.rest_v11_requisitions_get200_response_inner_summary_text import RestV11RequisitionsGet200ResponseInnerSummaryText
from typing import Optional, Set
from typing_extensions import Self

class RestV11RequisitionsGet200ResponseInner(BaseModel):
    """
    Extended Requisition (Subcontractor Invoice)
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    previous_requisition_id: Optional[StrictInt] = Field(default=None, description="ID for the previous requisition before this one on the same contract")
    project_id: Optional[StrictInt] = Field(default=None, description="Project ID")
    billing_date: Optional[date] = Field(default=None, description="Billing date")
    created_at: Optional[datetime] = Field(default=None, description="Date req was created")
    updated_at: Optional[datetime] = Field(default=None, description="Date req was last updated")
    commitment_id: Optional[StrictInt] = Field(default=None, description="commitment ID")
    commitment_type: Optional[StrictStr] = Field(default=None, description="Commitment Type")
    contract_name: Optional[StrictStr] = Field(default=None, description="Contract Name")
    deletable: Optional[StrictBool] = Field(default=None, description="A boolean indicating whether or not the invoice can be deleted.")
    final: Optional[StrictBool] = Field(default=None, description="true or false value indicating whether or not this is the final invoice")
    vendor_name: Optional[StrictStr] = Field(default=None, description="Name of Vendor for Invoice")
    vendor_id: Optional[StrictInt] = Field(default=None, description="ID of Vendor for Invoice")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Invoice number")
    invoice_type: Optional[StrictStr] = Field(default=None, description="Invoice type (present in all views)")
    origin_data: Optional[StrictStr] = Field(default=None, description="Requisition (Subcontractor Invoice) third party data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Requisition (Subcontractor Invoice) third party ID")
    payment_date: Optional[date] = Field(default=None, description="Date requisition was paid")
    percent_complete: Optional[StrictStr] = Field(default=None, description="Percent complete")
    period_id: Optional[StrictInt] = Field(default=None, description="Period ID")
    requisition_start: Optional[date] = Field(default=None, description="Requisition (Subcontractor Invoice) start date")
    requisition_end: Optional[date] = Field(default=None, description="Requisition (Subcontractor Invoice) end date")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    erp_status: Optional[StrictStr] = Field(default=None, description="Current ERP status of Requisition")
    number: Optional[StrictInt] = Field(default=None, description="Requisition (Subcontractor Invoice) number")
    submitted_at: Optional[date] = Field(default=None, description="Date requisition was submitted")
    total_claimed_amount: Optional[StrictStr] = Field(default=None, description="Total Claimed Amount for the Invoice")
    electronic_signature_id: Optional[StrictInt] = Field(default=None, description="Electronic Signature ID")
    move_materials_to_previous_work_completed: Optional[StrictBool] = Field(default=None, description="A boolean indicating if should move materials to previous work completed.")
    summary_text: Optional[RestV11RequisitionsGet200ResponseInnerSummaryText] = None
    summary: Optional[RestV11RequisitionsGet200ResponseInnerSummary] = None
    created_by: Optional[RestV11RequisitionsGet200ResponseInnerCreatedBy] = None
    custom_fields: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields] = None
    currency_configuration: Optional[RestV11RequisitionsGet200ResponseInnerCurrencyConfiguration] = None
    attachments: Optional[List[RestV11RequisitionsGet200ResponseInnerAttachmentsInner]] = Field(default=None, description="Attachments")
    items: Optional[List[RestV11RequisitionsGet200ResponseInnerItemsInner]] = Field(default=None, description="Requisition items. Included only when the views query param includes 'extended' or 'items'.")
    item_packages: Optional[List[RestV11RequisitionsGet200ResponseInnerItemPackagesInner]] = Field(default=None, description="Requisition item packages. An item package can have either a contract or change order as its parent entity. Included only when the views query param includes 'extended' or 'items'.")
    __properties: ClassVar[List[str]] = ["id", "previous_requisition_id", "project_id", "billing_date", "created_at", "updated_at", "commitment_id", "commitment_type", "contract_name", "deletable", "final", "vendor_name", "vendor_id", "invoice_number", "invoice_type", "origin_data", "origin_id", "payment_date", "percent_complete", "period_id", "requisition_start", "requisition_end", "status", "erp_status", "number", "submitted_at", "total_claimed_amount", "electronic_signature_id", "move_materials_to_previous_work_completed", "summary_text", "summary", "created_by", "custom_fields", "currency_configuration", "attachments", "items", "item_packages"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'under_review', 'revise_and_resubmit', 'approved', 'approved_as_noted', 'pending_owner_approval']):
            raise ValueError("must be one of enum values ('draft', 'under_review', 'revise_and_resubmit', 'approved', 'approved_as_noted', 'pending_owner_approval')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summary_text
        if self.summary_text:
            _dict['summary_text'] = self.summary_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_packages (list)
        _items = []
        if self.item_packages:
            for _item_item_packages in self.item_packages:
                if _item_item_packages:
                    _items.append(_item_item_packages.to_dict())
            _dict['item_packages'] = _items
        # set to None if final (nullable) is None
        # and model_fields_set contains the field
        if self.final is None and "final" in self.model_fields_set:
            _dict['final'] = None

        # set to None if invoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_number is None and "invoice_number" in self.model_fields_set:
            _dict['invoice_number'] = None

        # set to None if origin_data (nullable) is None
        # and model_fields_set contains the field
        if self.origin_data is None and "origin_data" in self.model_fields_set:
            _dict['origin_data'] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        # set to None if payment_date (nullable) is None
        # and model_fields_set contains the field
        if self.payment_date is None and "payment_date" in self.model_fields_set:
            _dict['payment_date'] = None

        # set to None if submitted_at (nullable) is None
        # and model_fields_set contains the field
        if self.submitted_at is None and "submitted_at" in self.model_fields_set:
            _dict['submitted_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11RequisitionsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "previous_requisition_id": obj.get("previous_requisition_id"),
            "project_id": obj.get("project_id"),
            "billing_date": obj.get("billing_date"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "commitment_id": obj.get("commitment_id"),
            "commitment_type": obj.get("commitment_type"),
            "contract_name": obj.get("contract_name"),
            "deletable": obj.get("deletable"),
            "final": obj.get("final"),
            "vendor_name": obj.get("vendor_name"),
            "vendor_id": obj.get("vendor_id"),
            "invoice_number": obj.get("invoice_number"),
            "invoice_type": obj.get("invoice_type"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "payment_date": obj.get("payment_date"),
            "percent_complete": obj.get("percent_complete"),
            "period_id": obj.get("period_id"),
            "requisition_start": obj.get("requisition_start"),
            "requisition_end": obj.get("requisition_end"),
            "status": obj.get("status"),
            "erp_status": obj.get("erp_status"),
            "number": obj.get("number"),
            "submitted_at": obj.get("submitted_at"),
            "total_claimed_amount": obj.get("total_claimed_amount"),
            "electronic_signature_id": obj.get("electronic_signature_id"),
            "move_materials_to_previous_work_completed": obj.get("move_materials_to_previous_work_completed"),
            "summary_text": RestV11RequisitionsGet200ResponseInnerSummaryText.from_dict(obj["summary_text"]) if obj.get("summary_text") is not None else None,
            "summary": RestV11RequisitionsGet200ResponseInnerSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "created_by": RestV11RequisitionsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "custom_fields": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "currency_configuration": RestV11RequisitionsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None,
            "attachments": [RestV11RequisitionsGet200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "items": [RestV11RequisitionsGet200ResponseInnerItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "item_packages": [RestV11RequisitionsGet200ResponseInnerItemPackagesInner.from_dict(_item) for _item in obj["item_packages"]] if obj.get("item_packages") is not None else None
        })
        return _obj


