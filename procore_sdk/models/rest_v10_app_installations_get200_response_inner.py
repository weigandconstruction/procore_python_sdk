# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_app_installations_get200_response_inner_all_of_developer_app import RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperApp
from procore_sdk.models.rest_v10_app_installations_get200_response_inner_all_of_installer import RestV10AppInstallationsGet200ResponseInnerAllOfInstaller
from typing import Optional, Set
from typing_extensions import Self

class RestV10AppInstallationsGet200ResponseInner(BaseModel):
    """
    RestV10AppInstallationsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    app_uid: Optional[StrictStr] = Field(default=None, description="App UID")
    components: Optional[List[StrictStr]] = Field(default=None, description="Component types associated with the installation")
    developer_app: Optional[RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperApp] = None
    installed_at: Optional[datetime] = Field(default=None, description="Date the app was installed or reinstalled")
    installer: Optional[RestV10AppInstallationsGet200ResponseInnerAllOfInstaller] = None
    semantic_version: Optional[StrictStr] = Field(default=None, description="Semantic version of the app")
    status: Optional[StrictStr] = Field(default=None, description="Installation status")
    uninstalled_at: Optional[datetime] = Field(default=None, description="Date the app was uninstalled")
    uninstaller: Optional[RestV10AppInstallationsGet200ResponseInnerAllOfInstaller] = None
    updatable_app_version_id: Optional[StrictStr] = Field(default=None, description="ID of the app version that can be updated to")
    __properties: ClassVar[List[str]] = ["id", "app_uid", "components", "developer_app", "installed_at", "installer", "semantic_version", "status", "uninstalled_at", "uninstaller", "updatable_app_version_id"]

    @field_validator('components')
    def components_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['fullscreen', 'iframe', 'oauth', 'sidepanel']):
                raise ValueError("each list item must be one of ('fullscreen', 'iframe', 'oauth', 'sidepanel')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['installed', 'uninstalled']):
            raise ValueError("must be one of enum values ('installed', 'uninstalled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10AppInstallationsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of developer_app
        if self.developer_app:
            _dict['developer_app'] = self.developer_app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installer
        if self.installer:
            _dict['installer'] = self.installer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uninstaller
        if self.uninstaller:
            _dict['uninstaller'] = self.uninstaller.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10AppInstallationsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "app_uid": obj.get("app_uid"),
            "components": obj.get("components"),
            "developer_app": RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperApp.from_dict(obj["developer_app"]) if obj.get("developer_app") is not None else None,
            "installed_at": obj.get("installed_at"),
            "installer": RestV10AppInstallationsGet200ResponseInnerAllOfInstaller.from_dict(obj["installer"]) if obj.get("installer") is not None else None,
            "semantic_version": obj.get("semantic_version"),
            "status": obj.get("status"),
            "uninstalled_at": obj.get("uninstalled_at"),
            "uninstaller": RestV10AppInstallationsGet200ResponseInnerAllOfInstaller.from_dict(obj["uninstaller"]) if obj.get("uninstaller") is not None else None,
            "updatable_app_version_id": obj.get("updatable_app_version_id")
        })
        return _obj


