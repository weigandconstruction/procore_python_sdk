# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_budget_view_snapshots_budget_view_snapshot_id_detail_rows_get200_response_inner_budget_forecast import RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInnerBudgetForecast
from procore_sdk.models.rest_v10_budget_views_budget_view_id_summary_rows_get200_response_inner_currency_configuration import RestV10BudgetViewsBudgetViewIdSummaryRowsGet200ResponseInnerCurrencyConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner(BaseModel):
    """
    Budget View Detail Row
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    deletable: Optional[StrictBool] = Field(default=None, description="Indicates if the underlying Budget Line Item can be deleted")
    company_id: Optional[StrictInt] = Field(default=None, description="Company ID")
    company: Optional[StrictStr] = Field(default=None, description="Company name")
    project_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    wbs_code_id: Optional[StrictInt] = Field(default=None, description="WBS Code ID or null if WBS information is not available")
    biller_id: Optional[StrictInt] = Field(default=None, description="Sub-job or project ID")
    root_cost_code_id: Optional[StrictInt] = Field(default=None, description="Division ID")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="Cost code ID")
    cost_code_origin_id: Optional[StrictStr] = Field(default=None, description="Cost code origin ID")
    category_id: Optional[StrictInt] = Field(default=None, description="Category ID")
    project: Optional[StrictStr] = Field(default=None, description="Project name")
    biller: Optional[StrictStr] = Field(default=None, description="Biller name")
    biller_type: Optional[StrictStr] = Field(default=None, description="Biller type")
    root_cost_code: Optional[StrictStr] = Field(default=None, description="Division name")
    cost_code: Optional[StrictStr] = Field(default=None, description="Cost code name")
    category: Optional[StrictStr] = Field(default=None, description="Category")
    budget_modifications: Optional[StrictStr] = Field(default=None, description="Budget modifications")
    original_budget_amount: Optional[StrictStr] = Field(default=None, description="Original budget amount")
    budget_forecast: Optional[RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInnerBudgetForecast] = None
    currency_configuration: Optional[RestV10BudgetViewsBudgetViewIdSummaryRowsGet200ResponseInnerCurrencyConfiguration] = None
    unbudgeted_reason: Optional[StrictStr] = Field(default=None, description="Reason a line does not have a budget_line_item_id")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "deletable", "company_id", "company", "project_id", "wbs_code_id", "biller_id", "root_cost_code_id", "cost_code_id", "cost_code_origin_id", "category_id", "project", "biller", "biller_type", "root_cost_code", "cost_code", "category", "budget_modifications", "original_budget_amount", "budget_forecast", "currency_configuration", "unbudgeted_reason"]

    @field_validator('biller_type')
    def biller_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Project', 'SubJob']):
            raise ValueError("must be one of enum values ('Project', 'SubJob')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of budget_forecast
        if self.budget_forecast:
            _dict['budget_forecast'] = self.budget_forecast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if cost_code_origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.cost_code_origin_id is None and "cost_code_origin_id" in self.model_fields_set:
            _dict['cost_code_origin_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "deletable": obj.get("deletable"),
            "company_id": obj.get("company_id"),
            "company": obj.get("company"),
            "project_id": obj.get("project_id"),
            "wbs_code_id": obj.get("wbs_code_id"),
            "biller_id": obj.get("biller_id"),
            "root_cost_code_id": obj.get("root_cost_code_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "cost_code_origin_id": obj.get("cost_code_origin_id"),
            "category_id": obj.get("category_id"),
            "project": obj.get("project"),
            "biller": obj.get("biller"),
            "biller_type": obj.get("biller_type"),
            "root_cost_code": obj.get("root_cost_code"),
            "cost_code": obj.get("cost_code"),
            "category": obj.get("category"),
            "budget_modifications": obj.get("budget_modifications"),
            "original_budget_amount": obj.get("original_budget_amount"),
            "budget_forecast": RestV10BudgetViewSnapshotsBudgetViewSnapshotIdDetailRowsGet200ResponseInnerBudgetForecast.from_dict(obj["budget_forecast"]) if obj.get("budget_forecast") is not None else None,
            "currency_configuration": RestV10BudgetViewsBudgetViewIdSummaryRowsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None,
            "unbudgeted_reason": obj.get("unbudgeted_reason")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


