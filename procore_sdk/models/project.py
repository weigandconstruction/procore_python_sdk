# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Project Id")
    country_code: Optional[StrictStr] = Field(default=None, description="Country Code")
    country_name: Optional[StrictStr] = Field(default=None, description="Country Name")
    state_code: Optional[StrictStr] = Field(default=None, description="State Code")
    state_name: Optional[StrictStr] = Field(default=None, description="State Name")
    county: Optional[StrictStr] = Field(default=None, description="County")
    city: Optional[StrictStr] = Field(default=None, description="City")
    address: Optional[StrictStr] = Field(default=None, description="Address")
    zip: Optional[StrictStr] = Field(default=None, description="ZIP")
    phone: Optional[StrictStr] = Field(default=None, description="Phone")
    fax: Optional[StrictStr] = Field(default=None, description="Fax")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time Zone")
    time_zone_name: Optional[StrictStr] = Field(default=None, description="Time Zone Name")
    logo_url: Optional[StrictStr] = Field(default=None, description="Logo URL")
    __properties: ClassVar[List[str]] = ["id", "country_code", "country_name", "state_code", "state_name", "county", "city", "address", "zip", "phone", "fax", "time_zone", "time_zone_name", "logo_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['state_code'] = None

        # set to None if state_name (nullable) is None
        # and model_fields_set contains the field
        if self.state_name is None and "state_name" in self.model_fields_set:
            _dict['state_name'] = None

        # set to None if county (nullable) is None
        # and model_fields_set contains the field
        if self.county is None and "county" in self.model_fields_set:
            _dict['county'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if fax (nullable) is None
        # and model_fields_set contains the field
        if self.fax is None and "fax" in self.model_fields_set:
            _dict['fax'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "country_code": obj.get("country_code"),
            "country_name": obj.get("country_name"),
            "state_code": obj.get("state_code"),
            "state_name": obj.get("state_name"),
            "county": obj.get("county"),
            "city": obj.get("city"),
            "address": obj.get("address"),
            "zip": obj.get("zip"),
            "phone": obj.get("phone"),
            "fax": obj.get("fax"),
            "time_zone": obj.get("time_zone"),
            "time_zone_name": obj.get("time_zone_name"),
            "logo_url": obj.get("logo_url")
        })
        return _obj


