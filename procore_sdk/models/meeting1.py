# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Meeting1(BaseModel):
    """
    Meeting object
    """ # noqa: E501
    position: Optional[StrictInt] = Field(default=None, description="The Position of the Meeting(Can only be updated if the Meeting is the first Meeting in the series)")
    title: Optional[StrictStr] = Field(default=None, description="The Title of the Meeting")
    location: Optional[StrictStr] = Field(default=None, description="The Location of the Meeting")
    minutes: Optional[StrictStr] = Field(default=None, description="The Minutes of the Meeting")
    overview: Optional[StrictStr] = Field(default=None, description="The Description of the Meeting")
    occurred: Optional[StrictBool] = Field(default=False, description="The Occurred status of the Meeting")
    starts_at: Optional[StrictStr] = Field(default=None, description="The Start Time of the Meeting")
    ends_at: Optional[StrictStr] = Field(default=None, description="The Finish Time of the Meeting")
    time_zone: Optional[StrictStr] = Field(default=None, description="The Timezone of the Meeting")
    is_private: Optional[StrictBool] = Field(default=None, description="The Private status of the Meeting")
    conclusion: Optional[StrictStr] = Field(default=None, description="The Conclusion of the Meeting")
    is_draft: Optional[StrictBool] = Field(default=False, description="The Draft status of the Meeting")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Uploads to attach to the response")
    __properties: ClassVar[List[str]] = ["position", "title", "location", "minutes", "overview", "occurred", "starts_at", "ends_at", "time_zone", "is_private", "conclusion", "is_draft", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Meeting1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Meeting1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "position": obj.get("position"),
            "title": obj.get("title"),
            "location": obj.get("location"),
            "minutes": obj.get("minutes"),
            "overview": obj.get("overview"),
            "occurred": obj.get("occurred") if obj.get("occurred") is not None else False,
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "time_zone": obj.get("time_zone"),
            "is_private": obj.get("is_private"),
            "conclusion": obj.get("conclusion"),
            "is_draft": obj.get("is_draft") if obj.get("is_draft") is not None else False,
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids")
        })
        return _obj


