# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.affliction_type import AfflictionType
from typing import Optional, Set
from typing_extensions import Self

class IncidentAffliction(BaseModel):
    """
    IncidentAffliction
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Affliction ID")
    affliction_type: Optional[AfflictionType] = None
    affected_body_part: Optional[StrictStr] = Field(default=None, description="The body part affected by the affliction")
    __properties: ClassVar[List[str]] = ["id", "affliction_type", "affected_body_part"]

    @field_validator('affected_body_part')
    def affected_body_part_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right']):
            raise ValueError("must be one of enum values ('abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncidentAffliction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affliction_type
        if self.affliction_type:
            _dict['affliction_type'] = self.affliction_type.to_dict()
        # set to None if affliction_type (nullable) is None
        # and model_fields_set contains the field
        if self.affliction_type is None and "affliction_type" in self.model_fields_set:
            _dict['affliction_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncidentAffliction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "affliction_type": AfflictionType.from_dict(obj["affliction_type"]) if obj.get("affliction_type") is not None else None,
            "affected_body_part": obj.get("affected_body_part")
        })
        return _obj


