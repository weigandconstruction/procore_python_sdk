# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_app_installations_get200_response_inner_all_of_developer_app_marketplace_app_helpful_links_inner import RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppHelpfulLinksInner
from procore_sdk.models.rest_v10_app_installations_get200_response_inner_all_of_developer_app_marketplace_app_pictures_inner import RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppPicturesInner
from procore_sdk.models.rest_v10_app_installations_get200_response_inner_all_of_developer_app_marketplace_app_videos_inner import RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppVideosInner
from procore_sdk.models.rest_v10_app_installations_get200_response_inner_all_of_developer_app_marketplace_app_website_link import RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppWebsiteLink
from typing import Optional, Set
from typing_extensions import Self

class RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceApp(BaseModel):
    """
    RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceApp
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    about: Optional[StrictStr] = Field(default=None, description="About")
    approval_state: Optional[StrictStr] = Field(default=None, description="Approval state")
    built_by: Optional[StrictStr] = Field(default=None, description="Built by")
    costs_money: Optional[StrictBool] = Field(default=None, description="Costs money")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    feature_bullets: Optional[List[StrictStr]] = Field(default=None, description="Feature bullets")
    helpful_links: Optional[List[RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppHelpfulLinksInner]] = Field(default=None, description="Helpful links")
    how_it_works: Optional[StrictStr] = Field(default=None, description="How it works")
    live: Optional[StrictBool] = Field(default=None, description="Live")
    pictures: Optional[List[RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppPicturesInner]] = Field(default=None, description="Pictures")
    public_name: Optional[StrictStr] = Field(default=None, description="Public name")
    requirements: Optional[List[StrictStr]] = Field(default=None, description="Requirements")
    small_logo_url: Optional[StrictStr] = Field(default=None, description="URL to the small logo image")
    state: Optional[StrictStr] = Field(default=None, description="State")
    support_email: Optional[StrictStr] = Field(default=None, description="Support email")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    version: Optional[StrictInt] = Field(default=None, description="Version")
    videos: Optional[List[RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppVideosInner]] = Field(default=None, description="Videos")
    website_link: Optional[RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppWebsiteLink] = None
    __properties: ClassVar[List[str]] = ["id", "about", "approval_state", "built_by", "costs_money", "created_at", "description", "feature_bullets", "helpful_links", "how_it_works", "live", "pictures", "public_name", "requirements", "small_logo_url", "state", "support_email", "updated_at", "version", "videos", "website_link"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in helpful_links (list)
        _items = []
        if self.helpful_links:
            for _item_helpful_links in self.helpful_links:
                if _item_helpful_links:
                    _items.append(_item_helpful_links.to_dict())
            _dict['helpful_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pictures (list)
        _items = []
        if self.pictures:
            for _item_pictures in self.pictures:
                if _item_pictures:
                    _items.append(_item_pictures.to_dict())
            _dict['pictures'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['videos'] = _items
        # override the default output from pydantic by calling `to_dict()` of website_link
        if self.website_link:
            _dict['website_link'] = self.website_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "about": obj.get("about"),
            "approval_state": obj.get("approval_state"),
            "built_by": obj.get("built_by"),
            "costs_money": obj.get("costs_money"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "feature_bullets": obj.get("feature_bullets"),
            "helpful_links": [RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppHelpfulLinksInner.from_dict(_item) for _item in obj["helpful_links"]] if obj.get("helpful_links") is not None else None,
            "how_it_works": obj.get("how_it_works"),
            "live": obj.get("live"),
            "pictures": [RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppPicturesInner.from_dict(_item) for _item in obj["pictures"]] if obj.get("pictures") is not None else None,
            "public_name": obj.get("public_name"),
            "requirements": obj.get("requirements"),
            "small_logo_url": obj.get("small_logo_url"),
            "state": obj.get("state"),
            "support_email": obj.get("support_email"),
            "updated_at": obj.get("updated_at"),
            "version": obj.get("version"),
            "videos": [RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppVideosInner.from_dict(_item) for _item in obj["videos"]] if obj.get("videos") is not None else None,
            "website_link": RestV10AppInstallationsGet200ResponseInnerAllOfDeveloperAppMarketplaceAppWebsiteLink.from_dict(obj["website_link"]) if obj.get("website_link") is not None else None
        })
        return _obj


