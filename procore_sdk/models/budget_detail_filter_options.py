# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.budget_detail_filter_options_biller_inner import BudgetDetailFilterOptionsBillerInner
from typing import Optional, Set
from typing_extensions import Self

class BudgetDetailFilterOptions(BaseModel):
    """
    Budget Detail Filters Object
    """ # noqa: E501
    biller: Optional[List[BudgetDetailFilterOptionsBillerInner]] = Field(default=None, description="Sub Job Filter, can pass Sub Job or Project")
    cost_code: Optional[List[StrictInt]] = Field(default=None, description="Cost Code Filter")
    root_cost_code: Optional[List[StrictInt]] = Field(default=None, description="Division Filter")
    cost_type: Optional[List[StrictInt]] = Field(default=None, description="Cost Type Filter")
    vendor: Optional[List[StrictInt]] = Field(default=None, description="Vendor Filter")
    detail_type: Optional[List[StrictStr]] = Field(default=None, description="Detail Type Filter")
    __properties: ClassVar[List[str]] = ["biller", "cost_code", "root_cost_code", "cost_type", "vendor", "detail_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BudgetDetailFilterOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in biller (list)
        _items = []
        if self.biller:
            for _item_biller in self.biller:
                if _item_biller:
                    _items.append(_item_biller.to_dict())
            _dict['biller'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BudgetDetailFilterOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biller": [BudgetDetailFilterOptionsBillerInner.from_dict(_item) for _item in obj["biller"]] if obj.get("biller") is not None else None,
            "cost_code": obj.get("cost_code"),
            "root_cost_code": obj.get("root_cost_code"),
            "cost_type": obj.get("cost_type"),
            "vendor": obj.get("vendor"),
            "detail_type": obj.get("detail_type")
        })
        return _obj


