# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdWeatherLogsPostRequestWeatherLog(BaseModel):
    """
    RestV10ProjectsProjectIdWeatherLogsPostRequestWeatherLog
    """ # noqa: E501
    var_date: date = Field(description="Format: YYYY-MM-DD Example: 2016-04-19", alias="date")
    is_weather_delay: Optional[StrictInt] = Field(default=None, description="Weather delay status")
    sky: Optional[StrictStr] = Field(default=None, description="Sky condition - \"\", \"Clear\", \"Cloudy\", \"Overcast\", \"Fog\", \"Mist\", \"Rain\", \"Snow\", \"Ice/Sleet/Hail\"")
    temperature: Optional[StrictStr] = Field(default=None, description="Weather temperature - \"\", \"Very Hot\", \"Hot\", \"Mild\", \"Cold\", \"Very Cold\"")
    average: Optional[StrictStr] = Field(default=None, description="Average temperature for the workday")
    wind: Optional[StrictStr] = Field(default=None, description="Wind condition - \"\", \"Calm\", \"Light Wind\", \"High Wind\"")
    ground: Optional[StrictStr] = Field(default=None, description="Ground condition - \"\", \"Dry\", \"Wet/Muddy\", \"Flooded\",\"Snow\",\"Frozen\",\"-----\",\"High Tide\",\"Low Tide\", \"Heavy Surf/Swell\"")
    calamity: Optional[StrictStr] = Field(default=None, description="Type of calamity the jobsite was subject to - \"\", \"Earthquake\", \"Fire\", \"Flash Flood\", \"Landslide\", \"Tornado\", \"Hurricane\", \"Snow\",\"Other\"")
    precipitation: Optional[StrictStr] = Field(default=None, description="Precipitation conditions")
    comments: Optional[StrictStr] = Field(default=None, description="Additional comments")
    time: Optional[StrictStr] = Field(default=None, description="UTC time weather conditions were observed. The date of observation must match entry's date.")
    __properties: ClassVar[List[str]] = ["date", "is_weather_delay", "sky", "temperature", "average", "wind", "ground", "calamity", "precipitation", "comments", "time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdWeatherLogsPostRequestWeatherLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdWeatherLogsPostRequestWeatherLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "is_weather_delay": obj.get("is_weather_delay"),
            "sky": obj.get("sky"),
            "temperature": obj.get("temperature"),
            "average": obj.get("average"),
            "wind": obj.get("wind"),
            "ground": obj.get("ground"),
            "calamity": obj.get("calamity"),
            "precipitation": obj.get("precipitation"),
            "comments": obj.get("comments"),
            "time": obj.get("time")
        })
        return _obj


