# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdMonitoringResourcesPostRequestMonitoringResource(BaseModel):
    """
    RestV10ProjectsProjectIdMonitoringResourcesPostRequestMonitoringResource
    """ # noqa: E501
    description: StrictStr = Field(description="Description")
    start_date: date = Field(description="Start Date, expressed in ISO 8601 date format (YYYY-MM-DD)")
    end_date: date = Field(description="End Date, expressed in ISO 8601 date format (YYYY-MM-DD)")
    unit_of_measure: StrictStr = Field(description="Unit of Measure")
    unit_cost: StrictStr = Field(description="Unit Cost")
    utilization: StrictStr = Field(description="Utilization, expressed as a decimal where 1.0 is 100%")
    budget_line_item_id: StrictInt = Field(description="Budget Line Item ID")
    __properties: ClassVar[List[str]] = ["description", "start_date", "end_date", "unit_of_measure", "unit_cost", "utilization", "budget_line_item_id"]

    @field_validator('unit_of_measure')
    def unit_of_measure_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['weeks', 'months']):
            raise ValueError("must be one of enum values ('weeks', 'months')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdMonitoringResourcesPostRequestMonitoringResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdMonitoringResourcesPostRequestMonitoringResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "unit_of_measure": obj.get("unit_of_measure"),
            "unit_cost": obj.get("unit_cost"),
            "utilization": obj.get("utilization"),
            "budget_line_item_id": obj.get("budget_line_item_id")
        })
        return _obj


