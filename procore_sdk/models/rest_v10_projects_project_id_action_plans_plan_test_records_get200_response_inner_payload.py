# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_inspection_templates_inspection_template_id_item_references_get200_response_inner_payload_attachment import RestV10ProjectsProjectIdInspectionTemplatesInspectionTemplateIdItemReferencesGet200ResponseInnerPayloadAttachment
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdActionPlansPlanTestRecordsGet200ResponseInnerPayload(BaseModel):
    """
    Contains specific attributes depending on the type of Action Plan Test Record
    """ # noqa: E501
    checklist_id: Optional[StrictInt] = Field(default=None, description="Checklist ID")
    checklist_template_id: Optional[StrictInt] = Field(default=None, description="Checklist Template ID")
    form_id: Optional[StrictInt] = Field(default=None, description="Form ID")
    form_template_id: Optional[StrictInt] = Field(default=None, description="Form Template ID")
    generic_tool_id: Optional[StrictInt] = Field(default=None, description="Generic Tool ID")
    generic_tool_item_id: Optional[StrictInt] = Field(default=None, description="Generic Tool Item ID")
    meeting_id: Optional[StrictInt] = Field(default=None, description="Meeting ID")
    submittal_log_id: Optional[StrictInt] = Field(default=None, description="Submittal Log ID")
    observation_item_id: Optional[StrictInt] = Field(default=None, description="Observation Item ID")
    attachment: Optional[RestV10ProjectsProjectIdInspectionTemplatesInspectionTemplateIdItemReferencesGet200ResponseInnerPayloadAttachment] = None
    __properties: ClassVar[List[str]] = ["checklist_id", "checklist_template_id", "form_id", "form_template_id", "generic_tool_id", "generic_tool_item_id", "meeting_id", "submittal_log_id", "observation_item_id", "attachment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlanTestRecordsGet200ResponseInnerPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachment
        if self.attachment:
            _dict['attachment'] = self.attachment.to_dict()
        # set to None if generic_tool_id (nullable) is None
        # and model_fields_set contains the field
        if self.generic_tool_id is None and "generic_tool_id" in self.model_fields_set:
            _dict['generic_tool_id'] = None

        # set to None if generic_tool_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.generic_tool_item_id is None and "generic_tool_item_id" in self.model_fields_set:
            _dict['generic_tool_item_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlanTestRecordsGet200ResponseInnerPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checklist_id": obj.get("checklist_id"),
            "checklist_template_id": obj.get("checklist_template_id"),
            "form_id": obj.get("form_id"),
            "form_template_id": obj.get("form_template_id"),
            "generic_tool_id": obj.get("generic_tool_id"),
            "generic_tool_item_id": obj.get("generic_tool_item_id"),
            "meeting_id": obj.get("meeting_id"),
            "submittal_log_id": obj.get("submittal_log_id"),
            "observation_item_id": obj.get("observation_item_id"),
            "attachment": RestV10ProjectsProjectIdInspectionTemplatesInspectionTemplateIdItemReferencesGet200ResponseInnerPayloadAttachment.from_dict(obj["attachment"]) if obj.get("attachment") is not None else None
        })
        return _obj


