# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class RequisitionSubcontractorInvoice2(BaseModel):
    """
    Requisition (Subcontractor Invoice)
    """ # noqa: E501
    period_id: Optional[StrictInt] = Field(default=None, description="Period ID")
    requisition_start: Optional[date] = Field(default=None, description="Requisition (Subcontractor Invoice) start date")
    requisition_end: Optional[date] = Field(default=None, description="Requisition (Subcontractor Invoice) end date")
    billing_date: Optional[date] = Field(default=None, description="Billing date")
    final: Optional[StrictBool] = Field(default=None, description="true or false value indicating whether or not this is the final invoice")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Invoice number")
    payment_date: Optional[date] = Field(default=None, description="Date requisition was paid")
    origin_data: Optional[StrictStr] = Field(default=None, description="Requisition (Subcontractor Invoice) third party data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Requisition (Subcontractor Invoice) third party ID")
    status: Optional[StrictStr] = Field(default=None, description="Status; admin can set any status, standard and billing recipient can set to under_review (submit) or draft (save)")
    submitted_at: Optional[date] = Field(default=None, description="Date requisition was submitted")
    comment: Optional[StrictStr] = Field(default=None, description="Any comment")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["period_id", "requisition_start", "requisition_end", "billing_date", "final", "invoice_number", "payment_date", "origin_data", "origin_id", "status", "submitted_at", "comment", "custom_field_%{custom_field_definition_id}"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'under_review', 'revise_and_resubmit', 'approved', 'approved_as_noted', 'pending_owner_approval']):
            raise ValueError("must be one of enum values ('draft', 'under_review', 'revise_and_resubmit', 'approved', 'approved_as_noted', 'pending_owner_approval')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequisitionSubcontractorInvoice2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequisitionSubcontractorInvoice2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_id": obj.get("period_id"),
            "requisition_start": obj.get("requisition_start"),
            "requisition_end": obj.get("requisition_end"),
            "billing_date": obj.get("billing_date"),
            "final": obj.get("final"),
            "invoice_number": obj.get("invoice_number"),
            "payment_date": obj.get("payment_date"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "status": obj.get("status"),
            "submitted_at": obj.get("submitted_at"),
            "comment": obj.get("comment"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


