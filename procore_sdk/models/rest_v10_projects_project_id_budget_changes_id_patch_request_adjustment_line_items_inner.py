# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdBudgetChangesIdPatchRequestAdjustmentLineItemsInner(BaseModel):
    """
    Budget Change Adjustment line item
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID of this adjustment")
    type: Optional[StrictStr] = Field(default=None, description="Used to identify type of line item. id uniqueness is guaranteed per type  NOTE: To update an Adjustment Line Item with the type budget_change for an adjustment_number, an Adjustment Line item with the type change_event must exist for the same adjustment_number.")
    ref: Optional[StrictStr] = Field(default=None, description="Identifier used to map line items in the request to their respective objects or errors in the response")
    adjustment_number: Optional[StrictInt] = Field(default=None, description="Number of this adjustment")
    wbs_code_id: Optional[StrictInt] = Field(default=None, description="Work Breakdown Structure Code ID")
    description: Optional[StrictStr] = Field(default=None, description="Description of the adjustment")
    comment: Optional[StrictStr] = Field(default=None, description="Comment of the adjustment")
    calculation_strategy: Optional[StrictStr] = Field(default=None, description="Cost calculation strategy")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated cost quantity")
    uom: Optional[StrictStr] = Field(default=None, description="Unit of measure used")
    unit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated unit cost")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated cost amount")
    change_event_line_item_id: Optional[StrictInt] = Field(default=None, description="ID for the change event line item associated with the adjustment")
    delete: Optional[StrictBool] = Field(default=None, description="Whether this adjustment should be deleted", alias="_delete")
    __properties: ClassVar[List[str]] = ["id", "type", "ref", "adjustment_number", "wbs_code_id", "description", "comment", "calculation_strategy", "quantity", "uom", "unit_cost", "amount", "change_event_line_item_id", "_delete"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['change_event', 'budget_change']):
            raise ValueError("must be one of enum values ('change_event', 'budget_change')")
        return value

    @field_validator('calculation_strategy')
    def calculation_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['automatic', 'manual']):
            raise ValueError("must be one of enum values ('automatic', 'manual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesIdPatchRequestAdjustmentLineItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ref (nullable) is None
        # and model_fields_set contains the field
        if self.ref is None and "ref" in self.model_fields_set:
            _dict['ref'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if change_event_line_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.change_event_line_item_id is None and "change_event_line_item_id" in self.model_fields_set:
            _dict['change_event_line_item_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesIdPatchRequestAdjustmentLineItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "ref": obj.get("ref"),
            "adjustment_number": obj.get("adjustment_number"),
            "wbs_code_id": obj.get("wbs_code_id"),
            "description": obj.get("description"),
            "comment": obj.get("comment"),
            "calculation_strategy": obj.get("calculation_strategy"),
            "quantity": obj.get("quantity"),
            "uom": obj.get("uom"),
            "unit_cost": obj.get("unit_cost"),
            "amount": obj.get("amount"),
            "change_event_line_item_id": obj.get("change_event_line_item_id"),
            "_delete": obj.get("_delete")
        })
        return _obj


