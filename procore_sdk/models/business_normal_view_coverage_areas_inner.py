# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BusinessNormalViewCoverageAreasInner(BaseModel):
    """
    BusinessNormalViewCoverageAreasInner
    """ # noqa: E501
    country_code: Optional[StrictStr] = Field(default=None, description="Country Code")
    google_place_id: Optional[StrictStr] = Field(default=None, description="Google Place ID")
    admin1: Optional[StrictStr] = Field(default=None, description="State (Province)")
    admin2: Optional[StrictStr] = Field(default=None, description="County")
    admin3: Optional[StrictStr] = Field(default=None, description="Not used in US")
    admin4: Optional[StrictStr] = Field(default=None, description="Not used in US")
    locality: Optional[StrictStr] = Field(default=None, description="Locality (City)")
    selected_level: Optional[StrictStr] = Field(default=None, description="The admin level that was originally chosen by user")
    __properties: ClassVar[List[str]] = ["country_code", "google_place_id", "admin1", "admin2", "admin3", "admin4", "locality", "selected_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessNormalViewCoverageAreasInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if admin3 (nullable) is None
        # and model_fields_set contains the field
        if self.admin3 is None and "admin3" in self.model_fields_set:
            _dict['admin3'] = None

        # set to None if admin4 (nullable) is None
        # and model_fields_set contains the field
        if self.admin4 is None and "admin4" in self.model_fields_set:
            _dict['admin4'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessNormalViewCoverageAreasInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country_code": obj.get("country_code"),
            "google_place_id": obj.get("google_place_id"),
            "admin1": obj.get("admin1"),
            "admin2": obj.get("admin2"),
            "admin3": obj.get("admin3"),
            "admin4": obj.get("admin4"),
            "locality": obj.get("locality"),
            "selected_level": obj.get("selected_level")
        })
        return _obj


