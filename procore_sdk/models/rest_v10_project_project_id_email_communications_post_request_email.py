# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectProjectIdEmailCommunicationsPostRequestEmail(BaseModel):
    """
    RestV10ProjectProjectIdEmailCommunicationsPostRequestEmail
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="Body of the email")
    prostore_file_ids: Optional[List[StrictInt]] = Field(default=None, description="Prostore file IDs")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing revision IDs")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File version IDs")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Form IDs")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Image IDs")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Upload UUIDs")
    distribution_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of IDs of the Distributions of the topic")
    cc_distribution_ids: Optional[List[StrictInt]] = Field(default=None, description="User IDs on the email CC distribution")
    bcc_distribution_ids: Optional[List[StrictInt]] = Field(default=None, description="User IDs on the email BCC distribution")
    __properties: ClassVar[List[str]] = ["body", "prostore_file_ids", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids", "distribution_ids", "cc_distribution_ids", "bcc_distribution_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectProjectIdEmailCommunicationsPostRequestEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectProjectIdEmailCommunicationsPostRequestEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "prostore_file_ids": obj.get("prostore_file_ids"),
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids"),
            "distribution_ids": obj.get("distribution_ids"),
            "cc_distribution_ids": obj.get("cc_distribution_ids"),
            "bcc_distribution_ids": obj.get("bcc_distribution_ids")
        })
        return _obj


