# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.checklist4_all_of_sections_attributes_inner import Checklist4AllOfSectionsAttributesInner
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class Checklist4(BaseModel):
    """
    Checklist object
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The Description of the Checklist")
    due_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the Inspection is due.")
    inspection_date: Optional[date] = Field(default=None, description="The Inspection Date of the Checklist")
    inspection_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the Checklist's Type")
    point_of_contact_id: Optional[StrictInt] = Field(default=None, description="The ID of the Checklist's Point of Contact")
    inspectee_id: Optional[StrictInt] = Field(default=None, description="The ID of the Checklist's Inspectee")
    name: Optional[StrictStr] = Field(default=None, description="The Name of the Checklist")
    number: Optional[StrictInt] = Field(default=None, description="The Number of the Checklist")
    personal: Optional[StrictBool] = Field(default=True, description="The Personal status of the Checklist")
    responsible_contractor_id: Optional[StrictInt] = Field(default=None, description="The ID of the Checklist's Responsible Contractor")
    spec_section_id: Optional[StrictInt] = Field(default=None, description="The ID of the Checklist's Specification Section")
    status: Optional[StrictStr] = Field(default=None, description="The Status of the Checklist")
    trade_id: Optional[StrictInt] = Field(default=None, description="The ID of the Checklist's Trade")
    sections_attributes: Optional[List[Checklist4AllOfSectionsAttributesInner]] = Field(default=None, description="An array of hashes of the Checklist's Section attributes")
    inspector_ids: Optional[List[StrictInt]] = Field(default=None, description="An Array of the IDs of the Inspectors")
    distribution_member_ids: Optional[List[StrictInt]] = Field(default=None, description="An Array of the IDs of the Distribution Members")
    location_id: Optional[StrictInt] = Field(default=None, description="The ID of the Location of the Checklist. `location_id` takes precedence over `mt_location")
    mt_location: Optional[List[StrictStr]] = Field(default=None, description="Use for creating a new multi-tier or single-tier Location. Will be ignored if `location_id` is provided")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Uploads to attach to the response")
    __properties: ClassVar[List[str]] = ["description", "due_at", "inspection_date", "inspection_type_id", "point_of_contact_id", "inspectee_id", "name", "number", "personal", "responsible_contractor_id", "spec_section_id", "status", "trade_id", "sections_attributes", "inspector_ids", "distribution_member_ids", "location_id", "mt_location", "custom_field_%{custom_field_definition_id}", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Open', 'Closed']):
            raise ValueError("must be one of enum values ('Open', 'Closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Checklist4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sections_attributes (list)
        _items = []
        if self.sections_attributes:
            for _item_sections_attributes in self.sections_attributes:
                if _item_sections_attributes:
                    _items.append(_item_sections_attributes.to_dict())
            _dict['sections_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Checklist4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "due_at": obj.get("due_at"),
            "inspection_date": obj.get("inspection_date"),
            "inspection_type_id": obj.get("inspection_type_id"),
            "point_of_contact_id": obj.get("point_of_contact_id"),
            "inspectee_id": obj.get("inspectee_id"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "personal": obj.get("personal") if obj.get("personal") is not None else True,
            "responsible_contractor_id": obj.get("responsible_contractor_id"),
            "spec_section_id": obj.get("spec_section_id"),
            "status": obj.get("status"),
            "trade_id": obj.get("trade_id"),
            "sections_attributes": [Checklist4AllOfSectionsAttributesInner.from_dict(_item) for _item in obj["sections_attributes"]] if obj.get("sections_attributes") is not None else None,
            "inspector_ids": obj.get("inspector_ids"),
            "distribution_member_ids": obj.get("distribution_member_ids"),
            "location_id": obj.get("location_id"),
            "mt_location": obj.get("mt_location"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None,
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids")
        })
        return _obj


