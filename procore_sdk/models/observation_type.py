# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.observation_type_name_translations import ObservationTypeNameTranslations
from typing import Optional, Set
from typing_extensions import Self

class ObservationType(BaseModel):
    """
    ObservationType
    """ # noqa: E501
    id: StrictInt = Field(description="Observation Type ID")
    category: StrictStr = Field(description="Observation Type category")
    category_key: Optional[StrictStr] = Field(default=None, description="Observation Type category (snake_case)")
    name: StrictStr = Field(description="Type name")
    active: Optional[StrictBool] = Field(default=None, description="Flag denoting if the Observation Type is available for use")
    company_active: Optional[StrictBool] = Field(default=None, description="Flag denoting if the Company is available for use")
    parent_inactive: Optional[StrictBool] = Field(default=None, description="Flag denoting if the Parent is available for use")
    in_use: Optional[StrictBool] = Field(default=None, description="Flag denoting if the in use is available for use")
    kind: Optional[StrictStr] = Field(default=None, description="kind")
    name_translations: Optional[ObservationTypeNameTranslations] = None
    localized_name: Optional[StrictStr] = Field(default=None, description="returns the localized observation_type name. It'll return custom traslations depending on the param sent in.")
    __properties: ClassVar[List[str]] = ["id", "category", "category_key", "name", "active", "company_active", "parent_inactive", "in_use", "kind", "name_translations", "localized_name"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Quality', 'Safety', 'Commissioning', 'Warranty', 'Work to Complete']):
            raise ValueError("must be one of enum values ('Quality', 'Safety', 'Commissioning', 'Warranty', 'Work to Complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObservationType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name_translations
        if self.name_translations:
            _dict['name_translations'] = self.name_translations.to_dict()
        # set to None if name_translations (nullable) is None
        # and model_fields_set contains the field
        if self.name_translations is None and "name_translations" in self.model_fields_set:
            _dict['name_translations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObservationType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "category": obj.get("category"),
            "category_key": obj.get("category_key"),
            "name": obj.get("name"),
            "active": obj.get("active"),
            "company_active": obj.get("company_active"),
            "parent_inactive": obj.get("parent_inactive"),
            "in_use": obj.get("in_use"),
            "kind": obj.get("kind"),
            "name_translations": ObservationTypeNameTranslations.from_dict(obj["name_translations"]) if obj.get("name_translations") is not None else None,
            "localized_name": obj.get("localized_name")
        })
        return _obj


