# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_waste_logs_get200_response_inner_vendor import RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner_associated_attachments_inner import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerAssociatedAttachmentsInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_approvers_inner_user import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_ball_in_court_inner import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerBallInCourtInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_last_distributed_submittal import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerLastDistributedSubmittal
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_specification_section import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_status import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerStatus
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_submittal_package import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSubmittalPackage
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_type import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerType
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdSubmittalsGet200ResponseInner(BaseModel):
    """
    RestV11ProjectsProjectIdSubmittalsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    approvers: Optional[List[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner]] = None
    associated_attachments: Optional[List[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerAssociatedAttachmentsInner]] = None
    ball_in_court: Optional[List[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerBallInCourtInner]] = None
    cost_code_id: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    created_by: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser] = None
    current_revision: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    distributed_at: Optional[datetime] = None
    distribution_members: Optional[List[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser]] = None
    drawing_ids: Optional[List[StrictInt]] = None
    due_date: Optional[date] = None
    formatted_number: Optional[StrictStr] = None
    issue_date: Optional[date] = None
    last_distributed_submittal: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerLastDistributedSubmittal] = None
    linked_drawing_ids: Optional[List[StrictInt]] = None
    location_id: Optional[StrictInt] = None
    number: Optional[StrictStr] = None
    private: Optional[StrictBool] = None
    received_date: Optional[date] = None
    received_from: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser] = None
    responsible_contractor: Optional[RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor] = None
    revision: Optional[StrictStr] = None
    specification_section: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection] = None
    status: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerStatus] = None
    sub_job_id: Optional[StrictInt] = None
    submit_by: Optional[date] = None
    submittal_manager: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser] = None
    submittal_package: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSubmittalPackage] = None
    title: Optional[StrictStr] = None
    type: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerType] = None
    updated_at: Optional[datetime] = None
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "approvers", "associated_attachments", "ball_in_court", "cost_code_id", "created_at", "created_by", "current_revision", "description", "distributed_at", "distribution_members", "drawing_ids", "due_date", "formatted_number", "issue_date", "last_distributed_submittal", "linked_drawing_ids", "location_id", "number", "private", "received_date", "received_from", "responsible_contractor", "revision", "specification_section", "status", "sub_job_id", "submit_by", "submittal_manager", "submittal_package", "title", "type", "updated_at", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in approvers (list)
        _items = []
        if self.approvers:
            for _item_approvers in self.approvers:
                if _item_approvers:
                    _items.append(_item_approvers.to_dict())
            _dict['approvers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_attachments (list)
        _items = []
        if self.associated_attachments:
            for _item_associated_attachments in self.associated_attachments:
                if _item_associated_attachments:
                    _items.append(_item_associated_attachments.to_dict())
            _dict['associated_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ball_in_court (list)
        _items = []
        if self.ball_in_court:
            for _item_ball_in_court in self.ball_in_court:
                if _item_ball_in_court:
                    _items.append(_item_ball_in_court.to_dict())
            _dict['ball_in_court'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_distributed_submittal
        if self.last_distributed_submittal:
            _dict['last_distributed_submittal'] = self.last_distributed_submittal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of received_from
        if self.received_from:
            _dict['received_from'] = self.received_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsible_contractor
        if self.responsible_contractor:
            _dict['responsible_contractor'] = self.responsible_contractor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_section
        if self.specification_section:
            _dict['specification_section'] = self.specification_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submittal_manager
        if self.submittal_manager:
            _dict['submittal_manager'] = self.submittal_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submittal_package
        if self.submittal_package:
            _dict['submittal_package'] = self.submittal_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "approvers": [RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInner.from_dict(_item) for _item in obj["approvers"]] if obj.get("approvers") is not None else None,
            "associated_attachments": [RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerAssociatedAttachmentsInner.from_dict(_item) for _item in obj["associated_attachments"]] if obj.get("associated_attachments") is not None else None,
            "ball_in_court": [RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerBallInCourtInner.from_dict(_item) for _item in obj["ball_in_court"]] if obj.get("ball_in_court") is not None else None,
            "cost_code_id": obj.get("cost_code_id"),
            "created_at": obj.get("created_at"),
            "created_by": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "current_revision": obj.get("current_revision"),
            "description": obj.get("description"),
            "distributed_at": obj.get("distributed_at"),
            "distribution_members": [RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "drawing_ids": obj.get("drawing_ids"),
            "due_date": obj.get("due_date"),
            "formatted_number": obj.get("formatted_number"),
            "issue_date": obj.get("issue_date"),
            "last_distributed_submittal": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerLastDistributedSubmittal.from_dict(obj["last_distributed_submittal"]) if obj.get("last_distributed_submittal") is not None else None,
            "linked_drawing_ids": obj.get("linked_drawing_ids"),
            "location_id": obj.get("location_id"),
            "number": obj.get("number"),
            "private": obj.get("private"),
            "received_date": obj.get("received_date"),
            "received_from": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser.from_dict(obj["received_from"]) if obj.get("received_from") is not None else None,
            "responsible_contractor": RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor.from_dict(obj["responsible_contractor"]) if obj.get("responsible_contractor") is not None else None,
            "revision": obj.get("revision"),
            "specification_section": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection.from_dict(obj["specification_section"]) if obj.get("specification_section") is not None else None,
            "status": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "sub_job_id": obj.get("sub_job_id"),
            "submit_by": obj.get("submit_by"),
            "submittal_manager": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerApproversInnerUser.from_dict(obj["submittal_manager"]) if obj.get("submittal_manager") is not None else None,
            "submittal_package": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSubmittalPackage.from_dict(obj["submittal_package"]) if obj.get("submittal_package") is not None else None,
            "title": obj.get("title"),
            "type": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "updated_at": obj.get("updated_at"),
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


