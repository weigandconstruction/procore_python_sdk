# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdScheduleSettingsGet200ResponseEmailSettings(BaseModel):
    """
    Email settings
    """ # noqa: E501
    project_schedule_email_setting_id: Optional[StrictInt] = Field(default=None, description="Project schedule email setting")
    send_weekly: Optional[StrictBool] = Field(default=None, description="Send weekly")
    day_of_week: Optional[StrictInt] = Field(default=None, description="Day of week")
    hour_to_send: Optional[StrictInt] = Field(default=None, description="Hour to send")
    weeks_to_show: Optional[StrictInt] = Field(default=None, description="Weeks to show")
    last_sent_at: Optional[datetime] = Field(default=None, description="Last sent at")
    next_scheduled_at: Optional[datetime] = Field(default=None, description="Next scheduled at")
    lookahead_send_weekly: Optional[StrictBool] = Field(default=None, description="Lookahead send weekly")
    lookahead_day_of_week: Optional[StrictInt] = Field(default=None, description="Lookahead day of week")
    lookahead_hour_to_send: Optional[StrictInt] = Field(default=None, description="Lookahead hour to send")
    lookahead_last_sent_at: Optional[datetime] = Field(default=None, description="Lookahead last sent at")
    lookahead_next_scheduled_at: Optional[datetime] = Field(default=None, description="Lookahead next scheduled at")
    resource_send_weekly: Optional[StrictBool] = Field(default=None, description="Resource send weekly")
    resource_day_of_week: Optional[StrictInt] = Field(default=None, description="Resource day of week")
    resource_hour_to_send: Optional[StrictInt] = Field(default=None, description="Resource hour to send")
    resource_weeks_to_show: Optional[StrictInt] = Field(default=None, description="Resource weeks to show")
    resource_last_sent_at: Optional[datetime] = Field(default=None, description="Resource last sent at")
    resource_next_scheduled_at: Optional[datetime] = Field(default=None, description="Resource next scheduled at")
    __properties: ClassVar[List[str]] = ["project_schedule_email_setting_id", "send_weekly", "day_of_week", "hour_to_send", "weeks_to_show", "last_sent_at", "next_scheduled_at", "lookahead_send_weekly", "lookahead_day_of_week", "lookahead_hour_to_send", "lookahead_last_sent_at", "lookahead_next_scheduled_at", "resource_send_weekly", "resource_day_of_week", "resource_hour_to_send", "resource_weeks_to_show", "resource_last_sent_at", "resource_next_scheduled_at"]

    @field_validator('day_of_week')
    def day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6)")
        return value

    @field_validator('hour_to_send')
    def hour_to_send_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)")
        return value

    @field_validator('weeks_to_show')
    def weeks_to_show_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 3, 4, 5, 6, 7, 8]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6, 7, 8)")
        return value

    @field_validator('lookahead_day_of_week')
    def lookahead_day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6)")
        return value

    @field_validator('lookahead_hour_to_send')
    def lookahead_hour_to_send_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)")
        return value

    @field_validator('resource_day_of_week')
    def resource_day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6)")
        return value

    @field_validator('resource_hour_to_send')
    def resource_hour_to_send_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)")
        return value

    @field_validator('resource_weeks_to_show')
    def resource_weeks_to_show_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 3, 4, 5, 6, 7, 8]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6, 7, 8)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdScheduleSettingsGet200ResponseEmailSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_sent_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_sent_at is None and "last_sent_at" in self.model_fields_set:
            _dict['last_sent_at'] = None

        # set to None if next_scheduled_at (nullable) is None
        # and model_fields_set contains the field
        if self.next_scheduled_at is None and "next_scheduled_at" in self.model_fields_set:
            _dict['next_scheduled_at'] = None

        # set to None if lookahead_last_sent_at (nullable) is None
        # and model_fields_set contains the field
        if self.lookahead_last_sent_at is None and "lookahead_last_sent_at" in self.model_fields_set:
            _dict['lookahead_last_sent_at'] = None

        # set to None if lookahead_next_scheduled_at (nullable) is None
        # and model_fields_set contains the field
        if self.lookahead_next_scheduled_at is None and "lookahead_next_scheduled_at" in self.model_fields_set:
            _dict['lookahead_next_scheduled_at'] = None

        # set to None if resource_last_sent_at (nullable) is None
        # and model_fields_set contains the field
        if self.resource_last_sent_at is None and "resource_last_sent_at" in self.model_fields_set:
            _dict['resource_last_sent_at'] = None

        # set to None if resource_next_scheduled_at (nullable) is None
        # and model_fields_set contains the field
        if self.resource_next_scheduled_at is None and "resource_next_scheduled_at" in self.model_fields_set:
            _dict['resource_next_scheduled_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdScheduleSettingsGet200ResponseEmailSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_schedule_email_setting_id": obj.get("project_schedule_email_setting_id"),
            "send_weekly": obj.get("send_weekly"),
            "day_of_week": obj.get("day_of_week"),
            "hour_to_send": obj.get("hour_to_send"),
            "weeks_to_show": obj.get("weeks_to_show"),
            "last_sent_at": obj.get("last_sent_at"),
            "next_scheduled_at": obj.get("next_scheduled_at"),
            "lookahead_send_weekly": obj.get("lookahead_send_weekly"),
            "lookahead_day_of_week": obj.get("lookahead_day_of_week"),
            "lookahead_hour_to_send": obj.get("lookahead_hour_to_send"),
            "lookahead_last_sent_at": obj.get("lookahead_last_sent_at"),
            "lookahead_next_scheduled_at": obj.get("lookahead_next_scheduled_at"),
            "resource_send_weekly": obj.get("resource_send_weekly"),
            "resource_day_of_week": obj.get("resource_day_of_week"),
            "resource_hour_to_send": obj.get("resource_hour_to_send"),
            "resource_weeks_to_show": obj.get("resource_weeks_to_show"),
            "resource_last_sent_at": obj.get("resource_last_sent_at"),
            "resource_next_scheduled_at": obj.get("resource_next_scheduled_at")
        })
        return _obj


