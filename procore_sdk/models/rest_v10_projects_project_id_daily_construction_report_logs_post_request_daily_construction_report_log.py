# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDailyConstructionReportLogsPostRequestDailyConstructionReportLog(BaseModel):
    """
    RestV10ProjectsProjectIdDailyConstructionReportLogsPostRequestDailyConstructionReportLog
    """ # noqa: E501
    apprentice_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that the Apprentice workers were on site")
    var_date: Optional[date] = Field(default=None, description="Format: YYYY-MM-DD Example: 2016-04-19", alias="date")
    datetime: Optional[datetime] = Field(default=None, description="Datetime of record. Mutually exclusive with the date property.")
    first_year_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by first-year apprentices")
    foreman_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that the foremen were on site")
    journeyman_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that the journeymen were on site")
    local_city_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by local city resident workers")
    local_county_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by local county resident workers")
    minority_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by minority workers")
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes")
    number_of_apprentice_workers: Optional[StrictInt] = Field(default=None, description="Number of apprentice workers on site")
    number_of_foreman_workers: Optional[StrictInt] = Field(default=None, description="Number of foremen on site")
    number_of_journeyman_workers: Optional[StrictInt] = Field(default=None, description="Number of journeymen on site")
    number_of_other_workers: Optional[StrictInt] = Field(default=None, description="Number of other workers on site")
    other_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that other workers were on site")
    vendor_id: StrictInt = Field(description="ID of the Vendor associated to the report")
    veteran_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by veteran workers")
    women_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by women workers")
    trade_id: StrictInt = Field(description="ID of the Trade associated to the report")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["apprentice_hours", "date", "datetime", "first_year_hours", "foreman_hours", "journeyman_hours", "local_city_hours", "local_county_hours", "minority_hours", "notes", "number_of_apprentice_workers", "number_of_foreman_workers", "number_of_journeyman_workers", "number_of_other_workers", "other_hours", "vendor_id", "veteran_hours", "women_hours", "trade_id", "custom_field_%{custom_field_definition_id}"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyConstructionReportLogsPostRequestDailyConstructionReportLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyConstructionReportLogsPostRequestDailyConstructionReportLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apprentice_hours": obj.get("apprentice_hours"),
            "date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "first_year_hours": obj.get("first_year_hours"),
            "foreman_hours": obj.get("foreman_hours"),
            "journeyman_hours": obj.get("journeyman_hours"),
            "local_city_hours": obj.get("local_city_hours"),
            "local_county_hours": obj.get("local_county_hours"),
            "minority_hours": obj.get("minority_hours"),
            "notes": obj.get("notes"),
            "number_of_apprentice_workers": obj.get("number_of_apprentice_workers"),
            "number_of_foreman_workers": obj.get("number_of_foreman_workers"),
            "number_of_journeyman_workers": obj.get("number_of_journeyman_workers"),
            "number_of_other_workers": obj.get("number_of_other_workers"),
            "other_hours": obj.get("other_hours"),
            "vendor_id": obj.get("vendor_id"),
            "veteran_hours": obj.get("veteran_hours"),
            "women_hours": obj.get("women_hours"),
            "trade_id": obj.get("trade_id"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


