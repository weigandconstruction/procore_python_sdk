# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.checklist_item_response1 import ChecklistItemResponse1
from procore_sdk.models.checklist_item_response_set2 import ChecklistItemResponseSet2
from procore_sdk.models.checklist_item_type import ChecklistItemType
from procore_sdk.models.checklist_response1 import ChecklistResponse1
from typing import Optional, Set
from typing_extensions import Self

class ChecklistListItem(BaseModel):
    """
    ChecklistListItem
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    details: Optional[StrictStr] = Field(default=None, description="Details")
    company_template_item_details: Optional[StrictStr] = Field(default=None, description="Details from the company template item")
    item_response: Optional[ChecklistItemResponse1] = None
    list_id: Optional[StrictInt] = Field(default=None, description="List ID")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    position: Optional[StrictInt] = Field(default=None, description="Position")
    responded_with: Optional[StrictStr] = Field(default=None, description="Representation of an Item's Response")
    response: Optional[ChecklistResponse1] = None
    response_set: Optional[ChecklistItemResponseSet2] = None
    section_id: Optional[StrictInt] = Field(default=None, description="Checklist Section ID")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    template_item_id: Optional[StrictInt] = Field(default=None, description="Template Item ID")
    type: Optional[ChecklistItemType] = None
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of last update")
    __properties: ClassVar[List[str]] = ["id", "details", "company_template_item_details", "item_response", "list_id", "name", "position", "responded_with", "response", "response_set", "section_id", "status", "template_item_id", "type", "updated_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yes', 'no', 'n/a', 'none']):
            raise ValueError("must be one of enum values ('yes', 'no', 'n/a', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChecklistListItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_response
        if self.item_response:
            _dict['item_response'] = self.item_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_set
        if self.response_set:
            _dict['response_set'] = self.response_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if item_response (nullable) is None
        # and model_fields_set contains the field
        if self.item_response is None and "item_response" in self.model_fields_set:
            _dict['item_response'] = None

        # set to None if response (nullable) is None
        # and model_fields_set contains the field
        if self.response is None and "response" in self.model_fields_set:
            _dict['response'] = None

        # set to None if template_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.template_item_id is None and "template_item_id" in self.model_fields_set:
            _dict['template_item_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChecklistListItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "details": obj.get("details"),
            "company_template_item_details": obj.get("company_template_item_details"),
            "item_response": ChecklistItemResponse1.from_dict(obj["item_response"]) if obj.get("item_response") is not None else None,
            "list_id": obj.get("list_id"),
            "name": obj.get("name"),
            "position": obj.get("position"),
            "responded_with": obj.get("responded_with"),
            "response": ChecklistResponse1.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "response_set": ChecklistItemResponseSet2.from_dict(obj["response_set"]) if obj.get("response_set") is not None else None,
            "section_id": obj.get("section_id"),
            "status": obj.get("status"),
            "template_item_id": obj.get("template_item_id"),
            "type": ChecklistItemType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "updated_at": obj.get("updated_at")
        })
        return _obj


