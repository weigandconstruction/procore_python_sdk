# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.normal_view_business_register import NormalViewBusinessRegister
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdVendorsGet200ResponseInnerOneOf1(BaseModel):
    """
    RestV11ProjectsProjectIdVendorsGet200ResponseInnerOneOf1
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Address")
    business_id: Optional[StrictStr] = Field(default=None, description="Business id")
    business_phone: Optional[StrictStr] = Field(default=None, description="Business phone")
    business_register: Optional[NormalViewBusinessRegister] = None
    city: Optional[StrictStr] = Field(default=None, description="City")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code (ISO-3166 Alpha-2 format)")
    email_address: Optional[StrictStr] = Field(default=None, description="Email address")
    fax_number: Optional[StrictStr] = Field(default=None, description="Fax number")
    is_active: Optional[StrictBool] = Field(default=None, description="Active status")
    logo: Optional[StrictStr] = Field(default=None, description="Logo url")
    state_code: Optional[StrictStr] = Field(default=None, description="State code (ISO-3166 Alpha-2 format)")
    trade_name: Optional[StrictStr] = Field(default=None, description="Vendor's Trade Name, also known as Doing Business As (DBA).")
    zip: Optional[StrictStr] = Field(default=None, description="Zip code")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["address", "business_id", "business_phone", "business_register", "city", "country_code", "email_address", "fax_number", "is_active", "logo", "state_code", "trade_name", "zip", "id", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdVendorsGet200ResponseInnerOneOf1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of business_register
        if self.business_register:
            _dict['business_register'] = self.business_register.to_dict()
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if business_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_id is None and "business_id" in self.model_fields_set:
            _dict['business_id'] = None

        # set to None if business_phone (nullable) is None
        # and model_fields_set contains the field
        if self.business_phone is None and "business_phone" in self.model_fields_set:
            _dict['business_phone'] = None

        # set to None if business_register (nullable) is None
        # and model_fields_set contains the field
        if self.business_register is None and "business_register" in self.model_fields_set:
            _dict['business_register'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if email_address (nullable) is None
        # and model_fields_set contains the field
        if self.email_address is None and "email_address" in self.model_fields_set:
            _dict['email_address'] = None

        # set to None if fax_number (nullable) is None
        # and model_fields_set contains the field
        if self.fax_number is None and "fax_number" in self.model_fields_set:
            _dict['fax_number'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['state_code'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdVendorsGet200ResponseInnerOneOf1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "business_id": obj.get("business_id"),
            "business_phone": obj.get("business_phone"),
            "business_register": NormalViewBusinessRegister.from_dict(obj["business_register"]) if obj.get("business_register") is not None else None,
            "city": obj.get("city"),
            "country_code": obj.get("country_code"),
            "email_address": obj.get("email_address"),
            "fax_number": obj.get("fax_number"),
            "is_active": obj.get("is_active"),
            "logo": obj.get("logo"),
            "state_code": obj.get("state_code"),
            "trade_name": obj.get("trade_name"),
            "zip": obj.get("zip"),
            "id": obj.get("id"),
            "name": obj.get("name")
        })
        return _obj


