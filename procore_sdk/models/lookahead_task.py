# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_segments_inner import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSegmentsInner
from typing import Optional, Set
from typing_extensions import Self

class LookaheadTask(BaseModel):
    """
    LookaheadTask
    """ # noqa: E501
    lookahead_id: StrictInt = Field(description="ID of the associated Lookahead")
    parent_id: StrictInt = Field(description="ID of the parent Lookahead Task")
    name: StrictStr = Field(description="The name of the Task")
    start_date: Optional[StrictStr] = Field(default=None, description="Task start date, in project time zone")
    end_date: Optional[StrictStr] = Field(default=None, description="Task end date, in project time zone")
    resource_ids: Optional[List[StrictInt]] = Field(default=None, description="ID of Resource(s) to assign to this Lookahead Task")
    comment: Optional[StrictStr] = Field(default=None, description="Additional comments")
    segments: Optional[List[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSegmentsInner]] = None
    assignee_ids: Optional[List[StrictInt]] = Field(default=None, description="ID of Contact(s) to assign to this Lookahead Task")
    vendor_ids: Optional[List[StrictInt]] = Field(default=None, description="ID of Company(s) to assign to this Lookahead Task")
    __properties: ClassVar[List[str]] = ["lookahead_id", "parent_id", "name", "start_date", "end_date", "resource_ids", "comment", "segments", "assignee_ids", "vendor_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LookaheadTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LookaheadTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lookahead_id": obj.get("lookahead_id"),
            "parent_id": obj.get("parent_id"),
            "name": obj.get("name"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "resource_ids": obj.get("resource_ids"),
            "comment": obj.get("comment"),
            "segments": [RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSegmentsInner.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None,
            "assignee_ids": obj.get("assignee_ids"),
            "vendor_ids": obj.get("vendor_ids")
        })
        return _obj


