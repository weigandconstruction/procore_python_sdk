# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_workflow_instances_get200_response_inner_current_workflow_activities_inner import RestV10WorkflowInstancesGet200ResponseInnerCurrentWorkflowActivitiesInner
from procore_sdk.models.rest_v10_workflow_instances_get200_response_inner_current_workflow_state import RestV10WorkflowInstancesGet200ResponseInnerCurrentWorkflowState
from procore_sdk.models.rest_v10_workflow_instances_get200_response_inner_project import RestV10WorkflowInstancesGet200ResponseInnerProject
from procore_sdk.models.rest_v10_workflow_instances_get200_response_inner_workflow import RestV10WorkflowInstancesGet200ResponseInnerWorkflow
from typing import Optional, Set
from typing_extensions import Self

class RestV10WorkflowInstancesGet200ResponseInner(BaseModel):
    """
    Workflow Instance
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    becomes_overdue_at: Optional[datetime] = Field(default=None, description="Workflowed Object is considered overdue after")
    current_state_set_at: Optional[datetime] = Field(default=None, description="Workflow entered the current state at")
    workflowed_object_id: Optional[StrictInt] = Field(default=None, description="Workflowed Object ID")
    workflowed_object_type: Optional[StrictStr] = Field(default=None, description="The Type of the Workflowed Object")
    project: Optional[RestV10WorkflowInstancesGet200ResponseInnerProject] = None
    current_workflow_activities: Optional[List[RestV10WorkflowInstancesGet200ResponseInnerCurrentWorkflowActivitiesInner]] = None
    current_workflow_state: Optional[RestV10WorkflowInstancesGet200ResponseInnerCurrentWorkflowState] = None
    workflow: Optional[RestV10WorkflowInstancesGet200ResponseInnerWorkflow] = None
    __properties: ClassVar[List[str]] = ["id", "becomes_overdue_at", "current_state_set_at", "workflowed_object_id", "workflowed_object_type", "project", "current_workflow_activities", "current_workflow_state", "workflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10WorkflowInstancesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in current_workflow_activities (list)
        _items = []
        if self.current_workflow_activities:
            for _item_current_workflow_activities in self.current_workflow_activities:
                if _item_current_workflow_activities:
                    _items.append(_item_current_workflow_activities.to_dict())
            _dict['current_workflow_activities'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_workflow_state
        if self.current_workflow_state:
            _dict['current_workflow_state'] = self.current_workflow_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        # set to None if becomes_overdue_at (nullable) is None
        # and model_fields_set contains the field
        if self.becomes_overdue_at is None and "becomes_overdue_at" in self.model_fields_set:
            _dict['becomes_overdue_at'] = None

        # set to None if project (nullable) is None
        # and model_fields_set contains the field
        if self.project is None and "project" in self.model_fields_set:
            _dict['project'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10WorkflowInstancesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "becomes_overdue_at": obj.get("becomes_overdue_at"),
            "current_state_set_at": obj.get("current_state_set_at"),
            "workflowed_object_id": obj.get("workflowed_object_id"),
            "workflowed_object_type": obj.get("workflowed_object_type"),
            "project": RestV10WorkflowInstancesGet200ResponseInnerProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "current_workflow_activities": [RestV10WorkflowInstancesGet200ResponseInnerCurrentWorkflowActivitiesInner.from_dict(_item) for _item in obj["current_workflow_activities"]] if obj.get("current_workflow_activities") is not None else None,
            "current_workflow_state": RestV10WorkflowInstancesGet200ResponseInnerCurrentWorkflowState.from_dict(obj["current_workflow_state"]) if obj.get("current_workflow_state") is not None else None,
            "workflow": RestV10WorkflowInstancesGet200ResponseInnerWorkflow.from_dict(obj["workflow"]) if obj.get("workflow") is not None else None
        })
        return _obj


