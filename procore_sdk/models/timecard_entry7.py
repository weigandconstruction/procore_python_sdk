# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TimecardEntry7(BaseModel):
    """
    Timecard Entry object
    """ # noqa: E501
    party_id: Optional[StrictInt] = Field(default=None, description="The ID of the Party of the Timecard Entry")
    hours: StrictStr = Field(description="The Hours of the Timecard Entry")
    billable: Optional[StrictBool] = Field(default=False, description="The Billable status of the Timecard Entry")
    var_date: date = Field(description="The Date of the Timecard Entry", alias="date")
    description: Optional[StrictStr] = Field(default=None, description="The Description of the Timecard Entry")
    timecard_time_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the Timecard Time Type of the Timecard Entry")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="The ID of the Cost Code of the Timecard Entry")
    login_information_id: Optional[StrictInt] = Field(default=None, description="The ID of the Login Information of the Timecard Entry")
    origin_id: Optional[StrictInt] = Field(default=None, description="ID of related external data")
    origin_data: Optional[StrictStr] = Field(default=None, description="Value of related external data")
    line_item_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the Line Item Type of the Timecard Entry")
    clock_in_time: Optional[StrictStr] = Field(default=None, description="The datetime a timecard clock in was punched")
    clock_out_time: Optional[StrictStr] = Field(default=None, description="The datetime a timecard clock out was punched")
    __properties: ClassVar[List[str]] = ["party_id", "hours", "billable", "date", "description", "timecard_time_type_id", "cost_code_id", "login_information_id", "origin_id", "origin_data", "line_item_type_id", "clock_in_time", "clock_out_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimecardEntry7 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimecardEntry7 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "party_id": obj.get("party_id"),
            "hours": obj.get("hours"),
            "billable": obj.get("billable") if obj.get("billable") is not None else False,
            "date": obj.get("date"),
            "description": obj.get("description"),
            "timecard_time_type_id": obj.get("timecard_time_type_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "login_information_id": obj.get("login_information_id"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "line_item_type_id": obj.get("line_item_type_id"),
            "clock_in_time": obj.get("clock_in_time"),
            "clock_out_time": obj.get("clock_out_time")
        })
        return _obj


