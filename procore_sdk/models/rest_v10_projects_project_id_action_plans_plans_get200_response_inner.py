# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.location1 import Location1
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plan_templates_get200_response_inner_manager import RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerManager
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plan_templates_get200_response_inner_plan_type import RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerPlanType
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plans_get200_response_inner_plan_approvers_inner import RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanApproversInner
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plans_get200_response_inner_plan_receivers_inner import RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanReceiversInner
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plans_get200_response_inner_plan_status import RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanStatus
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_custom_fields import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInner(BaseModel):
    """
    Action Plan (Show)
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    closed_item_count: Optional[StrictInt] = Field(default=None, description="Plan Items that have a status of \"closed\"")
    created_at: Optional[datetime] = Field(default=None, description="Time the Action Plan was created")
    custom_fields: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields] = None
    description: Optional[StrictStr] = Field(default=None, description="Description of the Action Plan in rich text form")
    description_plain_text: Optional[StrictStr] = Field(default=None, description="Description of the Action Plan in plain text form")
    location: Optional[Location1] = None
    manager: Optional[RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerManager] = None
    number: Optional[StrictInt] = Field(default=None, description="Number of the Action Plan")
    plan_type: Optional[RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerPlanType] = None
    plan_status: Optional[RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanStatus] = None
    plan_approvers: Optional[List[RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanApproversInner]] = None
    plan_receivers: Optional[List[RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanReceiversInner]] = None
    private: Optional[StrictBool] = Field(default=None, description="Flag for if the Action Plan is private")
    status: Optional[StrictStr] = Field(default=None, description="Name of the Status of the Action Plan")
    status_type: Optional[StrictStr] = Field(default=None, description="Type of the Status of the Action Plan")
    title: Optional[StrictStr] = Field(default=None, description="Title of the Action Plan")
    total_item_count: Optional[StrictInt] = Field(default=None, description="Total number of Plan Items")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of when the Action Plan was updated")
    __properties: ClassVar[List[str]] = ["id", "closed_item_count", "created_at", "custom_fields", "description", "description_plain_text", "location", "manager", "number", "plan_type", "plan_status", "plan_approvers", "plan_receivers", "private", "status", "status_type", "title", "total_item_count", "updated_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'in_progress', 'in_revision', 'completed']):
            raise ValueError("must be one of enum values ('draft', 'in_progress', 'in_revision', 'completed')")
        return value

    @field_validator('status_type')
    def status_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'in_progress', 'in_revision', 'completed']):
            raise ValueError("must be one of enum values ('draft', 'in_progress', 'in_revision', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_type
        if self.plan_type:
            _dict['plan_type'] = self.plan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_status
        if self.plan_status:
            _dict['plan_status'] = self.plan_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plan_approvers (list)
        _items = []
        if self.plan_approvers:
            for _item_plan_approvers in self.plan_approvers:
                if _item_plan_approvers:
                    _items.append(_item_plan_approvers.to_dict())
            _dict['plan_approvers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_receivers (list)
        _items = []
        if self.plan_receivers:
            for _item_plan_receivers in self.plan_receivers:
                if _item_plan_receivers:
                    _items.append(_item_plan_receivers.to_dict())
            _dict['plan_receivers'] = _items
        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if manager (nullable) is None
        # and model_fields_set contains the field
        if self.manager is None and "manager" in self.model_fields_set:
            _dict['manager'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "closed_item_count": obj.get("closed_item_count"),
            "created_at": obj.get("created_at"),
            "custom_fields": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "description": obj.get("description"),
            "description_plain_text": obj.get("description_plain_text"),
            "location": Location1.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "manager": RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerManager.from_dict(obj["manager"]) if obj.get("manager") is not None else None,
            "number": obj.get("number"),
            "plan_type": RestV10ProjectsProjectIdActionPlansPlanTemplatesGet200ResponseInnerPlanType.from_dict(obj["plan_type"]) if obj.get("plan_type") is not None else None,
            "plan_status": RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanStatus.from_dict(obj["plan_status"]) if obj.get("plan_status") is not None else None,
            "plan_approvers": [RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanApproversInner.from_dict(_item) for _item in obj["plan_approvers"]] if obj.get("plan_approvers") is not None else None,
            "plan_receivers": [RestV10ProjectsProjectIdActionPlansPlansGet200ResponseInnerPlanReceiversInner.from_dict(_item) for _item in obj["plan_receivers"]] if obj.get("plan_receivers") is not None else None,
            "private": obj.get("private"),
            "status": obj.get("status"),
            "status_type": obj.get("status_type"),
            "title": obj.get("title"),
            "total_item_count": obj.get("total_item_count"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


