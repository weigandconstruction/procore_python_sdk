# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.contributing_behavior import ContributingBehavior
from procore_sdk.models.contributing_condition import ContributingCondition
from procore_sdk.models.hazard import Hazard
from procore_sdk.models.location import Location
from procore_sdk.models.observation_item1_attachments_inner import ObservationItem1AttachmentsInner
from procore_sdk.models.observation_item1_checklist_item import ObservationItem1ChecklistItem
from procore_sdk.models.observation_item1_checklist_list import ObservationItem1ChecklistList
from procore_sdk.models.observation_item1_specification_section import ObservationItem1SpecificationSection
from procore_sdk.models.observation_item_assignee import ObservationItemAssignee
from procore_sdk.models.observation_item_creator import ObservationItemCreator
from procore_sdk.models.observation_origin1 import ObservationOrigin1
from procore_sdk.models.observation_type import ObservationType
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.trade2 import Trade2
from typing import Optional, Set
from typing_extensions import Self

class ObservationItem1(BaseModel):
    """
    ObservationItem1
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Observation Item ID")
    number: Optional[StrictStr] = Field(default=None, description="Observation Item number")
    name: Optional[StrictStr] = Field(default=None, description="Observation Item name")
    description: Optional[StrictStr] = Field(default=None, description="Observation Item description")
    status: Optional[StrictStr] = Field(default=None, description="Observation Item status")
    checklist_item: Optional[ObservationItem1ChecklistItem] = None
    checklist_list: Optional[ObservationItem1ChecklistList] = None
    priority: Optional[StrictStr] = Field(default=None, description="Observation Item priority")
    date_notified: Optional[date] = Field(default=None, description="Date that the Observation Item Assignee was notified")
    due_date: Optional[date] = Field(default=None, description="Observation Item due date")
    closed_at: Optional[datetime] = Field(default=None, description="Closed at")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    deleted_at: Optional[datetime] = Field(default=None, description="Deleted at")
    description_rich_text: Optional[StrictStr] = Field(default=None, description="Description")
    personal: Optional[StrictBool] = Field(default=None, description="Observation Item privacy status")
    current_drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Current Drawing Revision IDs associated to the Observation Item")
    drawing_revisions: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revision IDs associated to the Observation Item")
    drawing_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing IDs associated to an Observation Item's Drawing Revisions")
    origin: Optional[ObservationOrigin1] = None
    attachments: Optional[List[ObservationItem1AttachmentsInner]] = None
    assignee: Optional[ObservationItemAssignee] = None
    distribution_members: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = Field(default=None, description="Users on the Observation Item distribution list")
    created_by: Optional[ObservationItemCreator] = None
    specification_section: Optional[ObservationItem1SpecificationSection] = None
    location: Optional[Location] = None
    trade: Optional[Trade2] = None
    type: Optional[ObservationType] = None
    contributing_behavior: Optional[ContributingBehavior] = None
    contributing_condition: Optional[ContributingCondition] = None
    hazard: Optional[Hazard] = None
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "number", "name", "description", "status", "checklist_item", "checklist_list", "priority", "date_notified", "due_date", "closed_at", "created_at", "updated_at", "deleted_at", "description_rich_text", "personal", "current_drawing_revision_ids", "drawing_revisions", "drawing_ids", "origin", "attachments", "assignee", "distribution_members", "created_by", "specification_section", "location", "trade", "type", "contributing_behavior", "contributing_condition", "hazard", "custom_fields"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['initiated', 'ready_for_review', 'not_accepted', 'closed']):
            raise ValueError("must be one of enum values ('initiated', 'ready_for_review', 'not_accepted', 'closed')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Low', 'Medium', 'High', 'Urgent']):
            raise ValueError("must be one of enum values ('Low', 'Medium', 'High', 'Urgent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObservationItem1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checklist_item
        if self.checklist_item:
            _dict['checklist_item'] = self.checklist_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checklist_list
        if self.checklist_list:
            _dict['checklist_list'] = self.checklist_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin
        if self.origin:
            _dict['origin'] = self.origin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_section
        if self.specification_section:
            _dict['specification_section'] = self.specification_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contributing_behavior
        if self.contributing_behavior:
            _dict['contributing_behavior'] = self.contributing_behavior.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contributing_condition
        if self.contributing_condition:
            _dict['contributing_condition'] = self.contributing_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hazard
        if self.hazard:
            _dict['hazard'] = self.hazard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if checklist_item (nullable) is None
        # and model_fields_set contains the field
        if self.checklist_item is None and "checklist_item" in self.model_fields_set:
            _dict['checklist_item'] = None

        # set to None if checklist_list (nullable) is None
        # and model_fields_set contains the field
        if self.checklist_list is None and "checklist_list" in self.model_fields_set:
            _dict['checklist_list'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if specification_section (nullable) is None
        # and model_fields_set contains the field
        if self.specification_section is None and "specification_section" in self.model_fields_set:
            _dict['specification_section'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObservationItem1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "checklist_item": ObservationItem1ChecklistItem.from_dict(obj["checklist_item"]) if obj.get("checklist_item") is not None else None,
            "checklist_list": ObservationItem1ChecklistList.from_dict(obj["checklist_list"]) if obj.get("checklist_list") is not None else None,
            "priority": obj.get("priority"),
            "date_notified": obj.get("date_notified"),
            "due_date": obj.get("due_date"),
            "closed_at": obj.get("closed_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "description_rich_text": obj.get("description_rich_text"),
            "personal": obj.get("personal"),
            "current_drawing_revision_ids": obj.get("current_drawing_revision_ids"),
            "drawing_revisions": obj.get("drawing_revisions"),
            "drawing_ids": obj.get("drawing_ids"),
            "origin": ObservationOrigin1.from_dict(obj["origin"]) if obj.get("origin") is not None else None,
            "attachments": [ObservationItem1AttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "assignee": ObservationItemAssignee.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "distribution_members": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "created_by": ObservationItemCreator.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "specification_section": ObservationItem1SpecificationSection.from_dict(obj["specification_section"]) if obj.get("specification_section") is not None else None,
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "trade": Trade2.from_dict(obj["trade"]) if obj.get("trade") is not None else None,
            "type": ObservationType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "contributing_behavior": ContributingBehavior.from_dict(obj["contributing_behavior"]) if obj.get("contributing_behavior") is not None else None,
            "contributing_condition": ContributingCondition.from_dict(obj["contributing_condition"]) if obj.get("contributing_condition") is not None else None,
            "hazard": Hazard.from_dict(obj["hazard"]) if obj.get("hazard") is not None else None,
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


