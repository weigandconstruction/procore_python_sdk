# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner(BaseModel):
    """
    RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Requested change id")
    change_requested: Optional[StrictStr] = Field(default=None, description="Requested change")
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    new_finish: Optional[date] = Field(default=None, description="Requested change finish date")
    new_start: Optional[date] = Field(default=None, description="Requested change start date")
    new_percentage: Optional[StrictInt] = Field(default=None, description="Requested change percentage")
    old_finish: Optional[date] = Field(default=None, description="Current finish date")
    old_start: Optional[date] = Field(default=None, description="Current start date")
    old_percentage: Optional[StrictInt] = Field(default=None, description="Current percentage")
    other_change: Optional[StrictStr] = Field(default=None, description="Other change")
    reason: Optional[StrictStr] = Field(default=None, description="Requested change reason")
    status: Optional[StrictStr] = Field(default=None, description="Localized requested change status")
    status_not_localized: Optional[StrictStr] = Field(default=None, description="Requested change status not localized")
    notes: Optional[StrictStr] = Field(default=None, description="Requested change notes")
    created_at: Optional[date] = Field(default=None, description="Requested change created date")
    __properties: ClassVar[List[str]] = ["id", "change_requested", "created_by", "new_finish", "new_start", "new_percentage", "old_finish", "old_start", "old_percentage", "other_change", "reason", "status", "status_not_localized", "notes", "created_at"]

    @field_validator('status_not_localized')
    def status_not_localized_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['approved', 'rejected', 'pending']):
            raise ValueError("must be one of enum values ('approved', 'rejected', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if new_finish (nullable) is None
        # and model_fields_set contains the field
        if self.new_finish is None and "new_finish" in self.model_fields_set:
            _dict['new_finish'] = None

        # set to None if new_start (nullable) is None
        # and model_fields_set contains the field
        if self.new_start is None and "new_start" in self.model_fields_set:
            _dict['new_start'] = None

        # set to None if new_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.new_percentage is None and "new_percentage" in self.model_fields_set:
            _dict['new_percentage'] = None

        # set to None if old_finish (nullable) is None
        # and model_fields_set contains the field
        if self.old_finish is None and "old_finish" in self.model_fields_set:
            _dict['old_finish'] = None

        # set to None if old_start (nullable) is None
        # and model_fields_set contains the field
        if self.old_start is None and "old_start" in self.model_fields_set:
            _dict['old_start'] = None

        # set to None if old_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.old_percentage is None and "old_percentage" in self.model_fields_set:
            _dict['old_percentage'] = None

        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "change_requested": obj.get("change_requested"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "new_finish": obj.get("new_finish"),
            "new_start": obj.get("new_start"),
            "new_percentage": obj.get("new_percentage"),
            "old_finish": obj.get("old_finish"),
            "old_start": obj.get("old_start"),
            "old_percentage": obj.get("old_percentage"),
            "other_change": obj.get("other_change"),
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "status_not_localized": obj.get("status_not_localized"),
            "notes": obj.get("notes"),
            "created_at": obj.get("created_at")
        })
        return _obj


