# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_instructions_get200_response_inner_cost_impact import RestV10ProjectsProjectIdInstructionsGet200ResponseInnerCostImpact
from procore_sdk.models.rest_v10_projects_project_id_instructions_get200_response_inner_instruction_type import RestV10ProjectsProjectIdInstructionsGet200ResponseInnerInstructionType
from procore_sdk.models.rest_v10_projects_project_id_rfis_get200_response_inner_all_of_schedule_impact import RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfScheduleImpact
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v10_submittal_approvers_id_patch200_response_inner_attachments_inner import RestV10SubmittalApproversIdPatch200ResponseInnerAttachmentsInner
from procore_sdk.models.trade2 import Trade2
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdInstructionsGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdInstructionsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    number: Optional[StrictStr] = Field(default=None, description="Number")
    title: Optional[StrictStr] = Field(default=None, description="Number")
    rich_text_description: Optional[StrictStr] = Field(default=None, description="Rich Text Description")
    plain_text_description: Optional[StrictStr] = Field(default=None, description="Plain Text Description")
    created_at: Optional[datetime] = Field(default=None, description="Date created")
    date_received: Optional[date] = Field(default=None, description="Date created")
    date_issued: Optional[datetime] = Field(default=None, description="Date created")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    private: Optional[StrictBool] = Field(default=None, description="private")
    schedule_impact: Optional[RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfScheduleImpact] = None
    cost_impact: Optional[RestV10ProjectsProjectIdInstructionsGet200ResponseInnerCostImpact] = None
    instruction_type: Optional[RestV10ProjectsProjectIdInstructionsGet200ResponseInnerInstructionType] = None
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    instruction_from: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    distribution_members: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = Field(default=None, description="Instruction Distribution List of Users")
    attentions: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = Field(default=None, description="Instruction Attentions")
    attachments: Optional[List[RestV10SubmittalApproversIdPatch200ResponseInnerAttachmentsInner]] = None
    trades: Optional[List[Trade2]] = None
    __properties: ClassVar[List[str]] = ["id", "number", "title", "rich_text_description", "plain_text_description", "created_at", "date_received", "date_issued", "status", "private", "schedule_impact", "cost_impact", "instruction_type", "created_by", "instruction_from", "distribution_members", "attentions", "attachments", "trades"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'issued', 'closed']):
            raise ValueError("must be one of enum values ('draft', 'issued', 'closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdInstructionsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule_impact
        if self.schedule_impact:
            _dict['schedule_impact'] = self.schedule_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_impact
        if self.cost_impact:
            _dict['cost_impact'] = self.cost_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instruction_type
        if self.instruction_type:
            _dict['instruction_type'] = self.instruction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instruction_from
        if self.instruction_from:
            _dict['instruction_from'] = self.instruction_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attentions (list)
        _items = []
        if self.attentions:
            for _item_attentions in self.attentions:
                if _item_attentions:
                    _items.append(_item_attentions.to_dict())
            _dict['attentions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trades (list)
        _items = []
        if self.trades:
            for _item_trades in self.trades:
                if _item_trades:
                    _items.append(_item_trades.to_dict())
            _dict['trades'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdInstructionsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "title": obj.get("title"),
            "rich_text_description": obj.get("rich_text_description"),
            "plain_text_description": obj.get("plain_text_description"),
            "created_at": obj.get("created_at"),
            "date_received": obj.get("date_received"),
            "date_issued": obj.get("date_issued"),
            "status": obj.get("status"),
            "private": obj.get("private"),
            "schedule_impact": RestV10ProjectsProjectIdRfisGet200ResponseInnerAllOfScheduleImpact.from_dict(obj["schedule_impact"]) if obj.get("schedule_impact") is not None else None,
            "cost_impact": RestV10ProjectsProjectIdInstructionsGet200ResponseInnerCostImpact.from_dict(obj["cost_impact"]) if obj.get("cost_impact") is not None else None,
            "instruction_type": RestV10ProjectsProjectIdInstructionsGet200ResponseInnerInstructionType.from_dict(obj["instruction_type"]) if obj.get("instruction_type") is not None else None,
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "instruction_from": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["instruction_from"]) if obj.get("instruction_from") is not None else None,
            "distribution_members": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "attentions": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["attentions"]] if obj.get("attentions") is not None else None,
            "attachments": [RestV10SubmittalApproversIdPatch200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "trades": [Trade2.from_dict(_item) for _item in obj["trades"]] if obj.get("trades") is not None else None
        })
        return _obj


