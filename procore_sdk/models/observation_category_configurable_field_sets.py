# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.configurable_field_set1 import ConfigurableFieldSet1
from typing import Optional, Set
from typing_extensions import Self

class ObservationCategoryConfigurableFieldSets(BaseModel):
    """
    ObservationCategoryConfigurableFieldSets
    """ # noqa: E501
    id: Optional[StrictInt] = Field(description="Observation Cateogry Configurable Field Set")
    category: StrictStr = Field(description="Observation Cateogry Configurable Field Set category")
    category_key: Optional[StrictStr] = Field(default=None, description="Observation Type category (snake_case)")
    configurable_field_set: ConfigurableFieldSet1
    __properties: ClassVar[List[str]] = ["id", "category", "category_key", "configurable_field_set"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Quality', 'Safety', 'Commissioning', 'Warranty', 'Work To Complete', 'Environmental']):
            raise ValueError("must be one of enum values ('Quality', 'Safety', 'Commissioning', 'Warranty', 'Work To Complete', 'Environmental')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObservationCategoryConfigurableFieldSets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configurable_field_set
        if self.configurable_field_set:
            _dict['configurable_field_set'] = self.configurable_field_set.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObservationCategoryConfigurableFieldSets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "category": obj.get("category"),
            "category_key": obj.get("category_key"),
            "configurable_field_set": ConfigurableFieldSet1.from_dict(obj["configurable_field_set"]) if obj.get("configurable_field_set") is not None else None
        })
        return _obj


