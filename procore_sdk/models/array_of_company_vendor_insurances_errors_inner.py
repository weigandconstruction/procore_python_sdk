# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_work_order_contracts_work_order_contract_id_line_items_sync_patch200_response_errors_inner_all_of_errors import RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors
from typing import Optional, Set
from typing_extensions import Self

class ArrayOfCompanyVendorInsurancesErrorsInner(BaseModel):
    """
    ArrayOfCompanyVendorInsurancesErrorsInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    effective_date: Optional[date] = Field(default=None, description="Effective date")
    enable_expired_insurance_notifications: Optional[StrictBool] = Field(default=None, description="Enable/Disable expired insurance notifications")
    exempt: Optional[StrictBool] = Field(default=None, description="Exempt status")
    expiration_date: Optional[date] = Field(default=None, description="Expiration date")
    info_received: Optional[StrictBool] = Field(default=None, description="Information received (or not)")
    insurance_provider: Optional[StrictStr] = Field(default=None, description="Insurance provider")
    insurance_type: Optional[StrictStr] = Field(default=None, description="Insurance type")
    limit: Optional[StrictStr] = Field(default=None, description="Limit")
    notes: Optional[StrictStr] = Field(default=None, description="Notes")
    policy_number: Optional[StrictStr] = Field(default=None, description="Policy number")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    vendor_id: Optional[StrictInt] = Field(default=None, description="Vendor ID")
    additional_insured: Optional[StrictStr] = Field(default=None, description="Additional Individuals and/or Companies Insured")
    division_template: Optional[StrictStr] = Field(default=None, description="Division Template")
    insurance_sets: Optional[StrictStr] = Field(default=None, description="Insurance Sets")
    origin_data: Optional[StrictStr] = Field(default=None, description="Origin data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Origin ID")
    errors: Optional[RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors] = None
    __properties: ClassVar[List[str]] = ["id", "effective_date", "enable_expired_insurance_notifications", "exempt", "expiration_date", "info_received", "insurance_provider", "insurance_type", "limit", "notes", "policy_number", "status", "vendor_id", "additional_insured", "division_template", "insurance_sets", "origin_data", "origin_id", "errors"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['compliant', 'compliant_in_progress', 'expired', 'non_compliant', 'non_compliant_in_progress', 'undecided', 'unregistered']):
            raise ValueError("must be one of enum values ('compliant', 'compliant_in_progress', 'expired', 'non_compliant', 'non_compliant_in_progress', 'undecided', 'unregistered')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayOfCompanyVendorInsurancesErrorsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayOfCompanyVendorInsurancesErrorsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "effective_date": obj.get("effective_date"),
            "enable_expired_insurance_notifications": obj.get("enable_expired_insurance_notifications"),
            "exempt": obj.get("exempt"),
            "expiration_date": obj.get("expiration_date"),
            "info_received": obj.get("info_received"),
            "insurance_provider": obj.get("insurance_provider"),
            "insurance_type": obj.get("insurance_type"),
            "limit": obj.get("limit"),
            "notes": obj.get("notes"),
            "policy_number": obj.get("policy_number"),
            "status": obj.get("status"),
            "vendor_id": obj.get("vendor_id"),
            "additional_insured": obj.get("additional_insured"),
            "division_template": obj.get("division_template"),
            "insurance_sets": obj.get("insurance_sets"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "errors": RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors.from_dict(obj["errors"]) if obj.get("errors") is not None else None
        })
        return _obj


