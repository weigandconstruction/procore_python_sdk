# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.location import Location
from procore_sdk.models.rest_v10_projects_project_id_waste_logs_get200_response_inner_vendor import RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_attachments_inner import RestV10WorkOrderContractsPost201ResponseAttachmentsInner
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_specification_section import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_status import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerStatus
from procore_sdk.models.rest_v11_projects_project_id_submittals_get200_response_inner_type import RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerType
from procore_sdk.models.rest_v11_projects_project_id_submittals_post201_response_all_of_approvers_inner import RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfApproversInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_post201_response_all_of_distributed_submittals_inner import RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfDistributedSubmittalsInner
from procore_sdk.models.rest_v11_projects_project_id_submittals_post201_response_all_of_submittal_package import RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfSubmittalPackage
from procore_sdk.models.task2 import Task2
from procore_sdk.models.timecard_entry3_sub_job import TimecardEntry3SubJob
from procore_sdk.models.timecard_entry_full_cost_code import TimecardEntryFullCostCode
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdSubmittalsPost201Response(BaseModel):
    """
    RestV11ProjectsProjectIdSubmittalsPost201Response
    """ # noqa: E501
    actual_delivery_date: Optional[date] = None
    attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = None
    confirmed_delivery_date: Optional[date] = None
    cost_code: Optional[TimecardEntryFullCostCode] = None
    created_at: Optional[datetime] = None
    custom_textarea_1: Optional[StrictStr] = None
    custom_textfield_1: Optional[StrictStr] = None
    deleted_at: Optional[datetime] = Field(default=None, description="*This field only displays on deleted items")
    description: Optional[StrictStr] = None
    design_team_review_time: Optional[StrictInt] = None
    distribution_members: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = None
    internal_review_time: Optional[StrictInt] = None
    lead_time: Optional[StrictInt] = None
    required_on_site_date: Optional[date] = None
    scheduled_task: Optional[Task2] = None
    source_submittal_log_id: Optional[StrictInt] = None
    distributed_submittals: Optional[List[RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfDistributedSubmittalsInner]] = None
    approvers: Optional[List[RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfApproversInner]] = None
    attachments_count: Optional[StrictInt] = None
    ball_in_court: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = None
    buffer_time: Optional[StrictInt] = None
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    current_revision: Optional[StrictBool] = None
    distributed_at: Optional[datetime] = None
    due_date: Optional[date] = None
    for_record_only: Optional[StrictBool] = None
    formatted_number: Optional[StrictStr] = None
    issue_date: Optional[date] = None
    private: Optional[StrictBool] = None
    received_date: Optional[date] = None
    received_from: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    responsible_contractor: Optional[RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor] = None
    specification_section: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection] = None
    sub_job: Optional[TimecardEntry3SubJob] = None
    submit_by: Optional[date] = None
    status: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerStatus] = None
    type: Optional[RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerType] = None
    updated_at: Optional[datetime] = None
    submittal_manager: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    submittal_package: Optional[RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfSubmittalPackage] = None
    location: Optional[Location] = None
    open_date: Optional[date] = None
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    id: Optional[StrictInt] = None
    number: Optional[StrictStr] = None
    revision: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["actual_delivery_date", "attachments", "confirmed_delivery_date", "cost_code", "created_at", "custom_textarea_1", "custom_textfield_1", "deleted_at", "description", "design_team_review_time", "distribution_members", "internal_review_time", "lead_time", "required_on_site_date", "scheduled_task", "source_submittal_log_id", "distributed_submittals", "approvers", "attachments_count", "ball_in_court", "buffer_time", "created_by", "current_revision", "distributed_at", "due_date", "for_record_only", "formatted_number", "issue_date", "private", "received_date", "received_from", "responsible_contractor", "specification_section", "sub_job", "submit_by", "status", "type", "updated_at", "submittal_manager", "submittal_package", "location", "open_date", "custom_fields", "id", "number", "revision", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsPost201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_members (list)
        _items = []
        if self.distribution_members:
            for _item_distribution_members in self.distribution_members:
                if _item_distribution_members:
                    _items.append(_item_distribution_members.to_dict())
            _dict['distribution_members'] = _items
        # override the default output from pydantic by calling `to_dict()` of scheduled_task
        if self.scheduled_task:
            _dict['scheduled_task'] = self.scheduled_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in distributed_submittals (list)
        _items = []
        if self.distributed_submittals:
            for _item_distributed_submittals in self.distributed_submittals:
                if _item_distributed_submittals:
                    _items.append(_item_distributed_submittals.to_dict())
            _dict['distributed_submittals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in approvers (list)
        _items = []
        if self.approvers:
            for _item_approvers in self.approvers:
                if _item_approvers:
                    _items.append(_item_approvers.to_dict())
            _dict['approvers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ball_in_court (list)
        _items = []
        if self.ball_in_court:
            for _item_ball_in_court in self.ball_in_court:
                if _item_ball_in_court:
                    _items.append(_item_ball_in_court.to_dict())
            _dict['ball_in_court'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of received_from
        if self.received_from:
            _dict['received_from'] = self.received_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsible_contractor
        if self.responsible_contractor:
            _dict['responsible_contractor'] = self.responsible_contractor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification_section
        if self.specification_section:
            _dict['specification_section'] = self.specification_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_job
        if self.sub_job:
            _dict['sub_job'] = self.sub_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submittal_manager
        if self.submittal_manager:
            _dict['submittal_manager'] = self.submittal_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submittal_package
        if self.submittal_package:
            _dict['submittal_package'] = self.submittal_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdSubmittalsPost201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actual_delivery_date": obj.get("actual_delivery_date"),
            "attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "confirmed_delivery_date": obj.get("confirmed_delivery_date"),
            "cost_code": TimecardEntryFullCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "created_at": obj.get("created_at"),
            "custom_textarea_1": obj.get("custom_textarea_1"),
            "custom_textfield_1": obj.get("custom_textfield_1"),
            "deleted_at": obj.get("deleted_at"),
            "description": obj.get("description"),
            "design_team_review_time": obj.get("design_team_review_time"),
            "distribution_members": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["distribution_members"]] if obj.get("distribution_members") is not None else None,
            "internal_review_time": obj.get("internal_review_time"),
            "lead_time": obj.get("lead_time"),
            "required_on_site_date": obj.get("required_on_site_date"),
            "scheduled_task": Task2.from_dict(obj["scheduled_task"]) if obj.get("scheduled_task") is not None else None,
            "source_submittal_log_id": obj.get("source_submittal_log_id"),
            "distributed_submittals": [RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfDistributedSubmittalsInner.from_dict(_item) for _item in obj["distributed_submittals"]] if obj.get("distributed_submittals") is not None else None,
            "approvers": [RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfApproversInner.from_dict(_item) for _item in obj["approvers"]] if obj.get("approvers") is not None else None,
            "attachments_count": obj.get("attachments_count"),
            "ball_in_court": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["ball_in_court"]] if obj.get("ball_in_court") is not None else None,
            "buffer_time": obj.get("buffer_time"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "current_revision": obj.get("current_revision"),
            "distributed_at": obj.get("distributed_at"),
            "due_date": obj.get("due_date"),
            "for_record_only": obj.get("for_record_only"),
            "formatted_number": obj.get("formatted_number"),
            "issue_date": obj.get("issue_date"),
            "private": obj.get("private"),
            "received_date": obj.get("received_date"),
            "received_from": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["received_from"]) if obj.get("received_from") is not None else None,
            "responsible_contractor": RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor.from_dict(obj["responsible_contractor"]) if obj.get("responsible_contractor") is not None else None,
            "specification_section": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerSpecificationSection.from_dict(obj["specification_section"]) if obj.get("specification_section") is not None else None,
            "sub_job": TimecardEntry3SubJob.from_dict(obj["sub_job"]) if obj.get("sub_job") is not None else None,
            "submit_by": obj.get("submit_by"),
            "status": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "type": RestV11ProjectsProjectIdSubmittalsGet200ResponseInnerType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "updated_at": obj.get("updated_at"),
            "submittal_manager": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["submittal_manager"]) if obj.get("submittal_manager") is not None else None,
            "submittal_package": RestV11ProjectsProjectIdSubmittalsPost201ResponseAllOfSubmittalPackage.from_dict(obj["submittal_package"]) if obj.get("submittal_package") is not None else None,
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "open_date": obj.get("open_date"),
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "id": obj.get("id"),
            "number": obj.get("number"),
            "revision": obj.get("revision"),
            "title": obj.get("title")
        })
        return _obj


