# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.normal_custom_fields import NormalCustomFields
from procore_sdk.models.project_bid_type import ProjectBidType
from procore_sdk.models.project_company1 import ProjectCompany1
from procore_sdk.models.project_department import ProjectDepartment
from procore_sdk.models.project_office import ProjectOffice
from procore_sdk.models.project_owner_type import ProjectOwnerType
from procore_sdk.models.project_persistent_message import ProjectPersistentMessage
from procore_sdk.models.project_program import ProjectProgram
from procore_sdk.models.project_region import ProjectRegion
from procore_sdk.models.project_stage1 import ProjectStage1
from procore_sdk.models.project_type import ProjectType
from typing import Optional, Set
from typing_extensions import Self

class Extended2(BaseModel):
    """
    Extended2
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    accounting_project_number: Optional[StrictStr] = Field(default=None, description="Accounting Project Number of the Project")
    active: Optional[StrictBool] = Field(default=None, description="Project active status")
    actual_start_date: Optional[date] = Field(default=None, description="Project actual start date")
    address: Optional[StrictStr] = Field(default=None, description="Project address")
    city: Optional[StrictStr] = Field(default=None, description="Project city")
    company: Optional[ProjectCompany1] = None
    completion_date: Optional[date] = Field(default=None, description="The date that all parties agree the project meets or must meet “substantial completion”. Note: this field is a replacement to estimated_completion_date and will mirror its value.")
    country_code: Optional[StrictStr] = Field(default=None, description="Project country code (ISO-3166 Alpha-2 format)")
    county: Optional[StrictStr] = Field(default=None, description="Project county")
    created_at: Optional[datetime] = Field(default=None, description="Project created at")
    custom_fields: Optional[NormalCustomFields] = None
    departments: Optional[List[ProjectDepartment]] = Field(default=None, description="Array of project departments")
    description: Optional[StrictStr] = Field(default=None, description="Project description")
    designated_market_area: Optional[StrictStr] = Field(default=None, description="Designated Market Area of the Project")
    dictionary_type: Optional[StrictStr] = Field(default=None, description="Dictionary Type")
    display_name: Optional[StrictStr] = Field(default=None, description="Project display name")
    estimated_completion_date: Optional[date] = Field(default=None, description="The Estimated Completion Date of the Project. Note: this field is now deprecated and will mirror the value of completion_date until it is no longer supported.")
    estimated_start_date: Optional[date] = Field(default=None, description="The Estimated Start Date of the Project. Note: this field is now deprecated and will mirror the value of start_date until it is no longer supported.")
    estimated_value: Optional[StrictStr] = Field(default=None, description="The Estimated Value of the Project. Note: this field is now deprecated and will mirror the value of total_value until it is no longer supported.")
    flag: Optional[StrictStr] = Field(default=None, description="Project flag")
    inbound_email: Optional[StrictStr] = Field(default=None, description="The inbound email address username suffix for the project.")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Project latitude")
    logo_url: Optional[StrictStr] = Field(default=None, description="Project logo url")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Project longitude")
    name: Optional[StrictStr] = Field(default=None, description="Project name")
    office: Optional[ProjectOffice] = None
    origin_code: Optional[StrictStr] = Field(default=None, description="Project third party code")
    origin_data: Optional[StrictStr] = Field(default=None, description="Project third party data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Project third party id")
    owners_project_id: Optional[StrictInt] = Field(default=None, description="Linked Owner's unique identifier for the Project")
    parent_job_id: Optional[StrictInt] = Field(default=None, description="Parent Job ID")
    persistent_message: Optional[ProjectPersistentMessage] = None
    phone: Optional[StrictStr] = Field(default=None, description="Project phone")
    photo_id: Optional[StrictInt] = Field(default=None, description="Project Photo Id")
    program: Optional[ProjectProgram] = None
    project_bid_type: Optional[ProjectBidType] = None
    project_number: Optional[StrictStr] = Field(default=None, description="Project number")
    project_owner_type: Optional[ProjectOwnerType] = None
    project_owner_type_id: Optional[StrictInt] = Field(default=None, description="The Owner Type for the Project")
    project_region: Optional[ProjectRegion] = None
    project_region_id: Optional[StrictInt] = Field(default=None, description="The Region identifier for the Project")
    project_stage: Optional[ProjectStage1] = None
    project_type: Optional[ProjectType] = None
    projected_finish_date: Optional[date] = Field(default=None, description="Project finish date")
    public_notes: Optional[StrictStr] = Field(default=None, description="Project public notes")
    square_feet: Optional[StrictInt] = Field(default=None, description="Project square feet")
    standard_cost_code_list_id: Optional[StrictInt] = Field(default=None, description="The Standard Cost Code List identifier for the Project")
    start_date: Optional[date] = Field(default=None, description="The date that the contract for the project is signed. Note: this field is a replacement to estimated_start_date and will mirror its value.")
    state_code: Optional[StrictStr] = Field(default=None, description="Project state code (ISO-3166 Alpha-2 format)")
    store_number: Optional[StrictStr] = Field(default=None, description="Store Number of the Project")
    time_zone: Optional[StrictStr] = Field(default=None, description="The Timezone of the Project")
    total_value: Optional[StrictStr] = Field(default=None, description="The total amount of construction work performed, planned, or put in place during the project. Note: this field is a replacement to estimated_value and will mirror its value.")
    tz_name: Optional[StrictStr] = Field(default=None, description="The tz-database version of the Timezone of the Project")
    updated_at: Optional[datetime] = Field(default=None, description="Project updated at")
    warranty_end_date: Optional[date] = Field(default=None, description="Project warranty end date")
    warranty_start_date: Optional[date] = Field(default=None, description="Project warranty start date")
    zip: Optional[StrictStr] = Field(default=None, description="Project zip code")
    __properties: ClassVar[List[str]] = ["id", "accounting_project_number", "active", "actual_start_date", "address", "city", "company", "completion_date", "country_code", "county", "created_at", "custom_fields", "departments", "description", "designated_market_area", "dictionary_type", "display_name", "estimated_completion_date", "estimated_start_date", "estimated_value", "flag", "inbound_email", "latitude", "logo_url", "longitude", "name", "office", "origin_code", "origin_data", "origin_id", "owners_project_id", "parent_job_id", "persistent_message", "phone", "photo_id", "program", "project_bid_type", "project_number", "project_owner_type", "project_owner_type_id", "project_region", "project_region_id", "project_stage", "project_type", "projected_finish_date", "public_notes", "square_feet", "standard_cost_code_list_id", "start_date", "state_code", "store_number", "time_zone", "total_value", "tz_name", "updated_at", "warranty_end_date", "warranty_start_date", "zip"]

    @field_validator('flag')
    def flag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Red', 'Yellow', 'Green', 'null']):
            raise ValueError("must be one of enum values ('Red', 'Yellow', 'Green', 'null')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Extended2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in departments (list)
        _items = []
        if self.departments:
            for _item_departments in self.departments:
                if _item_departments:
                    _items.append(_item_departments.to_dict())
            _dict['departments'] = _items
        # override the default output from pydantic by calling `to_dict()` of office
        if self.office:
            _dict['office'] = self.office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persistent_message
        if self.persistent_message:
            _dict['persistent_message'] = self.persistent_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program
        if self.program:
            _dict['program'] = self.program.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_bid_type
        if self.project_bid_type:
            _dict['project_bid_type'] = self.project_bid_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_owner_type
        if self.project_owner_type:
            _dict['project_owner_type'] = self.project_owner_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_region
        if self.project_region:
            _dict['project_region'] = self.project_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_stage
        if self.project_stage:
            _dict['project_stage'] = self.project_stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_type
        if self.project_type:
            _dict['project_type'] = self.project_type.to_dict()
        # set to None if accounting_project_number (nullable) is None
        # and model_fields_set contains the field
        if self.accounting_project_number is None and "accounting_project_number" in self.model_fields_set:
            _dict['accounting_project_number'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.completion_date is None and "completion_date" in self.model_fields_set:
            _dict['completion_date'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if county (nullable) is None
        # and model_fields_set contains the field
        if self.county is None and "county" in self.model_fields_set:
            _dict['county'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if designated_market_area (nullable) is None
        # and model_fields_set contains the field
        if self.designated_market_area is None and "designated_market_area" in self.model_fields_set:
            _dict['designated_market_area'] = None

        # set to None if estimated_completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_completion_date is None and "estimated_completion_date" in self.model_fields_set:
            _dict['estimated_completion_date'] = None

        # set to None if estimated_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_start_date is None and "estimated_start_date" in self.model_fields_set:
            _dict['estimated_start_date'] = None

        # set to None if estimated_value (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_value is None and "estimated_value" in self.model_fields_set:
            _dict['estimated_value'] = None

        # set to None if flag (nullable) is None
        # and model_fields_set contains the field
        if self.flag is None and "flag" in self.model_fields_set:
            _dict['flag'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if origin_code (nullable) is None
        # and model_fields_set contains the field
        if self.origin_code is None and "origin_code" in self.model_fields_set:
            _dict['origin_code'] = None

        # set to None if origin_data (nullable) is None
        # and model_fields_set contains the field
        if self.origin_data is None and "origin_data" in self.model_fields_set:
            _dict['origin_data'] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        # set to None if owners_project_id (nullable) is None
        # and model_fields_set contains the field
        if self.owners_project_id is None and "owners_project_id" in self.model_fields_set:
            _dict['owners_project_id'] = None

        # set to None if parent_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_job_id is None and "parent_job_id" in self.model_fields_set:
            _dict['parent_job_id'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if photo_id (nullable) is None
        # and model_fields_set contains the field
        if self.photo_id is None and "photo_id" in self.model_fields_set:
            _dict['photo_id'] = None

        # set to None if project_number (nullable) is None
        # and model_fields_set contains the field
        if self.project_number is None and "project_number" in self.model_fields_set:
            _dict['project_number'] = None

        # set to None if project_owner_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_owner_type_id is None and "project_owner_type_id" in self.model_fields_set:
            _dict['project_owner_type_id'] = None

        # set to None if project_region_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_region_id is None and "project_region_id" in self.model_fields_set:
            _dict['project_region_id'] = None

        # set to None if projected_finish_date (nullable) is None
        # and model_fields_set contains the field
        if self.projected_finish_date is None and "projected_finish_date" in self.model_fields_set:
            _dict['projected_finish_date'] = None

        # set to None if public_notes (nullable) is None
        # and model_fields_set contains the field
        if self.public_notes is None and "public_notes" in self.model_fields_set:
            _dict['public_notes'] = None

        # set to None if square_feet (nullable) is None
        # and model_fields_set contains the field
        if self.square_feet is None and "square_feet" in self.model_fields_set:
            _dict['square_feet'] = None

        # set to None if standard_cost_code_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.standard_cost_code_list_id is None and "standard_cost_code_list_id" in self.model_fields_set:
            _dict['standard_cost_code_list_id'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['state_code'] = None

        # set to None if store_number (nullable) is None
        # and model_fields_set contains the field
        if self.store_number is None and "store_number" in self.model_fields_set:
            _dict['store_number'] = None

        # set to None if total_value (nullable) is None
        # and model_fields_set contains the field
        if self.total_value is None and "total_value" in self.model_fields_set:
            _dict['total_value'] = None

        # set to None if warranty_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.warranty_end_date is None and "warranty_end_date" in self.model_fields_set:
            _dict['warranty_end_date'] = None

        # set to None if warranty_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.warranty_start_date is None and "warranty_start_date" in self.model_fields_set:
            _dict['warranty_start_date'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Extended2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accounting_project_number": obj.get("accounting_project_number"),
            "active": obj.get("active"),
            "actual_start_date": obj.get("actual_start_date"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "company": ProjectCompany1.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "completion_date": obj.get("completion_date"),
            "country_code": obj.get("country_code"),
            "county": obj.get("county"),
            "created_at": obj.get("created_at"),
            "custom_fields": NormalCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "departments": [ProjectDepartment.from_dict(_item) for _item in obj["departments"]] if obj.get("departments") is not None else None,
            "description": obj.get("description"),
            "designated_market_area": obj.get("designated_market_area"),
            "dictionary_type": obj.get("dictionary_type"),
            "display_name": obj.get("display_name"),
            "estimated_completion_date": obj.get("estimated_completion_date"),
            "estimated_start_date": obj.get("estimated_start_date"),
            "estimated_value": obj.get("estimated_value"),
            "flag": obj.get("flag"),
            "inbound_email": obj.get("inbound_email"),
            "latitude": obj.get("latitude"),
            "logo_url": obj.get("logo_url"),
            "longitude": obj.get("longitude"),
            "name": obj.get("name"),
            "office": ProjectOffice.from_dict(obj["office"]) if obj.get("office") is not None else None,
            "origin_code": obj.get("origin_code"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "owners_project_id": obj.get("owners_project_id"),
            "parent_job_id": obj.get("parent_job_id"),
            "persistent_message": ProjectPersistentMessage.from_dict(obj["persistent_message"]) if obj.get("persistent_message") is not None else None,
            "phone": obj.get("phone"),
            "photo_id": obj.get("photo_id"),
            "program": ProjectProgram.from_dict(obj["program"]) if obj.get("program") is not None else None,
            "project_bid_type": ProjectBidType.from_dict(obj["project_bid_type"]) if obj.get("project_bid_type") is not None else None,
            "project_number": obj.get("project_number"),
            "project_owner_type": ProjectOwnerType.from_dict(obj["project_owner_type"]) if obj.get("project_owner_type") is not None else None,
            "project_owner_type_id": obj.get("project_owner_type_id"),
            "project_region": ProjectRegion.from_dict(obj["project_region"]) if obj.get("project_region") is not None else None,
            "project_region_id": obj.get("project_region_id"),
            "project_stage": ProjectStage1.from_dict(obj["project_stage"]) if obj.get("project_stage") is not None else None,
            "project_type": ProjectType.from_dict(obj["project_type"]) if obj.get("project_type") is not None else None,
            "projected_finish_date": obj.get("projected_finish_date"),
            "public_notes": obj.get("public_notes"),
            "square_feet": obj.get("square_feet"),
            "standard_cost_code_list_id": obj.get("standard_cost_code_list_id"),
            "start_date": obj.get("start_date"),
            "state_code": obj.get("state_code"),
            "store_number": obj.get("store_number"),
            "time_zone": obj.get("time_zone"),
            "total_value": obj.get("total_value"),
            "tz_name": obj.get("tz_name"),
            "updated_at": obj.get("updated_at"),
            "warranty_end_date": obj.get("warranty_end_date"),
            "warranty_start_date": obj.get("warranty_start_date"),
            "zip": obj.get("zip")
        })
        return _obj


