# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_budget_changes_post201_response_data_all_of_adjustment_line_items_inner import RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInner
from procore_sdk.models.rest_v10_projects_project_id_budget_changes_post201_response_data_all_of_attachments_inner import RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAttachmentsInner
from procore_sdk.models.rest_v10_projects_project_id_budget_changes_post201_response_data_all_of_created_change_event import RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfCreatedChangeEvent
from procore_sdk.models.rest_v10_projects_project_id_budget_changes_post201_response_data_all_of_production_quantities_inner import RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfProductionQuantitiesInner
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_currency_configuration import RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdBudgetChangesPost201ResponseData(BaseModel):
    """
    RestV10ProjectsProjectIdBudgetChangesPost201ResponseData
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the budget change")
    number: Optional[StrictInt] = Field(default=None, description="Number field of the budget change")
    status: Optional[StrictStr] = Field(default=None, description="Status of the budget change")
    title: Optional[StrictStr] = Field(default=None, description="Title of budget change")
    description: Optional[StrictStr] = Field(default=None, description="Description of the budget change in HTML format")
    erp_status: Optional[StrictStr] = Field(default=None, description="Displays the state the ERP entity is in.")
    attachments: Optional[List[RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAttachmentsInner]] = None
    adjustment_line_items: Optional[List[RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInner]] = Field(default=None, description="todo this key be renamed to line_items in the future")
    created_change_event: Optional[RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfCreatedChangeEvent] = None
    production_quantities: Optional[List[RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfProductionQuantitiesInner]] = Field(default=None, description="List of budget change production quantities")
    currency_configuration: Optional[RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration] = None
    __properties: ClassVar[List[str]] = ["id", "number", "status", "title", "description", "erp_status", "attachments", "adjustment_line_items", "created_change_event", "production_quantities", "currency_configuration"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'approved', 'under_review', 'void']):
            raise ValueError("must be one of enum values ('draft', 'approved', 'under_review', 'void')")
        return value

    @field_validator('erp_status')
    def erp_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_in_erp', 'ready_to_export', 'exportging', 'failed_to_export', 'rejected', 'invalid', 'synced', 'not_integrated']):
            raise ValueError("must be one of enum values ('not_in_erp', 'ready_to_export', 'exportging', 'failed_to_export', 'rejected', 'invalid', 'synced', 'not_integrated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesPost201ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adjustment_line_items (list)
        _items = []
        if self.adjustment_line_items:
            for _item_adjustment_line_items in self.adjustment_line_items:
                if _item_adjustment_line_items:
                    _items.append(_item_adjustment_line_items.to_dict())
            _dict['adjustment_line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_change_event
        if self.created_change_event:
            _dict['created_change_event'] = self.created_change_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in production_quantities (list)
        _items = []
        if self.production_quantities:
            for _item_production_quantities in self.production_quantities:
                if _item_production_quantities:
                    _items.append(_item_production_quantities.to_dict())
            _dict['production_quantities'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # set to None if created_change_event (nullable) is None
        # and model_fields_set contains the field
        if self.created_change_event is None and "created_change_event" in self.model_fields_set:
            _dict['created_change_event'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesPost201ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "erp_status": obj.get("erp_status"),
            "attachments": [RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "adjustment_line_items": [RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInner.from_dict(_item) for _item in obj["adjustment_line_items"]] if obj.get("adjustment_line_items") is not None else None,
            "created_change_event": RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfCreatedChangeEvent.from_dict(obj["created_change_event"]) if obj.get("created_change_event") is not None else None,
            "production_quantities": [RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfProductionQuantitiesInner.from_dict(_item) for _item in obj["production_quantities"]] if obj.get("production_quantities") is not None else None,
            "currency_configuration": RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None
        })
        return _obj


