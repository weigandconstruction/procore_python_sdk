# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class PrimeContract(BaseModel):
    """
    Prime Contract object
    """ # noqa: E501
    actual_completion_date: Optional[StrictStr] = Field(default=None, description="Actual Completion Date")
    approval_letter_date: Optional[date] = Field(default=None, description="Approval letter date")
    architect_id: Optional[StrictInt] = Field(default=None, description="Architect ID")
    contractor_id: Optional[StrictInt] = Field(default=None, description="Contractor ID")
    contract_date: Optional[date] = Field(default=None, description="Contract date")
    contract_estimated_completion_date: Optional[StrictStr] = Field(default=None, description="Contract Estimated Completion Date")
    contract_start_date: Optional[StrictStr] = Field(default=None, description="Contract Start Date")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    exclusions: Optional[StrictStr] = Field(default=None, description="Exclusions")
    executed: Optional[StrictBool] = Field(default=None, description="Executed")
    execution_date: Optional[date] = Field(default=None, description="Execution date")
    inclusions: Optional[StrictStr] = Field(default=None, description="Inclusions")
    issued_on_date: Optional[date] = Field(default=None, description="Issued on date")
    letter_of_intent_date: Optional[date] = Field(default=None, description="Letter of intent date")
    number: Optional[StrictStr] = Field(default=None, description="Number of the Prime Contract")
    origin_data: Optional[StrictStr] = Field(default=None, description="Prime Contract third party data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Prime Contract third party ID")
    retainage_percent: Optional[StrictStr] = Field(default=None, description="Retainage Percent")
    returned_date: Optional[date] = Field(default=None, description="Returned date")
    signed_contract_received_date: Optional[StrictStr] = Field(default=None, description="Signed Contract Received Date")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    title: Optional[StrictStr] = Field(default=None, description="Title of the Prime Contract")
    vendor_id: Optional[StrictInt] = Field(default=None, description="Vendor ID")
    accounting_method: Optional[StrictStr] = Field(default=None, description="Accounting method")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Uploads to attach to the response")
    __properties: ClassVar[List[str]] = ["actual_completion_date", "approval_letter_date", "architect_id", "contractor_id", "contract_date", "contract_estimated_completion_date", "contract_start_date", "description", "exclusions", "executed", "execution_date", "inclusions", "issued_on_date", "letter_of_intent_date", "number", "origin_data", "origin_id", "retainage_percent", "returned_date", "signed_contract_received_date", "status", "title", "vendor_id", "accounting_method", "custom_field_%{custom_field_definition_id}", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Draft', 'Out For Bid', 'Out For Signature', 'Approved', 'Complete', 'Terminated']):
            raise ValueError("must be one of enum values ('Draft', 'Out For Bid', 'Out For Signature', 'Approved', 'Complete', 'Terminated')")
        return value

    @field_validator('accounting_method')
    def accounting_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['amount', 'unit']):
            raise ValueError("must be one of enum values ('amount', 'unit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrimeContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrimeContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actual_completion_date": obj.get("actual_completion_date"),
            "approval_letter_date": obj.get("approval_letter_date"),
            "architect_id": obj.get("architect_id"),
            "contractor_id": obj.get("contractor_id"),
            "contract_date": obj.get("contract_date"),
            "contract_estimated_completion_date": obj.get("contract_estimated_completion_date"),
            "contract_start_date": obj.get("contract_start_date"),
            "description": obj.get("description"),
            "exclusions": obj.get("exclusions"),
            "executed": obj.get("executed"),
            "execution_date": obj.get("execution_date"),
            "inclusions": obj.get("inclusions"),
            "issued_on_date": obj.get("issued_on_date"),
            "letter_of_intent_date": obj.get("letter_of_intent_date"),
            "number": obj.get("number"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "retainage_percent": obj.get("retainage_percent"),
            "returned_date": obj.get("returned_date"),
            "signed_contract_received_date": obj.get("signed_contract_received_date"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "vendor_id": obj.get("vendor_id"),
            "accounting_method": obj.get("accounting_method"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None,
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids")
        })
        return _obj


