# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.drawing_tile import DrawingTile
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDrawingRevisionsDrawingRevisionIdDrawingTilesGet200Response(BaseModel):
    """
    RestV10ProjectsProjectIdDrawingRevisionsDrawingRevisionIdDrawingTilesGet200Response
    """ # noqa: E501
    max_zoom_level: Optional[StrictInt] = Field(default=None, description="Max zoom level")
    tile_size: Optional[List[StrictInt]] = Field(default=None, description="Array of tile width and height")
    zip_url: Optional[StrictStr] = Field(default=None, description="ZIP url")
    tiles: Optional[List[DrawingTile]] = Field(default=None, description="Array of drawing tiles")
    __properties: ClassVar[List[str]] = ["max_zoom_level", "tile_size", "zip_url", "tiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDrawingRevisionsDrawingRevisionIdDrawingTilesGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiles (list)
        _items = []
        if self.tiles:
            for _item_tiles in self.tiles:
                if _item_tiles:
                    _items.append(_item_tiles.to_dict())
            _dict['tiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDrawingRevisionsDrawingRevisionIdDrawingTilesGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_zoom_level": obj.get("max_zoom_level"),
            "tile_size": obj.get("tile_size"),
            "zip_url": obj.get("zip_url"),
            "tiles": [DrawingTile.from_dict(_item) for _item in obj["tiles"]] if obj.get("tiles") is not None else None
        })
        return _obj


