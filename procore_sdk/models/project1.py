# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.project_company import ProjectCompany
from procore_sdk.models.project_stage import ProjectStage
from procore_sdk.models.project_template import ProjectTemplate
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from typing import Optional, Set
from typing_extensions import Self

class Project1(BaseModel):
    """
    Project1
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Project")
    is_demo: Optional[StrictBool] = Field(default=None, description="Indicates whether this is a test project or not")
    parent_job_id: Optional[StrictInt] = Field(default=None, description="Identifier for the parent job")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the Project")
    project_number: Optional[StrictStr] = Field(default=None, description="The Project number")
    address: Optional[StrictStr] = Field(default=None, description="The street address for the Project")
    city: Optional[StrictStr] = Field(default=None, description="The city in which the Project is located")
    state_code: Optional[StrictStr] = Field(default=None, description="The state code for the Project (ISO-3166 Alpha-2 format)")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code for the Project (ISO-3166 Alpha-2 format)")
    zip: Optional[StrictStr] = Field(default=None, description="The postal code for the Project")
    county: Optional[StrictStr] = Field(default=None, description="The county in which the Project is located")
    time_zone: Optional[StrictStr] = Field(default=None, description="The timezone the Project is located in")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The geographic coordinate that specifies the north–south position of the Project on the Earth's surface.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The geographic coordinate that specifies the east–west position of the Project on the Earth's surface.")
    stage: Optional[StrictStr] = Field(default=None, description="The name of the Project stage")
    project_stage: Optional[ProjectStage] = None
    project_template: Optional[ProjectTemplate] = None
    phone: Optional[StrictStr] = Field(default=None, description="The telephone number for the Project")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the Project was created")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time the Project was last updated")
    active: Optional[StrictBool] = Field(default=None, description="The active status for the Project")
    origin_id: Optional[StrictStr] = Field(default=None, description="An external third-party identifier for the Project")
    origin_data: Optional[StrictStr] = Field(default=None, description="An external third-party data string associated with the Project")
    origin_code: Optional[StrictStr] = Field(default=None, description="An external third-party code associated with the Project")
    owners_project_id: Optional[StrictInt] = Field(default=None, description="A linked identifier for the Owner's Project")
    total_value: Optional[StrictStr] = Field(default=None, description="The total amount of construction work performed, planned, or put in place during the project. Note: this field is a replacement to estimated_value and will mirror its value.")
    store_number: Optional[StrictStr] = Field(default=None, description="The store number for the Project")
    accounting_project_number: Optional[StrictStr] = Field(default=None, description="The accounting project number for the Project")
    designated_market_area: Optional[StrictStr] = Field(default=None, description="The designated market area the Project is located in")
    project_region_id: Optional[StrictInt] = Field(default=None, description="The region identifier for the Project")
    project_bid_type_id: Optional[StrictInt] = Field(default=None, description="The Bid Type identifier for the Project")
    project_owner_type_id: Optional[StrictInt] = Field(default=None, description="The Owner Type identifier for the Project")
    photo_id: Optional[StrictInt] = Field(default=None, description="The unique identifier for the Project Photo")
    start_date: Optional[date] = Field(default=None, description="The start date for the project")
    completion_date: Optional[date] = Field(default=None, description="The completion date for the project")
    estimated_value: Optional[StrictStr] = Field(default=None, description="The Estimated Value of the project. Note: this field is now deprecated and will mirror the value of total_value until it is no longer supported.")
    fax: Optional[StrictStr] = Field(default=None, description="The fax number for the Project")
    company: Optional[ProjectCompany] = None
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "name", "is_demo", "parent_job_id", "display_name", "project_number", "address", "city", "state_code", "country_code", "zip", "county", "time_zone", "latitude", "longitude", "stage", "project_stage", "project_template", "phone", "created_at", "updated_at", "active", "origin_id", "origin_data", "origin_code", "owners_project_id", "total_value", "store_number", "accounting_project_number", "designated_market_area", "project_region_id", "project_bid_type_id", "project_owner_type_id", "photo_id", "start_date", "completion_date", "estimated_value", "fax", "company", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_stage
        if self.project_stage:
            _dict['project_stage'] = self.project_stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_template
        if self.project_template:
            _dict['project_template'] = self.project_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if parent_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_job_id is None and "parent_job_id" in self.model_fields_set:
            _dict['parent_job_id'] = None

        # set to None if project_number (nullable) is None
        # and model_fields_set contains the field
        if self.project_number is None and "project_number" in self.model_fields_set:
            _dict['project_number'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['state_code'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if county (nullable) is None
        # and model_fields_set contains the field
        if self.county is None and "county" in self.model_fields_set:
            _dict['county'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        # set to None if origin_data (nullable) is None
        # and model_fields_set contains the field
        if self.origin_data is None and "origin_data" in self.model_fields_set:
            _dict['origin_data'] = None

        # set to None if origin_code (nullable) is None
        # and model_fields_set contains the field
        if self.origin_code is None and "origin_code" in self.model_fields_set:
            _dict['origin_code'] = None

        # set to None if owners_project_id (nullable) is None
        # and model_fields_set contains the field
        if self.owners_project_id is None and "owners_project_id" in self.model_fields_set:
            _dict['owners_project_id'] = None

        # set to None if total_value (nullable) is None
        # and model_fields_set contains the field
        if self.total_value is None and "total_value" in self.model_fields_set:
            _dict['total_value'] = None

        # set to None if store_number (nullable) is None
        # and model_fields_set contains the field
        if self.store_number is None and "store_number" in self.model_fields_set:
            _dict['store_number'] = None

        # set to None if accounting_project_number (nullable) is None
        # and model_fields_set contains the field
        if self.accounting_project_number is None and "accounting_project_number" in self.model_fields_set:
            _dict['accounting_project_number'] = None

        # set to None if designated_market_area (nullable) is None
        # and model_fields_set contains the field
        if self.designated_market_area is None and "designated_market_area" in self.model_fields_set:
            _dict['designated_market_area'] = None

        # set to None if project_region_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_region_id is None and "project_region_id" in self.model_fields_set:
            _dict['project_region_id'] = None

        # set to None if project_bid_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_bid_type_id is None and "project_bid_type_id" in self.model_fields_set:
            _dict['project_bid_type_id'] = None

        # set to None if project_owner_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_owner_type_id is None and "project_owner_type_id" in self.model_fields_set:
            _dict['project_owner_type_id'] = None

        # set to None if photo_id (nullable) is None
        # and model_fields_set contains the field
        if self.photo_id is None and "photo_id" in self.model_fields_set:
            _dict['photo_id'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.completion_date is None and "completion_date" in self.model_fields_set:
            _dict['completion_date'] = None

        # set to None if estimated_value (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_value is None and "estimated_value" in self.model_fields_set:
            _dict['estimated_value'] = None

        # set to None if fax (nullable) is None
        # and model_fields_set contains the field
        if self.fax is None and "fax" in self.model_fields_set:
            _dict['fax'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "is_demo": obj.get("is_demo"),
            "parent_job_id": obj.get("parent_job_id"),
            "display_name": obj.get("display_name"),
            "project_number": obj.get("project_number"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "state_code": obj.get("state_code"),
            "country_code": obj.get("country_code"),
            "zip": obj.get("zip"),
            "county": obj.get("county"),
            "time_zone": obj.get("time_zone"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "stage": obj.get("stage"),
            "project_stage": ProjectStage.from_dict(obj["project_stage"]) if obj.get("project_stage") is not None else None,
            "project_template": ProjectTemplate.from_dict(obj["project_template"]) if obj.get("project_template") is not None else None,
            "phone": obj.get("phone"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "active": obj.get("active"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "origin_code": obj.get("origin_code"),
            "owners_project_id": obj.get("owners_project_id"),
            "total_value": obj.get("total_value"),
            "store_number": obj.get("store_number"),
            "accounting_project_number": obj.get("accounting_project_number"),
            "designated_market_area": obj.get("designated_market_area"),
            "project_region_id": obj.get("project_region_id"),
            "project_bid_type_id": obj.get("project_bid_type_id"),
            "project_owner_type_id": obj.get("project_owner_type_id"),
            "photo_id": obj.get("photo_id"),
            "start_date": obj.get("start_date"),
            "completion_date": obj.get("completion_date"),
            "estimated_value": obj.get("estimated_value"),
            "fax": obj.get("fax"),
            "company": ProjectCompany.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


