# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10WorkflowActivityHistoriesGet200ResponseInner(BaseModel):
    """
    Workflow Activity History
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    attachments: Optional[List[StrictStr]] = Field(default=None, description="List of Attachment URLs")
    bic_duration: Optional[StrictStr] = Field(default=None, description="Ball In Court duration in days")
    bic_start: Optional[datetime] = Field(default=None, description="Ball In Court started at")
    bic_end: Optional[datetime] = Field(default=None, description="Ball In Court ended at")
    comments: Optional[StrictStr] = Field(default=None, description="Comments")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    performed_by_id: Optional[StrictInt] = Field(default=None, description="Login Information ID of a Workflow User Role Login Information.")
    performed_by_name: Optional[StrictStr] = Field(default=None, description="Full Name of Contact for Workflow User Role Login Information")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    workflow_activity_id: Optional[StrictInt] = Field(default=None, description="Workflow Activity ID")
    workflow_activity_name: Optional[StrictStr] = Field(default=None, description="Workflow Activity Name")
    workflow_instance_id: Optional[StrictInt] = Field(default=None, description="Workflow Instance ID")
    workflow_user_role_id: Optional[StrictInt] = Field(default=None, description="Workflow User Role ID")
    workflow_user_role_name: Optional[StrictStr] = Field(default=None, description="Workflow User Role Name")
    workflow_state_id: Optional[StrictInt] = Field(default=None, description="Workflow State ID")
    workflow_state_name: Optional[StrictStr] = Field(default=None, description="Workflow State Name")
    __properties: ClassVar[List[str]] = ["id", "attachments", "bic_duration", "bic_start", "bic_end", "comments", "created_at", "performed_by_id", "performed_by_name", "updated_at", "workflow_activity_id", "workflow_activity_name", "workflow_instance_id", "workflow_user_role_id", "workflow_user_role_name", "workflow_state_id", "workflow_state_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10WorkflowActivityHistoriesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10WorkflowActivityHistoriesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "attachments": obj.get("attachments"),
            "bic_duration": obj.get("bic_duration"),
            "bic_start": obj.get("bic_start"),
            "bic_end": obj.get("bic_end"),
            "comments": obj.get("comments"),
            "created_at": obj.get("created_at"),
            "performed_by_id": obj.get("performed_by_id"),
            "performed_by_name": obj.get("performed_by_name"),
            "updated_at": obj.get("updated_at"),
            "workflow_activity_id": obj.get("workflow_activity_id"),
            "workflow_activity_name": obj.get("workflow_activity_name"),
            "workflow_instance_id": obj.get("workflow_instance_id"),
            "workflow_user_role_id": obj.get("workflow_user_role_id"),
            "workflow_user_role_name": obj.get("workflow_user_role_name"),
            "workflow_state_id": obj.get("workflow_state_id"),
            "workflow_state_name": obj.get("workflow_state_name")
        })
        return _obj


