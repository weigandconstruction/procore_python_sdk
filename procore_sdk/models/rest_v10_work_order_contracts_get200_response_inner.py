# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_currency_configuration import RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_project import RestV10WorkOrderContractsGet200ResponseInnerProject
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_vendor import RestV10WorkOrderContractsGet200ResponseInnerVendor
from typing import Optional, Set
from typing_extensions import Self

class RestV10WorkOrderContractsGet200ResponseInner(BaseModel):
    """
    Work Order Contract
    """ # noqa: E501
    accounting_method: Optional[StrictStr] = Field(default=None, description="Accounting method")
    actual_completion_date: Optional[date] = Field(default=None, description="Actual completion date")
    approval_letter_date: Optional[StrictStr] = Field(default=None, description="Approval letter date")
    approved_change_orders: Optional[StrictStr] = Field(default=None, description="Approved change orders amount")
    contract_date: Optional[date] = Field(default=None, description="Contract date")
    contract_start_date: Optional[date] = Field(default=None, description="Start date")
    contract_estimated_completion_date: Optional[date] = Field(default=None, description="Estimated completion date")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    deleted_at: Optional[datetime] = Field(default=None, description="Deleted at")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    draft_change_orders_amount: Optional[StrictStr] = Field(default=None, description="Total of all draft change orders")
    exclusions: Optional[StrictStr] = Field(default=None, description="Exclusions")
    executed: Optional[StrictBool] = Field(default=None, description="Executed (or not)")
    execution_date: Optional[date] = Field(default=None, description="Execution date")
    grand_total: Optional[StrictStr] = Field(default=None, description="Grand total")
    id: Optional[StrictInt] = Field(default=None, description="ID")
    inclusions: Optional[StrictStr] = Field(default=None, description="Inclusions")
    issued_on_date: Optional[date] = Field(default=None, description="Issued on date")
    letter_of_intent_date: Optional[date] = Field(default=None, description="Letter of intent date")
    number: Optional[StrictStr] = Field(default=None, description="Number")
    origin_data: Optional[StrictStr] = Field(default=None, description="Origin data")
    origin_code: Optional[StrictStr] = Field(default=None, description="Origin code")
    origin_id: Optional[StrictStr] = Field(default=None, description="Origin ID")
    pending_change_orders: Optional[StrictStr] = Field(default=None, description="Pending change orders amount")
    pending_revised_contract: Optional[StrictStr] = Field(default=None, description="Pending revised contracts amount")
    percentage_paid: Optional[StrictStr] = Field(default=None, description="Percentage paid")
    private: Optional[StrictBool] = Field(default=None, description="If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.")
    project: Optional[RestV10WorkOrderContractsGet200ResponseInnerProject] = None
    remaining_balance_outstanding: Optional[StrictStr] = Field(default=None, description="Remaining outstanding balance")
    requisitions_are_enabled: Optional[StrictBool] = Field(default=None, description="If true, Requisitions (Subcontractor Invoice) are enabled on the Commitment Contract")
    retainage_percent: Optional[StrictStr] = Field(default=None, description="Retainage percent")
    returned_date: Optional[date] = Field(default=None, description="Returned date")
    revised_contract: Optional[StrictStr] = Field(default=None, description="Revised contract amount")
    signed_contract_received_date: Optional[date] = Field(default=None, description="Signed contract received date")
    show_line_items_to_non_admins: Optional[StrictBool] = Field(default=None, description="If true and the contract is private, non admins with access to the contract will be able to view the SOV items")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    title: Optional[StrictStr] = Field(default=None, description="Title")
    total_draw_requests_amount: Optional[StrictStr] = Field(default=None, description="Total draw requests amount")
    total_payments: Optional[StrictStr] = Field(default=None, description="Total payments amount")
    total_requisitions_amount: Optional[StrictStr] = Field(default=None, description="Total requisitions (sub invoices) amount")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    vendor: Optional[RestV10WorkOrderContractsGet200ResponseInnerVendor] = None
    currency_configuration: Optional[RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration] = None
    __properties: ClassVar[List[str]] = ["accounting_method", "actual_completion_date", "approval_letter_date", "approved_change_orders", "contract_date", "contract_start_date", "contract_estimated_completion_date", "created_at", "deleted_at", "description", "draft_change_orders_amount", "exclusions", "executed", "execution_date", "grand_total", "id", "inclusions", "issued_on_date", "letter_of_intent_date", "number", "origin_data", "origin_code", "origin_id", "pending_change_orders", "pending_revised_contract", "percentage_paid", "private", "project", "remaining_balance_outstanding", "requisitions_are_enabled", "retainage_percent", "returned_date", "revised_contract", "signed_contract_received_date", "show_line_items_to_non_admins", "status", "title", "total_draw_requests_amount", "total_payments", "total_requisitions_amount", "updated_at", "vendor", "currency_configuration"]

    @field_validator('accounting_method')
    def accounting_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['amount', 'unit']):
            raise ValueError("must be one of enum values ('amount', 'unit')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Draft', 'Out For Bid', 'Out For Signature', 'Approved', 'Complete', 'Terminated', 'Void']):
            raise ValueError("must be one of enum values ('Draft', 'Out For Bid', 'Out For Signature', 'Approved', 'Complete', 'Terminated', 'Void')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10WorkOrderContractsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10WorkOrderContractsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accounting_method": obj.get("accounting_method"),
            "actual_completion_date": obj.get("actual_completion_date"),
            "approval_letter_date": obj.get("approval_letter_date"),
            "approved_change_orders": obj.get("approved_change_orders"),
            "contract_date": obj.get("contract_date"),
            "contract_start_date": obj.get("contract_start_date"),
            "contract_estimated_completion_date": obj.get("contract_estimated_completion_date"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "description": obj.get("description"),
            "draft_change_orders_amount": obj.get("draft_change_orders_amount"),
            "exclusions": obj.get("exclusions"),
            "executed": obj.get("executed"),
            "execution_date": obj.get("execution_date"),
            "grand_total": obj.get("grand_total"),
            "id": obj.get("id"),
            "inclusions": obj.get("inclusions"),
            "issued_on_date": obj.get("issued_on_date"),
            "letter_of_intent_date": obj.get("letter_of_intent_date"),
            "number": obj.get("number"),
            "origin_data": obj.get("origin_data"),
            "origin_code": obj.get("origin_code"),
            "origin_id": obj.get("origin_id"),
            "pending_change_orders": obj.get("pending_change_orders"),
            "pending_revised_contract": obj.get("pending_revised_contract"),
            "percentage_paid": obj.get("percentage_paid"),
            "private": obj.get("private"),
            "project": RestV10WorkOrderContractsGet200ResponseInnerProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "remaining_balance_outstanding": obj.get("remaining_balance_outstanding"),
            "requisitions_are_enabled": obj.get("requisitions_are_enabled"),
            "retainage_percent": obj.get("retainage_percent"),
            "returned_date": obj.get("returned_date"),
            "revised_contract": obj.get("revised_contract"),
            "signed_contract_received_date": obj.get("signed_contract_received_date"),
            "show_line_items_to_non_admins": obj.get("show_line_items_to_non_admins"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "total_draw_requests_amount": obj.get("total_draw_requests_amount"),
            "total_payments": obj.get("total_payments"),
            "total_requisitions_amount": obj.get("total_requisitions_amount"),
            "updated_at": obj.get("updated_at"),
            "vendor": RestV10WorkOrderContractsGet200ResponseInnerVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "currency_configuration": RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None
        })
        return _obj


