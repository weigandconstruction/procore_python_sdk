# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_viewpoints_inner_all_of_snapshot import RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInnerAllOfSnapshot
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_viewpoints_inner_all_of_visibility import RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInnerAllOfVisibility
from typing import Optional, Set
from typing_extensions import Self

class RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner(BaseModel):
    """
    RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    bim_file_id: Optional[StrictInt] = Field(default=None, description="ID of associated BIM File")
    view_folder_id: Optional[StrictInt] = Field(default=None, description="ID of associated BIM View Folder")
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    snapshot: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInnerAllOfSnapshot] = None
    name: Optional[StrictStr] = Field(default=None, description="Viewpoint name")
    render_mode: Optional[StrictStr] = Field(default=None, description="Viewer render mode when viewpoint is applied")
    visibility: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInnerAllOfVisibility] = None
    camera_data: Optional[StrictStr] = Field(default=None, description="JSON string representation of camera position")
    redlines_data: Optional[StrictStr] = Field(default=None, description="JSON string representation of markup")
    sections_data: Optional[StrictStr] = Field(default=None, description="JSON string representation of sections applied to a 3d model as a set of clipping planes")
    __properties: ClassVar[List[str]] = ["id", "bim_file_id", "view_folder_id", "created_at", "updated_at", "snapshot", "name", "render_mode", "visibility", "camera_data", "redlines_data", "sections_data"]

    @field_validator('render_mode')
    def render_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['shaded', 'xray']):
            raise ValueError("must be one of enum values ('shaded', 'xray')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of snapshot
        if self.snapshot:
            _dict['snapshot'] = self.snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visibility
        if self.visibility:
            _dict['visibility'] = self.visibility.to_dict()
        # set to None if view_folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_folder_id is None and "view_folder_id" in self.model_fields_set:
            _dict['view_folder_id'] = None

        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bim_file_id": obj.get("bim_file_id"),
            "view_folder_id": obj.get("view_folder_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "snapshot": RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInnerAllOfSnapshot.from_dict(obj["snapshot"]) if obj.get("snapshot") is not None else None,
            "name": obj.get("name"),
            "render_mode": obj.get("render_mode"),
            "visibility": RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInnerAllOfVisibility.from_dict(obj["visibility"]) if obj.get("visibility") is not None else None,
            "camera_data": obj.get("camera_data"),
            "redlines_data": obj.get("redlines_data"),
            "sections_data": obj.get("sections_data")
        })
        return _obj


