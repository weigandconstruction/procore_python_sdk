# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.location1 import Location1
from procore_sdk.models.punch_item_assignments_inner import PunchItemAssignmentsInner
from procore_sdk.models.punch_item_ball_in_court_inner import PunchItemBallInCourtInner
from procore_sdk.models.punch_item_type import PunchItemType
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_custom_fields import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.timecard_entry_full_cost_code import TimecardEntryFullCostCode
from procore_sdk.models.trade import Trade
from typing import Optional, Set
from typing_extensions import Self

class PunchItem(BaseModel):
    """
    PunchItem
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    ball_in_court: Optional[List[PunchItemBallInCourtInner]] = Field(default=None, description="Array of Users")
    closed_at: Optional[datetime] = Field(default=None, description="Date time Punch Item was closed")
    cost_impact: Optional[StrictStr] = Field(default=None, description="Cost impact status")
    cost_impact_amount: Optional[StrictStr] = Field(default=None, description="Cost impact amount")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    deleted_at: Optional[datetime] = Field(default=None, description="Deleted at")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    due_date: Optional[date] = Field(default=None, description="Due date")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    reference: Optional[StrictStr] = Field(default=None, description="Used to create a reference point between a Punch Item within Procore and a corresponding Punch Item outside of Procore")
    schedule_impact: Optional[StrictStr] = Field(default=None, description="Schedule impact status")
    schedule_impact_days: Optional[StrictInt] = Field(default=None, description="Schedule impact value in days")
    schedule_risk: Optional[StrictStr] = Field(default=None, description="Assessed risk level of on-time completion")
    schedule_risk_reason: Optional[StrictStr] = Field(default=None, description="Reason for assessed risk level of on-time completion")
    schedule_risk_confidence: Optional[StrictInt] = Field(default=None, description="Confidence of schedule risk assessment")
    schedule_risk_probability: Optional[StrictInt] = Field(default=None, description="Probability of schedule risk assessment")
    position: Optional[StrictInt] = Field(default=None, description="Position")
    priority: Optional[StrictStr] = Field(default=None, description="Punch item priority - 'low', 'medium', 'high'")
    private: Optional[StrictBool] = Field(default=None, description="Privacy status")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    has_resolved_responses: Optional[StrictBool] = Field(default=None, description="At least one Punch Item Assignment has a status of 'resolved")
    has_unresolved_responses: Optional[StrictBool] = Field(default=None, description="At least one Punch Item Assignment has a status of 'unresolved'")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    location: Optional[Location1] = None
    trade: Optional[Trade] = None
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    punch_item_manager: Optional[PunchItemBallInCourtInner] = None
    final_approver: Optional[PunchItemBallInCourtInner] = None
    punch_item_type: Optional[PunchItemType] = None
    cost_code: Optional[TimecardEntryFullCostCode] = None
    assignments: Optional[List[PunchItemAssignmentsInner]] = Field(default=None, description="Array of Punch Item Assignments")
    assignees: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = Field(default=None, description="Punch Item Assignees")
    workflow_status: Optional[StrictStr] = Field(default=None, description="Workflow status of the Punch Item")
    custom_fields: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "ball_in_court", "closed_at", "cost_impact", "cost_impact_amount", "created_at", "deleted_at", "description", "due_date", "name", "reference", "schedule_impact", "schedule_impact_days", "schedule_risk", "schedule_risk_reason", "schedule_risk_confidence", "schedule_risk_probability", "position", "priority", "private", "status", "has_resolved_responses", "has_unresolved_responses", "updated_at", "location", "trade", "created_by", "punch_item_manager", "final_approver", "punch_item_type", "cost_code", "assignments", "assignees", "workflow_status", "custom_fields"]

    @field_validator('cost_impact')
    def cost_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a']):
            raise ValueError("must be one of enum values ('yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a')")
        return value

    @field_validator('schedule_impact')
    def schedule_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a']):
            raise ValueError("must be one of enum values ('yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a')")
        return value

    @field_validator('schedule_risk')
    def schedule_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ml_low', 'ml_medium', 'ml_high']):
            raise ValueError("must be one of enum values ('ml_low', 'ml_medium', 'ml_high')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Open', 'Closed', 'Overdue', 'Pending']):
            raise ValueError("must be one of enum values ('Open', 'Closed', 'Overdue', 'Pending')")
        return value

    @field_validator('workflow_status')
    def workflow_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'initiated', 'in_dispute', 'work_required', 'ready_for_review', 'work_not_accepted', 'ready_to_close', 'not_accepted_by_creator', 'closed']):
            raise ValueError("must be one of enum values ('draft', 'initiated', 'in_dispute', 'work_required', 'ready_for_review', 'work_not_accepted', 'ready_to_close', 'not_accepted_by_creator', 'closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PunchItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ball_in_court (list)
        _items = []
        if self.ball_in_court:
            for _item_ball_in_court in self.ball_in_court:
                if _item_ball_in_court:
                    _items.append(_item_ball_in_court.to_dict())
            _dict['ball_in_court'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of punch_item_manager
        if self.punch_item_manager:
            _dict['punch_item_manager'] = self.punch_item_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_approver
        if self.final_approver:
            _dict['final_approver'] = self.final_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of punch_item_type
        if self.punch_item_type:
            _dict['punch_item_type'] = self.punch_item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assignments (list)
        _items = []
        if self.assignments:
            for _item_assignments in self.assignments:
                if _item_assignments:
                    _items.append(_item_assignments.to_dict())
            _dict['assignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if trade (nullable) is None
        # and model_fields_set contains the field
        if self.trade is None and "trade" in self.model_fields_set:
            _dict['trade'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PunchItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ball_in_court": [PunchItemBallInCourtInner.from_dict(_item) for _item in obj["ball_in_court"]] if obj.get("ball_in_court") is not None else None,
            "closed_at": obj.get("closed_at"),
            "cost_impact": obj.get("cost_impact"),
            "cost_impact_amount": obj.get("cost_impact_amount"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "name": obj.get("name"),
            "reference": obj.get("reference"),
            "schedule_impact": obj.get("schedule_impact"),
            "schedule_impact_days": obj.get("schedule_impact_days"),
            "schedule_risk": obj.get("schedule_risk"),
            "schedule_risk_reason": obj.get("schedule_risk_reason"),
            "schedule_risk_confidence": obj.get("schedule_risk_confidence"),
            "schedule_risk_probability": obj.get("schedule_risk_probability"),
            "position": obj.get("position"),
            "priority": obj.get("priority"),
            "private": obj.get("private"),
            "status": obj.get("status"),
            "has_resolved_responses": obj.get("has_resolved_responses"),
            "has_unresolved_responses": obj.get("has_unresolved_responses"),
            "updated_at": obj.get("updated_at"),
            "location": Location1.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "trade": Trade.from_dict(obj["trade"]) if obj.get("trade") is not None else None,
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "punch_item_manager": PunchItemBallInCourtInner.from_dict(obj["punch_item_manager"]) if obj.get("punch_item_manager") is not None else None,
            "final_approver": PunchItemBallInCourtInner.from_dict(obj["final_approver"]) if obj.get("final_approver") is not None else None,
            "punch_item_type": PunchItemType.from_dict(obj["punch_item_type"]) if obj.get("punch_item_type") is not None else None,
            "cost_code": TimecardEntryFullCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "assignments": [PunchItemAssignmentsInner.from_dict(_item) for _item in obj["assignments"]] if obj.get("assignments") is not None else None,
            "assignees": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "workflow_status": obj.get("workflow_status"),
            "custom_fields": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


