# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.array_of_potential_change_order_line_items_errors_inner_all_of_holder import ArrayOfPotentialChangeOrderLineItemsErrorsInnerAllOfHolder
from procore_sdk.models.rest_v10_projects_project_id_direct_costs_line_items_get200_response_inner_cost_code import RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerCostCode
from procore_sdk.models.rest_v10_projects_project_id_direct_costs_line_items_get200_response_inner_currency_configuration import RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerCurrencyConfiguration
from procore_sdk.models.rest_v10_projects_project_id_direct_costs_line_items_get200_response_inner_line_item_type import RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerLineItemType
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_project import RestV10WorkOrderContractsGet200ResponseInnerProject
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_line_items_inner_wbs_code import RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInner(BaseModel):
    """
    Line Item
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Line Item id")
    amount: Optional[StrictStr] = Field(default=None, description="Line Item amount")
    cost_code: Optional[RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerCostCode] = None
    created_at: Optional[datetime] = Field(default=None, description="Created at date and time")
    description: Optional[StrictStr] = Field(default=None, description="Line Item description")
    extended_amount: Optional[StrictStr] = Field(default=None, description="Line Item extended amount")
    extended_type: Optional[StrictStr] = Field(default=None, description="Line Item extended type")
    holder: Optional[ArrayOfPotentialChangeOrderLineItemsErrorsInnerAllOfHolder] = None
    line_item_type: Optional[RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerLineItemType] = None
    origin_id: Optional[StrictStr] = Field(default=None, description="Line Item third party id")
    position: Optional[StrictInt] = Field(default=None, description="Line Item position")
    project: Optional[RestV10WorkOrderContractsGet200ResponseInnerProject] = None
    quantity: Optional[StrictStr] = Field(default=None, description="Line Item quantity")
    total_amount: Optional[StrictStr] = Field(default=None, description="Line Item total amount")
    unit_cost: Optional[StrictStr] = Field(default=None, description="Line Item unit cost")
    uom: Optional[StrictStr] = Field(default=None, description="Line Item units of measure")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at date and time")
    wbs_code: Optional[RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode] = None
    currency_configuration: Optional[RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerCurrencyConfiguration] = None
    __properties: ClassVar[List[str]] = ["id", "amount", "cost_code", "created_at", "description", "extended_amount", "extended_type", "holder", "line_item_type", "origin_id", "position", "project", "quantity", "total_amount", "unit_cost", "uom", "updated_at", "wbs_code", "currency_configuration"]

    @field_validator('extended_type')
    def extended_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['manual', 'calculated']):
            raise ValueError("must be one of enum values ('manual', 'calculated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_code
        if self.cost_code:
            _dict['cost_code'] = self.cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holder
        if self.holder:
            _dict['holder'] = self.holder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line_item_type
        if self.line_item_type:
            _dict['line_item_type'] = self.line_item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wbs_code
        if self.wbs_code:
            _dict['wbs_code'] = self.wbs_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "amount": obj.get("amount"),
            "cost_code": RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerCostCode.from_dict(obj["cost_code"]) if obj.get("cost_code") is not None else None,
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "extended_amount": obj.get("extended_amount"),
            "extended_type": obj.get("extended_type"),
            "holder": ArrayOfPotentialChangeOrderLineItemsErrorsInnerAllOfHolder.from_dict(obj["holder"]) if obj.get("holder") is not None else None,
            "line_item_type": RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerLineItemType.from_dict(obj["line_item_type"]) if obj.get("line_item_type") is not None else None,
            "origin_id": obj.get("origin_id"),
            "position": obj.get("position"),
            "project": RestV10WorkOrderContractsGet200ResponseInnerProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "quantity": obj.get("quantity"),
            "total_amount": obj.get("total_amount"),
            "unit_cost": obj.get("unit_cost"),
            "uom": obj.get("uom"),
            "updated_at": obj.get("updated_at"),
            "wbs_code": RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode.from_dict(obj["wbs_code"]) if obj.get("wbs_code") is not None else None,
            "currency_configuration": RestV10ProjectsProjectIdDirectCostsLineItemsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None
        })
        return _obj


