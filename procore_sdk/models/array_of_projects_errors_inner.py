# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.project_bid_type1 import ProjectBidType1
from procore_sdk.models.project_company2 import ProjectCompany2
from procore_sdk.models.project_department1 import ProjectDepartment1
from procore_sdk.models.project_office3 import ProjectOffice3
from procore_sdk.models.project_owner_type1 import ProjectOwnerType1
from procore_sdk.models.project_persistent_message2 import ProjectPersistentMessage2
from procore_sdk.models.project_program1 import ProjectProgram1
from procore_sdk.models.project_region1 import ProjectRegion1
from procore_sdk.models.project_stage import ProjectStage
from procore_sdk.models.project_type1 import ProjectType1
from procore_sdk.models.rest_v10_work_order_contracts_work_order_contract_id_line_items_sync_patch200_response_errors_inner_all_of_errors import RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from typing import Optional, Set
from typing_extensions import Self

class ArrayOfProjectsErrorsInner(BaseModel):
    """
    ArrayOfProjectsErrorsInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    logo_url: Optional[StrictStr] = Field(default=None, description="The URL for the Project logo")
    name: Optional[StrictStr] = Field(default=None, description="The name for the Project")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the Project")
    project_number: Optional[StrictStr] = Field(default=None, description="The Project number")
    address: Optional[StrictStr] = Field(default=None, description="The street address for the Project")
    city: Optional[StrictStr] = Field(default=None, description="The city in which the Project is located")
    state_code: Optional[StrictStr] = Field(default=None, description="The state code for the Project (ISO-3166 Alpha-2 format)")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code for the Project (ISO-3166 Alpha-2 format)")
    zip: Optional[StrictStr] = Field(default=None, description="The postal code for the Project")
    time_zone: Optional[StrictStr] = Field(default=None, description="The timezone in which the Project is located")
    tz_name: Optional[StrictStr] = Field(default=None, description="The tz-database version of the timezone for the Project")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The geographic coordinate that specifies the north–south position of the Project on the Earth's surface.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The geographic coordinate that specifies the east–west position of the Project on the Earth's surface.")
    county: Optional[StrictStr] = Field(default=None, description="The county in which the Project is located")
    parent_job_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the Parent Job")
    description: Optional[StrictStr] = Field(default=None, description="Project description")
    square_feet: Optional[StrictInt] = Field(default=None, description="The total square footage for the Project")
    start_date: Optional[date] = Field(default=None, description="The date that the contract for the project is signed. Note: this field is a replacement to estimated_start_date and will mirror its value.")
    completion_date: Optional[date] = Field(default=None, description="The date that all parties agree the project meets or must meet “substantial completion”. Note: this field is a replacement to estimated_completion_date and will mirror its value.")
    total_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of construction work performed, planned, or put in place during the project. Note: this field is a replacement to estimated_value and will mirror its value.")
    store_number: Optional[StrictStr] = Field(default=None, description="The store number for the Project")
    accounting_project_number: Optional[StrictStr] = Field(default=None, description="The accounting project number for the Project")
    designated_market_area: Optional[StrictStr] = Field(default=None, description="The designated market area the Project is located in")
    warranty_start_date: Optional[date] = Field(default=None, description="The start date for the Project Warranty")
    warranty_end_date: Optional[date] = Field(default=None, description="The end date for the Project Warranty")
    active: Optional[StrictBool] = Field(default=None, description="The active status for the Project")
    flag: Optional[StrictStr] = Field(default=None, description="The Project flag (Red, Yellow, or Green)")
    phone: Optional[StrictStr] = Field(default=None, description="The telephone number for the Project")
    public_notes: Optional[StrictStr] = Field(default=None, description="Public notes on the Project")
    actual_start_date: Optional[date] = Field(default=None, description="The actual start date for the Project")
    projected_finish_date: Optional[date] = Field(default=None, description="The projected finish date for the Project")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the Project was created")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time the Project was last updated")
    origin_id: Optional[StrictStr] = Field(default=None, description="An external third-party identifier for the Project")
    origin_data: Optional[StrictStr] = Field(default=None, description="An external third-party data string associated with the Project")
    origin_code: Optional[StrictStr] = Field(default=None, description="An external third-party code associated with the Project")
    standard_cost_code_list_id: Optional[StrictInt] = None
    owners_project_id: Optional[StrictInt] = Field(default=None, description="A linked identifier for the Owner's Project")
    photo_id: Optional[StrictInt] = Field(default=None, description="The unique identifier for the Project Photo")
    inbound_email: Optional[StrictStr] = Field(default=None, description="The inbound email address username suffix for the project.")
    estimated_start_date: Optional[date] = Field(default=None, description="The Estimated Start Date of the Project Note: this field is now deprecated and will mirror the value of start_date until it is no longer supported.")
    estimated_completion_date: Optional[date] = Field(default=None, description="The Estimated Completion Date of the Project. Note: this field is now deprecated and will mirror the value of completion_date until it is no longer supported.")
    estimated_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Estimated Value of the project. Note: this field is now deprecated and will mirror the value of total_value until it is no longer supported.")
    persistent_message: Optional[ProjectPersistentMessage2] = None
    office: Optional[ProjectOffice3] = None
    project_bid_type: Optional[ProjectBidType1] = None
    project_owner_type: Optional[ProjectOwnerType1] = None
    project_region: Optional[ProjectRegion1] = None
    project_stage: Optional[ProjectStage] = None
    project_type: Optional[ProjectType1] = None
    program: Optional[ProjectProgram1] = None
    departments: Optional[List[ProjectDepartment1]] = Field(default=None, description="An array of project departments")
    company: Optional[ProjectCompany2] = None
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    errors: Optional[RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors] = None
    __properties: ClassVar[List[str]] = ["id", "logo_url", "name", "display_name", "project_number", "address", "city", "state_code", "country_code", "zip", "time_zone", "tz_name", "latitude", "longitude", "county", "parent_job_id", "description", "square_feet", "start_date", "completion_date", "total_value", "store_number", "accounting_project_number", "designated_market_area", "warranty_start_date", "warranty_end_date", "active", "flag", "phone", "public_notes", "actual_start_date", "projected_finish_date", "created_at", "updated_at", "origin_id", "origin_data", "origin_code", "standard_cost_code_list_id", "owners_project_id", "photo_id", "inbound_email", "estimated_start_date", "estimated_completion_date", "estimated_value", "persistent_message", "office", "project_bid_type", "project_owner_type", "project_region", "project_stage", "project_type", "program", "departments", "company", "custom_fields", "errors"]

    @field_validator('flag')
    def flag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Red', 'Yellow', 'Green']):
            raise ValueError("must be one of enum values ('Red', 'Yellow', 'Green')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayOfProjectsErrorsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of persistent_message
        if self.persistent_message:
            _dict['persistent_message'] = self.persistent_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of office
        if self.office:
            _dict['office'] = self.office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_bid_type
        if self.project_bid_type:
            _dict['project_bid_type'] = self.project_bid_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_owner_type
        if self.project_owner_type:
            _dict['project_owner_type'] = self.project_owner_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_region
        if self.project_region:
            _dict['project_region'] = self.project_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_stage
        if self.project_stage:
            _dict['project_stage'] = self.project_stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_type
        if self.project_type:
            _dict['project_type'] = self.project_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program
        if self.program:
            _dict['program'] = self.program.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in departments (list)
        _items = []
        if self.departments:
            for _item_departments in self.departments:
                if _item_departments:
                    _items.append(_item_departments.to_dict())
            _dict['departments'] = _items
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayOfProjectsErrorsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "logo_url": obj.get("logo_url"),
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "project_number": obj.get("project_number"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "state_code": obj.get("state_code"),
            "country_code": obj.get("country_code"),
            "zip": obj.get("zip"),
            "time_zone": obj.get("time_zone"),
            "tz_name": obj.get("tz_name"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "county": obj.get("county"),
            "parent_job_id": obj.get("parent_job_id"),
            "description": obj.get("description"),
            "square_feet": obj.get("square_feet"),
            "start_date": obj.get("start_date"),
            "completion_date": obj.get("completion_date"),
            "total_value": obj.get("total_value"),
            "store_number": obj.get("store_number"),
            "accounting_project_number": obj.get("accounting_project_number"),
            "designated_market_area": obj.get("designated_market_area"),
            "warranty_start_date": obj.get("warranty_start_date"),
            "warranty_end_date": obj.get("warranty_end_date"),
            "active": obj.get("active"),
            "flag": obj.get("flag"),
            "phone": obj.get("phone"),
            "public_notes": obj.get("public_notes"),
            "actual_start_date": obj.get("actual_start_date"),
            "projected_finish_date": obj.get("projected_finish_date"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "origin_code": obj.get("origin_code"),
            "standard_cost_code_list_id": obj.get("standard_cost_code_list_id"),
            "owners_project_id": obj.get("owners_project_id"),
            "photo_id": obj.get("photo_id"),
            "inbound_email": obj.get("inbound_email"),
            "estimated_start_date": obj.get("estimated_start_date"),
            "estimated_completion_date": obj.get("estimated_completion_date"),
            "estimated_value": obj.get("estimated_value"),
            "persistent_message": ProjectPersistentMessage2.from_dict(obj["persistent_message"]) if obj.get("persistent_message") is not None else None,
            "office": ProjectOffice3.from_dict(obj["office"]) if obj.get("office") is not None else None,
            "project_bid_type": ProjectBidType1.from_dict(obj["project_bid_type"]) if obj.get("project_bid_type") is not None else None,
            "project_owner_type": ProjectOwnerType1.from_dict(obj["project_owner_type"]) if obj.get("project_owner_type") is not None else None,
            "project_region": ProjectRegion1.from_dict(obj["project_region"]) if obj.get("project_region") is not None else None,
            "project_stage": ProjectStage.from_dict(obj["project_stage"]) if obj.get("project_stage") is not None else None,
            "project_type": ProjectType1.from_dict(obj["project_type"]) if obj.get("project_type") is not None else None,
            "program": ProjectProgram1.from_dict(obj["program"]) if obj.get("program") is not None else None,
            "departments": [ProjectDepartment1.from_dict(_item) for _item in obj["departments"]] if obj.get("departments") is not None else None,
            "company": ProjectCompany2.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "errors": RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors.from_dict(obj["errors"]) if obj.get("errors") is not None else None
        })
        return _obj


