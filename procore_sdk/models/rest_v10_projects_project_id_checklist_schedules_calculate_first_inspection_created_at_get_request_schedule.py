# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdChecklistSchedulesCalculateFirstInspectionCreatedAtGetRequestSchedule(BaseModel):
    """
    RestV10ProjectsProjectIdChecklistSchedulesCalculateFirstInspectionCreatedAtGetRequestSchedule
    """ # noqa: E501
    starts_at: datetime = Field(description="Schedule start date")
    ends_at: datetime = Field(description="Schedule end date. When frequency is 'once' this should be the same value as starts_at.")
    frequency: StrictStr = Field(description="Schedule frequency type name")
    days_created_before_due_date: StrictInt = Field(description="Number of days before the inspection due date that the inspection should be created")
    __properties: ClassVar[List[str]] = ["starts_at", "ends_at", "frequency", "days_created_before_due_date"]

    @field_validator('frequency')
    def frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['once', 'daily', 'weekly', 'once_every_two_weeks', 'monthly', 'yearly']):
            raise ValueError("must be one of enum values ('once', 'daily', 'weekly', 'once_every_two_weeks', 'monthly', 'yearly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdChecklistSchedulesCalculateFirstInspectionCreatedAtGetRequestSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdChecklistSchedulesCalculateFirstInspectionCreatedAtGetRequestSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "frequency": obj.get("frequency"),
            "days_created_before_due_date": obj.get("days_created_before_due_date")
        })
        return _obj


