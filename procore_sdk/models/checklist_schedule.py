# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.checklist_schedule_inspection_template import ChecklistScheduleInspectionTemplate
from typing import Optional, Set
from typing_extensions import Self

class ChecklistSchedule(BaseModel):
    """
    ChecklistSchedule
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    first_inspection_due_at: Optional[datetime] = Field(default=None, description="Due at timestamp of first inspection")
    ends_at: Optional[datetime] = Field(default=None, description="Due at timestamp of last inspection")
    next_due_at: Optional[datetime] = Field(default=None, description="Due at timestamp of next inspection to be created")
    frequency: Optional[StrictStr] = Field(default=None, description="Name")
    inspections_created: Optional[StrictInt] = Field(default=None, description="Number of inspections created")
    total_inspections_scheduled: Optional[StrictInt] = Field(default=None, description="Total amount of inpections that will be created")
    inspection_template: Optional[ChecklistScheduleInspectionTemplate] = None
    location_id: Optional[StrictInt] = Field(default=None, description="Location ID")
    assignee_ids: Optional[List[StrictInt]] = None
    point_of_contact_id: Optional[StrictInt] = Field(default=None, description="Point of contact ID")
    responsible_contractor_id: Optional[StrictInt] = Field(default=None, description="ID of Vendor responsible for the work being inspected")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp of creation")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of update")
    __properties: ClassVar[List[str]] = ["id", "name", "first_inspection_due_at", "ends_at", "next_due_at", "frequency", "inspections_created", "total_inspections_scheduled", "inspection_template", "location_id", "assignee_ids", "point_of_contact_id", "responsible_contractor_id", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChecklistSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inspection_template
        if self.inspection_template:
            _dict['inspection_template'] = self.inspection_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChecklistSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "first_inspection_due_at": obj.get("first_inspection_due_at"),
            "ends_at": obj.get("ends_at"),
            "next_due_at": obj.get("next_due_at"),
            "frequency": obj.get("frequency"),
            "inspections_created": obj.get("inspections_created"),
            "total_inspections_scheduled": obj.get("total_inspections_scheduled"),
            "inspection_template": ChecklistScheduleInspectionTemplate.from_dict(obj["inspection_template"]) if obj.get("inspection_template") is not None else None,
            "location_id": obj.get("location_id"),
            "assignee_ids": obj.get("assignee_ids"),
            "point_of_contact_id": obj.get("point_of_contact_id"),
            "responsible_contractor_id": obj.get("responsible_contractor_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


