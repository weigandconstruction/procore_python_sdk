# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.location1 import Location1
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_assignee import RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_attachments_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfAttachmentsInner
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_coordination_issue_file import RestV10CoordinationIssuesGet200ResponseInnerAllOfCoordinationIssueFile
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_drawing_markup_preview_images_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfDrawingMarkupPreviewImagesInner
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_drawing_revision import RestV10CoordinationIssuesGet200ResponseInnerAllOfDrawingRevision
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_linked_drawings_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedDrawingsInner
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_linked_observation_items_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedObservationItemsInner
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_linked_procore_items_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedProcoreItemsInner
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_origin import RestV10CoordinationIssuesGet200ResponseInnerAllOfOrigin
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_viewpoints_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.trade2 import Trade2
from typing import Optional, Set
from typing_extensions import Self

class RestV10CoordinationIssuesGet200ResponseInner(BaseModel):
    """
    RestV10CoordinationIssuesGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    uuid: Optional[StrictStr] = Field(default=None, description="Unique identifier for the issue. This is auto-generated attribute if not provided during issue creation.")
    title: Optional[StrictStr] = Field(default=None, description="Coordination Issue title. The title can have a maximum of 80 characters.")
    description: Optional[StrictStr] = Field(default=None, description="Coordination Issue description.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the issue.")
    issue_number: Optional[StrictInt] = Field(default=None, description="Issue Number. A number that can be referred by users to easily identify an issue. Issue number starts from 1 for each project, and is unique per project")
    creation_source: Optional[StrictStr] = Field(default=None, description="Coordination Issue can be created from Procore app or a plugin i.e. a source")
    due_date: Optional[StrictStr] = Field(default=None, description="Due date of the Coordination Issue. Accepted date formats are \"yyyy-mm-dd\" and \"yyyymmdd\"")
    coordination_issue_file: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfCoordinationIssueFile] = None
    project_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unique identifier for the project.")
    bim_model_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Model ID")
    comments_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Count of comments")
    issue_type: Optional[StrictStr] = Field(default=None, description="Issue type of the Coordination Issue")
    priority: Optional[StrictStr] = Field(default=None, description="Priority of the Coordination Issue")
    drawing_revision: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfDrawingRevision] = None
    trade: Optional[Trade2] = None
    origin: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfOrigin] = None
    location: Optional[Location1] = None
    assignee: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee] = None
    created_by: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee] = None
    updated_by: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee] = None
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    viewpoints: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner]] = Field(default=None, description="An array of viewpoints")
    attachments: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfAttachmentsInner]] = Field(default=None, description="An array of attachments")
    linked_procore_items: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedProcoreItemsInner]] = Field(default=None, description="Procore items linked to Coordination Issue")
    linked_drawings: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedDrawingsInner]] = Field(default=None, description="Details of drawings linked to Coordination Issue")
    linked_observation_items: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedObservationItemsInner]] = Field(default=None, description="Observation Items linked to Coordination Issue")
    drawing_markup_preview_images: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfDrawingMarkupPreviewImagesInner]] = Field(default=None, description="Preview images generated by drawings with Coordination Issue Pin")
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    __properties: ClassVar[List[str]] = ["id", "uuid", "title", "description", "status", "issue_number", "creation_source", "due_date", "coordination_issue_file", "project_id", "bim_model_id", "comments_count", "issue_type", "priority", "drawing_revision", "trade", "origin", "location", "assignee", "created_by", "updated_by", "created_at", "updated_at", "viewpoints", "attachments", "linked_procore_items", "linked_drawings", "linked_observation_items", "drawing_markup_preview_images", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CoordinationIssuesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordination_issue_file
        if self.coordination_issue_file:
            _dict['coordination_issue_file'] = self.coordination_issue_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drawing_revision
        if self.drawing_revision:
            _dict['drawing_revision'] = self.drawing_revision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin
        if self.origin:
            _dict['origin'] = self.origin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updated_by'] = self.updated_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in viewpoints (list)
        _items = []
        if self.viewpoints:
            for _item_viewpoints in self.viewpoints:
                if _item_viewpoints:
                    _items.append(_item_viewpoints.to_dict())
            _dict['viewpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in linked_procore_items (list)
        _items = []
        if self.linked_procore_items:
            for _item_linked_procore_items in self.linked_procore_items:
                if _item_linked_procore_items:
                    _items.append(_item_linked_procore_items.to_dict())
            _dict['linked_procore_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in linked_drawings (list)
        _items = []
        if self.linked_drawings:
            for _item_linked_drawings in self.linked_drawings:
                if _item_linked_drawings:
                    _items.append(_item_linked_drawings.to_dict())
            _dict['linked_drawings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in linked_observation_items (list)
        _items = []
        if self.linked_observation_items:
            for _item_linked_observation_items in self.linked_observation_items:
                if _item_linked_observation_items:
                    _items.append(_item_linked_observation_items.to_dict())
            _dict['linked_observation_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in drawing_markup_preview_images (list)
        _items = []
        if self.drawing_markup_preview_images:
            for _item_drawing_markup_preview_images in self.drawing_markup_preview_images:
                if _item_drawing_markup_preview_images:
                    _items.append(_item_drawing_markup_preview_images.to_dict())
            _dict['drawing_markup_preview_images'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # set to None if bim_model_id (nullable) is None
        # and model_fields_set contains the field
        if self.bim_model_id is None and "bim_model_id" in self.model_fields_set:
            _dict['bim_model_id'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CoordinationIssuesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "uuid": obj.get("uuid"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "issue_number": obj.get("issue_number"),
            "creation_source": obj.get("creation_source"),
            "due_date": obj.get("due_date"),
            "coordination_issue_file": RestV10CoordinationIssuesGet200ResponseInnerAllOfCoordinationIssueFile.from_dict(obj["coordination_issue_file"]) if obj.get("coordination_issue_file") is not None else None,
            "project_id": obj.get("project_id"),
            "bim_model_id": obj.get("bim_model_id"),
            "comments_count": obj.get("comments_count"),
            "issue_type": obj.get("issue_type"),
            "priority": obj.get("priority"),
            "drawing_revision": RestV10CoordinationIssuesGet200ResponseInnerAllOfDrawingRevision.from_dict(obj["drawing_revision"]) if obj.get("drawing_revision") is not None else None,
            "trade": Trade2.from_dict(obj["trade"]) if obj.get("trade") is not None else None,
            "origin": RestV10CoordinationIssuesGet200ResponseInnerAllOfOrigin.from_dict(obj["origin"]) if obj.get("origin") is not None else None,
            "location": Location1.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "assignee": RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "created_by": RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "updated_by": RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee.from_dict(obj["updated_by"]) if obj.get("updated_by") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "viewpoints": [RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner.from_dict(_item) for _item in obj["viewpoints"]] if obj.get("viewpoints") is not None else None,
            "attachments": [RestV10CoordinationIssuesGet200ResponseInnerAllOfAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "linked_procore_items": [RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedProcoreItemsInner.from_dict(_item) for _item in obj["linked_procore_items"]] if obj.get("linked_procore_items") is not None else None,
            "linked_drawings": [RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedDrawingsInner.from_dict(_item) for _item in obj["linked_drawings"]] if obj.get("linked_drawings") is not None else None,
            "linked_observation_items": [RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedObservationItemsInner.from_dict(_item) for _item in obj["linked_observation_items"]] if obj.get("linked_observation_items") is not None else None,
            "drawing_markup_preview_images": [RestV10CoordinationIssuesGet200ResponseInnerAllOfDrawingMarkupPreviewImagesInner.from_dict(_item) for _item in obj["drawing_markup_preview_images"]] if obj.get("drawing_markup_preview_images") is not None else None,
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None
        })
        return _obj


