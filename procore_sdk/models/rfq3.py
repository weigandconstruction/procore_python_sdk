# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RFQ3(BaseModel):
    """
    RFQ3
    """ # noqa: E501
    assigned_id: Optional[StrictInt] = Field(default=None, description="Assigned ID")
    change_event_event_id: Optional[StrictInt] = Field(default=None, description="Change Event ID")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="Cost Code ID")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    due_date: Optional[date] = Field(default=None, description="Due date")
    estimated_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated amount")
    estimated_schedule_impact: Optional[StrictInt] = Field(default=None, description="Estimated schedule impact in days")
    estimated_status: Optional[StrictStr] = Field(default=None, description="Estimated status")
    location_id: Optional[StrictInt] = Field(default=None, description="Location ID")
    number: Optional[StrictStr] = Field(default=None, description="Number")
    original_quote: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Original quote")
    private: Optional[StrictBool] = Field(default=False, description="If true, visible to admins only; otherwise visible to those with access to the parent contract.")
    spec_section_description: Optional[StrictStr] = Field(default=None, description="Specification Section description")
    spec_section_number: Optional[StrictStr] = Field(default=None, description="Specification Section number")
    specification_section_id: Optional[StrictInt] = Field(default=None, description="Specification Section ID")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    title: Optional[StrictStr] = Field(default=None, description="Title")
    prostore_file_ids: Optional[List[StrictInt]] = Field(default=None, description="Prostore File IDs")
    __properties: ClassVar[List[str]] = ["assigned_id", "change_event_event_id", "cost_code_id", "description", "due_date", "estimated_amount", "estimated_schedule_impact", "estimated_status", "location_id", "number", "original_quote", "private", "spec_section_description", "spec_section_number", "specification_section_id", "status", "title", "prostore_file_ids"]

    @field_validator('estimated_status')
    def estimated_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['rom', 'final']):
            raise ValueError("must be one of enum values ('rom', 'final')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['out_for_pricing', 'revise_and_resubmit', 'under_review', 'pending_final_approval', 'closed', 'withdrawn']):
            raise ValueError("must be one of enum values ('out_for_pricing', 'revise_and_resubmit', 'under_review', 'pending_final_approval', 'closed', 'withdrawn')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RFQ3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RFQ3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assigned_id": obj.get("assigned_id"),
            "change_event_event_id": obj.get("change_event_event_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "estimated_amount": obj.get("estimated_amount"),
            "estimated_schedule_impact": obj.get("estimated_schedule_impact"),
            "estimated_status": obj.get("estimated_status"),
            "location_id": obj.get("location_id"),
            "number": obj.get("number"),
            "original_quote": obj.get("original_quote"),
            "private": obj.get("private") if obj.get("private") is not None else False,
            "spec_section_description": obj.get("spec_section_description"),
            "spec_section_number": obj.get("spec_section_number"),
            "specification_section_id": obj.get("specification_section_id"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "prostore_file_ids": obj.get("prostore_file_ids")
        })
        return _obj


