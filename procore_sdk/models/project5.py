# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class Project5(BaseModel):
    """
    Project5
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=True, description="The Active status of the project. Must be true or false.")
    address: Optional[StrictStr] = Field(default=None, description="The street address for the Project location")
    city: Optional[StrictStr] = Field(default=None, description="The City in which the project is located")
    country_code: Optional[StrictStr] = Field(default=None, description="The two character code that represents the country in which the project is located (ISO-3166 Alpha-2 format)")
    county: Optional[StrictStr] = Field(default=None, description="The County in which the project is located")
    description: Optional[StrictStr] = Field(default=None, description="The description for the project")
    erp_integrated: Optional[StrictBool] = Field(default=False, description="This project is integrated with ERP")
    standard_cost_code_list_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Standard Cost Code List")
    start_date: Optional[date] = Field(default=None, description="The date that the contract for the project is signed. Note: this field is a replacement to estimated_start_date and will mirror its value.")
    completion_date: Optional[date] = Field(default=None, description="The date that all parties agree the project meets or must meet “substantial completion”. Note: this field is a replacement to estimated_completion_date and will mirror its value.")
    total_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of construction work performed, planned, or put in place during the project. Note: this field is a replacement to estimated_value and will mirror its value.")
    warranty_start_date: Optional[date] = Field(default=None, description="The start date for the Project Warranty")
    warranty_end_date: Optional[date] = Field(default=None, description="The end date for the Project Warranty")
    fax: Optional[StrictStr] = Field(default=None, description="The fax number for the project")
    flag: Optional[StrictStr] = Field(default=None, description="The flag for the project")
    image_id: Optional[StrictInt] = Field(default=None, description="The identifier for the project image")
    name: Optional[StrictStr] = Field(default=None, description="The name of the project")
    office_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Office")
    phone: Optional[StrictStr] = Field(default=None, description="The telephone number for the Project")
    project_number: Optional[StrictStr] = Field(default=None, description="The number for the Project")
    public_notes: Optional[StrictStr] = Field(default=None, description="The public notes for the Project")
    project_stage_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Stage")
    square_feet: Optional[StrictInt] = Field(default=None, description="The total square footage of the Project")
    state_code: Optional[StrictStr] = Field(default=None, description="The code that represents the Project State (ISO-3166 Alpha-2 format)")
    time_zone: Optional[StrictStr] = Field(default=None, description="The timezone the Project is located in")
    zip: Optional[StrictStr] = Field(default=None, description="The postal code for the Project")
    parent_job_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project's Parent Job")
    program_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Program ID")
    project_bid_type_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Bid Type")
    project_type_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Type")
    project_owner_type_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Owner Type")
    project_region_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Region")
    project_template_id: Optional[StrictInt] = Field(default=None, description="The identifier for the Project Template as designated by another Project on this company. It must be a Project that is a Template defined by template: `true`")
    origin_id: Optional[StrictStr] = Field(default=None, description="An external third-party identifier for the Project")
    origin_data: Optional[StrictStr] = Field(default=None, description="An external third-party data string associated with the Project")
    origin_code: Optional[StrictStr] = Field(default=None, description="An external third-party code associated with the Project")
    department_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers for the Departments the Project belongs to. The array should always represent all Departments, so if you have `[1, 2, 3]` and want to remove deparment `2`, then send `[1, 3]`")
    estimated_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Estimated Value of the project. Note: this field is now deprecated and will mirror the value of total_value until it is no longer supported.")
    estimated_start_date: Optional[date] = Field(default=None, description="The Estimated Start Date of the Project Note: this field is now deprecated and will mirror the value of start_date until it is no longer supported.")
    estimated_completion_date: Optional[date] = Field(default=None, description="The Estimated Completion Date of the Project. Note: this field is now deprecated and will mirror the value of completion_date until it is no longer supported.")
    store_number: Optional[StrictStr] = Field(default=None, description="Store Number of the Project")
    accounting_project_number: Optional[StrictStr] = Field(default=None, description="Accounting Project Number of the Project")
    designated_market_area: Optional[StrictStr] = Field(default=None, description="Designated Market Area of the Project")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["active", "address", "city", "country_code", "county", "description", "erp_integrated", "standard_cost_code_list_id", "start_date", "completion_date", "total_value", "warranty_start_date", "warranty_end_date", "fax", "flag", "image_id", "name", "office_id", "phone", "project_number", "public_notes", "project_stage_id", "square_feet", "state_code", "time_zone", "zip", "parent_job_id", "program_id", "project_bid_type_id", "project_type_id", "project_owner_type_id", "project_region_id", "project_template_id", "origin_id", "origin_data", "origin_code", "department_ids", "estimated_value", "estimated_start_date", "estimated_completion_date", "store_number", "accounting_project_number", "designated_market_area", "custom_field_%{custom_field_definition_id}"]

    @field_validator('flag')
    def flag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Red', 'Yellow', 'Green']):
            raise ValueError("must be one of enum values ('Red', 'Yellow', 'Green')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        # set to None if origin_data (nullable) is None
        # and model_fields_set contains the field
        if self.origin_data is None and "origin_data" in self.model_fields_set:
            _dict['origin_data'] = None

        # set to None if origin_code (nullable) is None
        # and model_fields_set contains the field
        if self.origin_code is None and "origin_code" in self.model_fields_set:
            _dict['origin_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "address": obj.get("address"),
            "city": obj.get("city"),
            "country_code": obj.get("country_code"),
            "county": obj.get("county"),
            "description": obj.get("description"),
            "erp_integrated": obj.get("erp_integrated") if obj.get("erp_integrated") is not None else False,
            "standard_cost_code_list_id": obj.get("standard_cost_code_list_id"),
            "start_date": obj.get("start_date"),
            "completion_date": obj.get("completion_date"),
            "total_value": obj.get("total_value"),
            "warranty_start_date": obj.get("warranty_start_date"),
            "warranty_end_date": obj.get("warranty_end_date"),
            "fax": obj.get("fax"),
            "flag": obj.get("flag"),
            "image_id": obj.get("image_id"),
            "name": obj.get("name"),
            "office_id": obj.get("office_id"),
            "phone": obj.get("phone"),
            "project_number": obj.get("project_number"),
            "public_notes": obj.get("public_notes"),
            "project_stage_id": obj.get("project_stage_id"),
            "square_feet": obj.get("square_feet"),
            "state_code": obj.get("state_code"),
            "time_zone": obj.get("time_zone"),
            "zip": obj.get("zip"),
            "parent_job_id": obj.get("parent_job_id"),
            "program_id": obj.get("program_id"),
            "project_bid_type_id": obj.get("project_bid_type_id"),
            "project_type_id": obj.get("project_type_id"),
            "project_owner_type_id": obj.get("project_owner_type_id"),
            "project_region_id": obj.get("project_region_id"),
            "project_template_id": obj.get("project_template_id"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "origin_code": obj.get("origin_code"),
            "department_ids": obj.get("department_ids"),
            "estimated_value": obj.get("estimated_value"),
            "estimated_start_date": obj.get("estimated_start_date"),
            "estimated_completion_date": obj.get("estimated_completion_date"),
            "store_number": obj.get("store_number"),
            "accounting_project_number": obj.get("accounting_project_number"),
            "designated_market_area": obj.get("designated_market_area"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


