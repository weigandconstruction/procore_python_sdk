# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GenericToolItemsInner(BaseModel):
    """
    GenericToolItemsInner
    """ # noqa: E501
    id: StrictInt = Field(description="The unique idenfitier of the generic tool item.")
    due_date: Optional[date] = Field(default=None, description="The due date for the generic tool item.")
    private: Optional[StrictBool] = Field(default=None, description="If this property is set to true, the generic tool item is private. If this property is set to false, the generic tool item is not private.")
    schedule_impact: Optional[StrictStr] = Field(default=None, description="The schedule impact of the generic tool item.")
    cost_impact: Optional[StrictStr] = Field(default=None, description="The cost impact of the generic tool item.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the generic tool item.")
    assignee_ids: Optional[List[StrictInt]] = None
    received_from_id: Optional[StrictInt] = Field(default=None, description="The unique identifier for the Received From entity for the generic tool item.")
    location_id: Optional[StrictInt] = Field(default=None, description="The location identifier for the generic tool item.")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="The cost code identifier for the generic tool item.")
    specification_section_id: Optional[StrictInt] = Field(default=None, description="The specification section identifier for the generic tool item.")
    sub_job_id: Optional[StrictInt] = Field(default=None, description="The sub job identifier for the generic tool item.")
    trade_ids: Optional[List[StrictInt]] = None
    task_ids: Optional[List[StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "due_date", "private", "schedule_impact", "cost_impact", "status", "assignee_ids", "received_from_id", "location_id", "cost_code_id", "specification_section_id", "sub_job_id", "trade_ids", "task_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenericToolItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenericToolItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "due_date": obj.get("due_date"),
            "private": obj.get("private"),
            "schedule_impact": obj.get("schedule_impact"),
            "cost_impact": obj.get("cost_impact"),
            "status": obj.get("status"),
            "assignee_ids": obj.get("assignee_ids"),
            "received_from_id": obj.get("received_from_id"),
            "location_id": obj.get("location_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "specification_section_id": obj.get("specification_section_id"),
            "sub_job_id": obj.get("sub_job_id"),
            "trade_ids": obj.get("trade_ids"),
            "task_ids": obj.get("task_ids")
        })
        return _obj


