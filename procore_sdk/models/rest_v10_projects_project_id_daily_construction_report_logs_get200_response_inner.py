# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.compact import Compact
from procore_sdk.models.rest_v10_companies_company_id_workflow_permanent_logs_get200_response_inner_attachments_inner import RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_custom_fields import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields
from procore_sdk.models.rest_v10_projects_project_id_visitor_logs_get200_response_inner_permissions import RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerPermissions
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from procore_sdk.models.trade import Trade
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDailyConstructionReportLogsGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdDailyConstructionReportLogsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    apprentice_hours: Optional[StrictStr] = Field(default=None, description="Number of hours the apprentice workers were on site")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    var_date: Optional[date] = Field(default=None, description="Date of the report", alias="date")
    datetime: Optional[datetime] = Field(default=None, description="Estimated UTC datetime of record")
    deleted_at: Optional[datetime] = Field(default=None, description="Deleted at")
    first_year_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by first-year apprentices")
    foreman_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that the foremen were on site")
    journeyman_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that the journeymen were on site")
    local_city_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by local city resident workers")
    local_county_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by local county resident workers")
    minority_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by minority workers")
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes")
    number_of_apprentice_workers: Optional[StrictInt] = Field(default=None, description="Number of apprentice workers on site")
    number_of_foreman_workers: Optional[StrictInt] = Field(default=None, description="Number of foremen on site")
    number_of_journeyman_workers: Optional[StrictInt] = Field(default=None, description="Number of journeymen on site")
    number_of_other_workers: Optional[StrictInt] = Field(default=None, description="Number of other workers on site")
    other_hours: Optional[StrictStr] = Field(default=None, description="Number of hours that the other worker were on site")
    position: Optional[StrictInt] = Field(default=None, description="Position in the list Daily Construction Reports")
    status: Optional[StrictStr] = Field(default=None, description="Is a log pending or approved")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    veteran_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by veteran workers")
    women_hours: Optional[StrictStr] = Field(default=None, description="Number of hours performed by women workers")
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    vendor: Optional[Compact] = None
    trade: Optional[Trade] = None
    permissions: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerPermissions] = None
    custom_fields: Optional[RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields] = None
    attachments: Optional[List[RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner]] = Field(default=None, description=":filename to be deprecated, use :name")
    __properties: ClassVar[List[str]] = ["id", "apprentice_hours", "created_at", "date", "datetime", "deleted_at", "first_year_hours", "foreman_hours", "journeyman_hours", "local_city_hours", "local_county_hours", "minority_hours", "notes", "number_of_apprentice_workers", "number_of_foreman_workers", "number_of_journeyman_workers", "number_of_other_workers", "other_hours", "position", "status", "updated_at", "veteran_hours", "women_hours", "created_by", "vendor", "trade", "permissions", "custom_fields", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyConstructionReportLogsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade
        if self.trade:
            _dict['trade'] = self.trade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if trade (nullable) is None
        # and model_fields_set contains the field
        if self.trade is None and "trade" in self.model_fields_set:
            _dict['trade'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyConstructionReportLogsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "apprentice_hours": obj.get("apprentice_hours"),
            "created_at": obj.get("created_at"),
            "date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "deleted_at": obj.get("deleted_at"),
            "first_year_hours": obj.get("first_year_hours"),
            "foreman_hours": obj.get("foreman_hours"),
            "journeyman_hours": obj.get("journeyman_hours"),
            "local_city_hours": obj.get("local_city_hours"),
            "local_county_hours": obj.get("local_county_hours"),
            "minority_hours": obj.get("minority_hours"),
            "notes": obj.get("notes"),
            "number_of_apprentice_workers": obj.get("number_of_apprentice_workers"),
            "number_of_foreman_workers": obj.get("number_of_foreman_workers"),
            "number_of_journeyman_workers": obj.get("number_of_journeyman_workers"),
            "number_of_other_workers": obj.get("number_of_other_workers"),
            "other_hours": obj.get("other_hours"),
            "position": obj.get("position"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at"),
            "veteran_hours": obj.get("veteran_hours"),
            "women_hours": obj.get("women_hours"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "vendor": Compact.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "trade": Trade.from_dict(obj["trade"]) if obj.get("trade") is not None else None,
            "permissions": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "custom_fields": RestV10ProjectsProjectIdVisitorLogsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "attachments": [RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


