# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_payment_applications_get200_response_inner_all_of_billing_period import RestV10PaymentApplicationsGet200ResponseInnerAllOfBillingPeriod
from procore_sdk.models.rest_v10_payment_applications_get200_response_inner_all_of_contract import RestV10PaymentApplicationsGet200ResponseInnerAllOfContract
from procore_sdk.models.rest_v10_payment_applications_get200_response_inner_all_of_currency_configuration import RestV10PaymentApplicationsGet200ResponseInnerAllOfCurrencyConfiguration
from procore_sdk.models.rest_v10_payment_applications_get200_response_inner_all_of_g702 import RestV10PaymentApplicationsGet200ResponseInnerAllOfG702
from procore_sdk.models.rest_v10_prime_contracts_prime_contract_id_payment_applications_post201_response_all_of_g703_inner import RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201ResponseAllOfG703Inner
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_attachments_inner import RestV10WorkOrderContractsPost201ResponseAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201Response(BaseModel):
    """
    RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201Response
    """ # noqa: E501
    attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = Field(default=None, description="Attachments")
    g703: Optional[List[RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201ResponseAllOfG703Inner]] = None
    id: Optional[StrictInt] = Field(default=None, description="ID")
    billing_date: Optional[date] = Field(default=None, description="Billing date")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Invoice number")
    origin_data: Optional[StrictStr] = Field(default=None, description="Payment Application (Owner Invoice) third party data")
    origin_id: Optional[StrictStr] = Field(default=None, description="Payment Application (Owner Invoice) third party ID")
    percent_complete: Optional[StrictStr] = Field(default=None, description="Percent complete")
    period_start: Optional[date] = Field(default=None, description="Period start date")
    period_end: Optional[date] = Field(default=None, description="Period end date")
    period_id: Optional[StrictInt] = Field(default=None, description="Billing Period Identifier")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    total_amount_paid: Optional[StrictStr] = Field(default=None, description="Total amount of Payments made to the Payment Application")
    number: Optional[StrictInt] = Field(default=None, description="Payment Application (Owner Invoice) number")
    total_amount_accrued_this_period: Optional[StrictStr] = Field(default=None, description="Gross amount of the Invoice.")
    formatted_contract_company: Optional[StrictStr] = Field(default=None, description="Name of the Owner/Client of the Invoice.")
    currency_configuration: Optional[RestV10PaymentApplicationsGet200ResponseInnerAllOfCurrencyConfiguration] = None
    description_type: Optional[StrictStr] = Field(default='automatic', description="Description type to be shown for line items")
    g702: Optional[RestV10PaymentApplicationsGet200ResponseInnerAllOfG702] = None
    billing_period: Optional[RestV10PaymentApplicationsGet200ResponseInnerAllOfBillingPeriod] = None
    contract: Optional[RestV10PaymentApplicationsGet200ResponseInnerAllOfContract] = None
    __properties: ClassVar[List[str]] = ["attachments", "g703", "id", "billing_date", "invoice_number", "origin_data", "origin_id", "percent_complete", "period_start", "period_end", "period_id", "status", "total_amount_paid", "number", "total_amount_accrued_this_period", "formatted_contract_company", "currency_configuration", "description_type", "g702", "billing_period", "contract"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['draft', 'under_review', 'revise_and_resubmit', 'approved']):
            raise ValueError("must be one of enum values ('draft', 'under_review', 'revise_and_resubmit', 'approved')")
        return value

    @field_validator('description_type')
    def description_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['custom', 'automatic']):
            raise ValueError("must be one of enum values ('custom', 'automatic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in g703 (list)
        _items = []
        if self.g703:
            for _item_g703 in self.g703:
                if _item_g703:
                    _items.append(_item_g703.to_dict())
            _dict['g703'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of g702
        if self.g702:
            _dict['g702'] = self.g702.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_period
        if self.billing_period:
            _dict['billing_period'] = self.billing_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # set to None if origin_data (nullable) is None
        # and model_fields_set contains the field
        if self.origin_data is None and "origin_data" in self.model_fields_set:
            _dict['origin_data'] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        # set to None if period_id (nullable) is None
        # and model_fields_set contains the field
        if self.period_id is None and "period_id" in self.model_fields_set:
            _dict['period_id'] = None

        # set to None if billing_period (nullable) is None
        # and model_fields_set contains the field
        if self.billing_period is None and "billing_period" in self.model_fields_set:
            _dict['billing_period'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "g703": [RestV10PrimeContractsPrimeContractIdPaymentApplicationsPost201ResponseAllOfG703Inner.from_dict(_item) for _item in obj["g703"]] if obj.get("g703") is not None else None,
            "id": obj.get("id"),
            "billing_date": obj.get("billing_date"),
            "invoice_number": obj.get("invoice_number"),
            "origin_data": obj.get("origin_data"),
            "origin_id": obj.get("origin_id"),
            "percent_complete": obj.get("percent_complete"),
            "period_start": obj.get("period_start"),
            "period_end": obj.get("period_end"),
            "period_id": obj.get("period_id"),
            "status": obj.get("status"),
            "total_amount_paid": obj.get("total_amount_paid"),
            "number": obj.get("number"),
            "total_amount_accrued_this_period": obj.get("total_amount_accrued_this_period"),
            "formatted_contract_company": obj.get("formatted_contract_company"),
            "currency_configuration": RestV10PaymentApplicationsGet200ResponseInnerAllOfCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None,
            "description_type": obj.get("description_type") if obj.get("description_type") is not None else 'automatic',
            "g702": RestV10PaymentApplicationsGet200ResponseInnerAllOfG702.from_dict(obj["g702"]) if obj.get("g702") is not None else None,
            "billing_period": RestV10PaymentApplicationsGet200ResponseInnerAllOfBillingPeriod.from_dict(obj["billing_period"]) if obj.get("billing_period") is not None else None,
            "contract": RestV10PaymentApplicationsGet200ResponseInnerAllOfContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None
        })
        return _obj


