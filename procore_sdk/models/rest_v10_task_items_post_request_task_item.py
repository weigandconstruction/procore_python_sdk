# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10TaskItemsPostRequestTaskItem(BaseModel):
    """
    RestV10TaskItemsPostRequestTaskItem
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Title")
    number: Optional[StrictStr] = Field(default=None, description="Number")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    due_date: Optional[datetime] = Field(default=None, description="Date and time due")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    task_item_category_id: Optional[StrictInt] = Field(default=None, description="The task item category to associate with the task item.")
    private: Optional[StrictBool] = Field(default=None, description="Privacy flag")
    assigned_id: Optional[StrictInt] = Field(default=None, description="Assignee ID")
    assignee_ids: Optional[List[StrictInt]] = Field(default=None, description="Assignee IDs")
    attachments: Optional[List[StrictStr]] = Field(default=None, description="Task Item attachments. To upload attachments you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Uploads to attach to the response")
    __properties: ClassVar[List[str]] = ["title", "number", "description", "due_date", "status", "task_item_category_id", "private", "assigned_id", "assignee_ids", "attachments", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['initiated', 'in_progress', 'ready_for_review', 'closed', 'void']):
            raise ValueError("must be one of enum values ('initiated', 'in_progress', 'ready_for_review', 'closed', 'void')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10TaskItemsPostRequestTaskItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10TaskItemsPostRequestTaskItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "number": obj.get("number"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "status": obj.get("status"),
            "task_item_category_id": obj.get("task_item_category_id"),
            "private": obj.get("private"),
            "assigned_id": obj.get("assigned_id"),
            "assignee_ids": obj.get("assignee_ids"),
            "attachments": obj.get("attachments"),
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids")
        })
        return _obj


