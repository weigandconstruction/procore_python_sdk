# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_work_order_contracts_work_order_contract_id_line_items_sync_patch200_response_errors_inner_all_of_errors import RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors
from typing import Optional, Set
from typing_extensions import Self

class BIMViewpointBatchCreateResponseErrorsInner(BaseModel):
    """
    BIMViewpointBatchCreateResponseErrorsInner
    """ # noqa: E501
    bim_file_id: StrictInt = Field(description="ID of a BIM File to be associated to the viewpoint")
    name: Optional[StrictStr] = Field(default=None, description="Viewpoint name")
    view_folder_id: Optional[StrictInt] = Field(default=None, description="ID of the BIM View Folder the viewpoint belongs to")
    upload_uuid: StrictStr = Field(description="UUID of uploaded snapshot")
    camera_data: StrictStr = Field(description="Camera data for the building model associated with the issue")
    redlines_data: Optional[StrictStr] = Field(default=None, description="Lines data for the building model associated with the issue")
    sections_data: Optional[StrictStr] = Field(default=None, description="Clipping plane data for the building model associated with the issue")
    errors: Optional[RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors] = None
    __properties: ClassVar[List[str]] = ["bim_file_id", "name", "view_folder_id", "upload_uuid", "camera_data", "redlines_data", "sections_data", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMViewpointBatchCreateResponseErrorsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMViewpointBatchCreateResponseErrorsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bim_file_id": obj.get("bim_file_id"),
            "name": obj.get("name"),
            "view_folder_id": obj.get("view_folder_id"),
            "upload_uuid": obj.get("upload_uuid"),
            "camera_data": obj.get("camera_data"),
            "redlines_data": obj.get("redlines_data"),
            "sections_data": obj.get("sections_data"),
            "errors": RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors.from_dict(obj["errors"]) if obj.get("errors") is not None else None
        })
        return _obj


