# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plans_post_request_plan_plan_approvers_attributes_inner import RestV10ProjectsProjectIdActionPlansPlansPostRequestPlanPlanApproversAttributesInner
from procore_sdk.models.rest_v10_projects_project_id_action_plans_plans_post_request_plan_plan_receivers_attributes_inner import RestV10ProjectsProjectIdActionPlansPlansPostRequestPlanPlanReceiversAttributesInner
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdActionPlansPlansPostRequestPlan(BaseModel):
    """
    RestV10ProjectsProjectIdActionPlansPlansPostRequestPlan
    """ # noqa: E501
    title: StrictStr = Field(description="Title of the Action Plan")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Action Plan")
    private: Optional[StrictBool] = Field(default=None, description="Privacy flag of the Action Plan")
    location_id: Optional[StrictInt] = Field(default=None, description="Location ID to be set on the Action Plan")
    manager_id: Optional[StrictInt] = Field(default=None, description="Party Person ID of the Action Plan Manager")
    plan_type_id: StrictInt = Field(description="Plan Type ID to be set on the Action Plan")
    plan_approvers_attributes: Optional[List[RestV10ProjectsProjectIdActionPlansPlansPostRequestPlanPlanApproversAttributesInner]] = None
    plan_receivers_attributes: Optional[List[RestV10ProjectsProjectIdActionPlansPlansPostRequestPlanPlanReceiversAttributesInner]] = None
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["title", "description", "private", "location_id", "manager_id", "plan_type_id", "plan_approvers_attributes", "plan_receivers_attributes", "custom_field_%{custom_field_definition_id}"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlansPostRequestPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in plan_approvers_attributes (list)
        _items = []
        if self.plan_approvers_attributes:
            for _item_plan_approvers_attributes in self.plan_approvers_attributes:
                if _item_plan_approvers_attributes:
                    _items.append(_item_plan_approvers_attributes.to_dict())
            _dict['plan_approvers_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plan_receivers_attributes (list)
        _items = []
        if self.plan_receivers_attributes:
            for _item_plan_receivers_attributes in self.plan_receivers_attributes:
                if _item_plan_receivers_attributes:
                    _items.append(_item_plan_receivers_attributes.to_dict())
            _dict['plan_receivers_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdActionPlansPlansPostRequestPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "private": obj.get("private"),
            "location_id": obj.get("location_id"),
            "manager_id": obj.get("manager_id"),
            "plan_type_id": obj.get("plan_type_id"),
            "plan_approvers_attributes": [RestV10ProjectsProjectIdActionPlansPlansPostRequestPlanPlanApproversAttributesInner.from_dict(_item) for _item in obj["plan_approvers_attributes"]] if obj.get("plan_approvers_attributes") is not None else None,
            "plan_receivers_attributes": [RestV10ProjectsProjectIdActionPlansPlansPostRequestPlanPlanReceiversAttributesInner.from_dict(_item) for _item in obj["plan_receivers_attributes"]] if obj.get("plan_receivers_attributes") is not None else None,
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


