# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdActionPlansVerificationMethodsGet200ResponseInner(BaseModel):
    """
    RestV10CompaniesCompanyIdActionPlansVerificationMethodsGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    active: Optional[StrictBool] = Field(default=None, description="Specifies if the Action Plan Verification Method is intended for use")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp of creation")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    source_key: Optional[StrictStr] = Field(default=None, description="Internal translation key")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of last update")
    __properties: ClassVar[List[str]] = ["id", "active", "created_at", "name", "source_key", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdActionPlansVerificationMethodsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if source_key (nullable) is None
        # and model_fields_set contains the field
        if self.source_key is None and "source_key" in self.model_fields_set:
            _dict['source_key'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdActionPlansVerificationMethodsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "active": obj.get("active"),
            "created_at": obj.get("created_at"),
            "name": obj.get("name"),
            "source_key": obj.get("source_key"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


