# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_companies_company_id_configurable_field_sets_post_request_configurable_field_set_fields import RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSetFields
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSet(BaseModel):
    """
    RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSet
    """ # noqa: E501
    name: StrictStr = Field(description="Name")
    class_name: StrictStr = Field(description="Class Name of the object the Configurable Field Set is applied to")
    fields: RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSetFields
    project_ids: Optional[List[StrictInt]] = None
    category: Optional[StrictStr] = Field(default=None, description="Required and only needed when associating projects for an Observations Configurable Field Set.(0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)")
    action_plan_type_id: Optional[StrictInt] = Field(default=None, description="Action Plan Type unique identifier")
    inspection_type_id: Optional[StrictInt] = Field(default=None, description="Inspection type unique identifier")
    generic_tool_id: Optional[StrictInt] = Field(default=None, description="Generic tool unique identifier")
    company_default: Optional[StrictBool] = Field(default=None, description="If the Configurable Field Set is the company default for new projects")
    company_configurable_field_set_default_column_name: Optional[StrictStr] = Field(default=None, description="the column name on CompanyConfigurableFieldSetDefault to set the Configurable Field Set as default to. Only needed if company_default is true.")
    __properties: ClassVar[List[str]] = ["name", "class_name", "fields", "project_ids", "category", "action_plan_type_id", "inspection_type_id", "generic_tool_id", "company_default", "company_configurable_field_set_default_column_name"]

    @field_validator('class_name')
    def class_name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Observations::Item', 'PunchItem', 'Rfi::Header']):
            raise ValueError("must be one of enum values ('Observations::Item', 'PunchItem', 'Rfi::Header')")
        return value

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['quality', 'safety', 'commissioning', 'warranty', 'work_to_complete']):
            raise ValueError("must be one of enum values ('quality', 'safety', 'commissioning', 'warranty', 'work_to_complete')")
        return value

    @field_validator('company_configurable_field_set_default_column_name')
    def company_configurable_field_set_default_column_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['commissioning_configurable_field_set', 'quality_configurable_field_set', 'safety_configurable_field_set', 'warranty_configurable_field_set', 'work_to_complete_configurable_field_set', 'rfi_configurable_field_set']):
            raise ValueError("must be one of enum values ('commissioning_configurable_field_set', 'quality_configurable_field_set', 'safety_configurable_field_set', 'warranty_configurable_field_set', 'work_to_complete_configurable_field_set', 'rfi_configurable_field_set')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fields
        if self.fields:
            _dict['fields'] = self.fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "class_name": obj.get("class_name"),
            "fields": RestV10CompaniesCompanyIdConfigurableFieldSetsPostRequestConfigurableFieldSetFields.from_dict(obj["fields"]) if obj.get("fields") is not None else None,
            "project_ids": obj.get("project_ids"),
            "category": obj.get("category"),
            "action_plan_type_id": obj.get("action_plan_type_id"),
            "inspection_type_id": obj.get("inspection_type_id"),
            "generic_tool_id": obj.get("generic_tool_id"),
            "company_default": obj.get("company_default"),
            "company_configurable_field_set_default_column_name": obj.get("company_configurable_field_set_default_column_name")
        })
        return _obj


