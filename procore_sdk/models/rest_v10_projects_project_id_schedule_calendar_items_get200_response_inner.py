# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdScheduleCalendarItemsGet200ResponseInner(BaseModel):
    """
    Schedule Calendar Item
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Calendar Item ID")
    assigned: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    color: Optional[StrictStr] = Field(default=None, description="Calendar Item color (as a hex triplet)")
    created_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    description: Optional[StrictStr] = Field(default=None, description="Calendar Item description")
    finish: Optional[date] = Field(default=None, description="Calendar Item finish date")
    full_outline_path: Optional[StrictStr] = Field(default=None, description="ToDo full outline path (corresponds to matching field on Tasks)")
    milestone: Optional[StrictBool] = Field(default=None, description="Calendar Item milestone status")
    name: Optional[StrictStr] = Field(default=None, description="Calendar Item name")
    percentage: Optional[StrictInt] = Field(default=None, description="Calendar Item completion percentage")
    private: Optional[StrictBool] = Field(default=None, description="Calendar Item private status")
    start: Optional[date] = Field(default=None, description="Calendar Item start date")
    task_name: Optional[StrictStr] = Field(default=None, description="Calendar Item name (corresponds to matching field on Tasks)")
    updated_at: Optional[datetime] = Field(default=None, description="Calendar Item last updated at")
    __properties: ClassVar[List[str]] = ["id", "assigned", "color", "created_by", "description", "finish", "full_outline_path", "milestone", "name", "percentage", "private", "start", "task_name", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdScheduleCalendarItemsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assigned
        if self.assigned:
            _dict['assigned'] = self.assigned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdScheduleCalendarItemsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "assigned": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["assigned"]) if obj.get("assigned") is not None else None,
            "color": obj.get("color"),
            "created_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "description": obj.get("description"),
            "finish": obj.get("finish"),
            "full_outline_path": obj.get("full_outline_path"),
            "milestone": obj.get("milestone"),
            "name": obj.get("name"),
            "percentage": obj.get("percentage"),
            "private": obj.get("private"),
            "start": obj.get("start"),
            "task_name": obj.get("task_name"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


