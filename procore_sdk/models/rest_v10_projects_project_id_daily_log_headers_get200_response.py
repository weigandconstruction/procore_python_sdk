# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDailyLogHeadersGet200Response(BaseModel):
    """
    A daily log header
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The id of the daily log header")
    log_date: Optional[date] = Field(default=None, description="Date that this daily log header represents Format: YYYY-MM-DD Example: 2016-05-19")
    log_datetime: Optional[datetime] = Field(default=None, description="Estimated UTC datetime that this daily log header represents")
    completed: Optional[StrictBool] = Field(default=None, description="Is this log date marked as complete?")
    completed_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    completed_at: Optional[datetime] = Field(default=None, description="Daily log header marked complete at")
    completable: Optional[StrictBool] = Field(default=None, description="Is this log date able to be completed?")
    distributed: Optional[StrictBool] = Field(default=None, description="Is this log date marked as distributed?")
    distributed_by: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = None
    distributed_at: Optional[datetime] = Field(default=None, description="Daily log header marked distributed at")
    distributable: Optional[StrictBool] = Field(default=None, description="Is this log date able to be distributed?")
    __properties: ClassVar[List[str]] = ["id", "log_date", "log_datetime", "completed", "completed_by", "completed_at", "completable", "distributed", "distributed_by", "distributed_at", "distributable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogHeadersGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of completed_by
        if self.completed_by:
            _dict['completed_by'] = self.completed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of distributed_by
        if self.distributed_by:
            _dict['distributed_by'] = self.distributed_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogHeadersGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "log_date": obj.get("log_date"),
            "log_datetime": obj.get("log_datetime"),
            "completed": obj.get("completed"),
            "completed_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["completed_by"]) if obj.get("completed_by") is not None else None,
            "completed_at": obj.get("completed_at"),
            "completable": obj.get("completable"),
            "distributed": obj.get("distributed"),
            "distributed_by": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["distributed_by"]) if obj.get("distributed_by") is not None else None,
            "distributed_at": obj.get("distributed_at"),
            "distributable": obj.get("distributable")
        })
        return _obj


