# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdBudgetChangesIdPatchRequestProductionQuantitiesInner(BaseModel):
    """
    Budget Change Adjustment Production Quantity
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID of this Production Quantity")
    comment: Optional[StrictStr] = Field(default=None, description="Comment of the adjustment")
    cost_code_id: StrictInt = Field(description="Cost Code ID")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Production Quantity")
    quantity: Union[StrictFloat, StrictInt] = Field(description="Estimated cost quantity")
    ref: Optional[StrictStr] = Field(default=None, description="Identifier used to map production quantities in the request to their respective objects or errors in the response")
    uom: StrictStr = Field(description="Unit of measure used")
    change_event_production_quantity_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ID of the Change Event Production Quantity that is to be associated with the Budget Change Production Quantity")
    delete: Optional[StrictBool] = Field(default=None, description="Whether this production quantity should be deleted", alias="_delete")
    __properties: ClassVar[List[str]] = ["id", "comment", "cost_code_id", "description", "quantity", "ref", "uom", "change_event_production_quantity_id", "_delete"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesIdPatchRequestProductionQuantitiesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if ref (nullable) is None
        # and model_fields_set contains the field
        if self.ref is None and "ref" in self.model_fields_set:
            _dict['ref'] = None

        # set to None if change_event_production_quantity_id (nullable) is None
        # and model_fields_set contains the field
        if self.change_event_production_quantity_id is None and "change_event_production_quantity_id" in self.model_fields_set:
            _dict['change_event_production_quantity_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesIdPatchRequestProductionQuantitiesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "comment": obj.get("comment"),
            "cost_code_id": obj.get("cost_code_id"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "ref": obj.get("ref"),
            "uom": obj.get("uom"),
            "change_event_production_quantity_id": obj.get("change_event_production_quantity_id"),
            "_delete": obj.get("_delete")
        })
        return _obj


