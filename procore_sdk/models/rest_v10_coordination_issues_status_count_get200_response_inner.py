# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10CoordinationIssuesStatusCountGet200ResponseInner(BaseModel):
    """
    Coordination Issue Status Count
    """ # noqa: E501
    group_by: Optional[StrictStr] = Field(default=None, description="Attribute used for grouping to generate status count")
    group_id: Optional[StrictInt] = Field(default=None, description="Id of the field used for grouping. For e.g. if grouped by location, this will be location id")
    group_label: Optional[StrictStr] = Field(default=None, description="Value of the field used for aggregation, for e.g. location name")
    open_count: Optional[StrictInt] = Field(default=None, description="Count of issues with status 'open'")
    blocked_count: Optional[StrictInt] = Field(default=None, description="Count of issues with status 'blocked'")
    unblocked_count: Optional[StrictInt] = Field(default=None, description="Count of issues with status 'unblocked'")
    ready_for_review_count: Optional[StrictInt] = Field(default=None, description="Count of issues with status 'ready_for_review'")
    moved_to_observation_count: Optional[StrictInt] = Field(default=None, description="Count of issues with status 'moved_to_observation'")
    closed_count: Optional[StrictInt] = Field(default=None, description="Count of issues with status 'closed'")
    __properties: ClassVar[List[str]] = ["group_by", "group_id", "group_label", "open_count", "blocked_count", "unblocked_count", "ready_for_review_count", "moved_to_observation_count", "closed_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CoordinationIssuesStatusCountGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict['group_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CoordinationIssuesStatusCountGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "group_by": obj.get("group_by"),
            "group_id": obj.get("group_id"),
            "group_label": obj.get("group_label"),
            "open_count": obj.get("open_count"),
            "blocked_count": obj.get("blocked_count"),
            "unblocked_count": obj.get("unblocked_count"),
            "ready_for_review_count": obj.get("ready_for_review_count"),
            "moved_to_observation_count": obj.get("moved_to_observation_count"),
            "closed_count": obj.get("closed_count")
        })
        return _obj


