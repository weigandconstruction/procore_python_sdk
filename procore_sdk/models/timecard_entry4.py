# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TimecardEntry4(BaseModel):
    """
    Timecard Entry object
    """ # noqa: E501
    var_date: date = Field(description="The Date of the Timecard Entry", alias="date")
    hours: Optional[StrictStr] = Field(default=None, description="The Hours of the Timecard Entry")
    lunch_time: Optional[StrictStr] = Field(default=None, description="Duration of lunch break in minutes for the Timecard Entry. Only required if Timesheet time entry is configured for Start Time and Stop Time.")
    time_in: Optional[StrictStr] = Field(default=None, description="The Start Time of the Timecard Entry in ISO 8601 format. Only required if Timesheet time entry is configured for Start Time and Stop Time.")
    time_out: Optional[StrictStr] = Field(default=None, description="The Stop Time of the Timecard Entry in ISO 8601 format. Only required if Timesheet time entry is configured for Start Time and Stop Time.")
    billable: Optional[StrictBool] = Field(default=False, description="The Billable status of the Timecard Entry")
    description: Optional[StrictStr] = Field(default=None, description="The Description of the Timecard Entry")
    timecard_time_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the Timecard Time Type of the Timecard Entry")
    location_id: Optional[StrictInt] = Field(default=None, description="The ID of the Location of the Timecard Entry")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="The ID of the Cost Code of the Timecard Entry")
    set_timecard_time_type_automatically: Optional[StrictBool] = Field(default=None, description="Whether or not to allow the automatic overtime management system to apply the configured rules to set the timecard_time_type_id and/or split the timecard entry automatically")
    sub_job_id: Optional[StrictInt] = Field(default=None, description="The ID of the Sub Job of the Timecard Entry")
    party_id: Optional[StrictInt] = Field(default=None, description="The ID of the Party of the Timecard Entry")
    crew_id: Optional[StrictInt] = Field(default=None, description="The ID of the Crew of the Timecard Entry")
    procore_signature_id: Optional[StrictInt] = Field(default=None, description="The ID of the Procore Signature of the Timecard Entry")
    timesheet_id: Optional[StrictInt] = Field(default=None, description="The ID of the Timesheet of the Timecard Entry")
    clock_in_id: Optional[StrictInt] = Field(default=None, description="The ID of the clock in Gps Position of the Timecard Entry")
    clock_out_id: Optional[StrictInt] = Field(default=None, description="The ID of the clock out Gps Position of the Timecard Entry")
    clock_in_time: Optional[StrictStr] = Field(default=None, description="The datetime a timecard clock in was punched")
    clock_out_time: Optional[StrictStr] = Field(default=None, description="The datetime a timecard clock out was punched")
    approval_status: Optional[StrictStr] = Field(default=None, description="The Approval Status of the Timecard Entry")
    origin_id: Optional[StrictInt] = Field(default=None, description="ID of related external data")
    origin_data: Optional[StrictStr] = Field(default=None, description="Value of related external data")
    line_item_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the Line Item Type of Timecard Entry")
    __properties: ClassVar[List[str]] = ["date", "hours", "lunch_time", "time_in", "time_out", "billable", "description", "timecard_time_type_id", "location_id", "cost_code_id", "set_timecard_time_type_automatically", "sub_job_id", "party_id", "crew_id", "procore_signature_id", "timesheet_id", "clock_in_id", "clock_out_id", "clock_in_time", "clock_out_time", "approval_status", "origin_id", "origin_data", "line_item_type_id"]

    @field_validator('approval_status')
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending', 'reviewed', 'approved', 'completed']):
            raise ValueError("must be one of enum values ('pending', 'reviewed', 'approved', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimecardEntry4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimecardEntry4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "hours": obj.get("hours"),
            "lunch_time": obj.get("lunch_time"),
            "time_in": obj.get("time_in"),
            "time_out": obj.get("time_out"),
            "billable": obj.get("billable") if obj.get("billable") is not None else False,
            "description": obj.get("description"),
            "timecard_time_type_id": obj.get("timecard_time_type_id"),
            "location_id": obj.get("location_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "set_timecard_time_type_automatically": obj.get("set_timecard_time_type_automatically"),
            "sub_job_id": obj.get("sub_job_id"),
            "party_id": obj.get("party_id"),
            "crew_id": obj.get("crew_id"),
            "procore_signature_id": obj.get("procore_signature_id"),
            "timesheet_id": obj.get("timesheet_id"),
            "clock_in_id": obj.get("clock_in_id"),
            "clock_out_id": obj.get("clock_out_id"),
            "clock_in_time": obj.get("clock_in_time"),
            "clock_out_time": obj.get("clock_out_time"),
            "approval_status": obj.get("approval_status"),
            "origin_id": obj.get("origin_id"),
            "origin_data": obj.get("origin_data"),
            "line_item_type_id": obj.get("line_item_type_id")
        })
        return _obj


