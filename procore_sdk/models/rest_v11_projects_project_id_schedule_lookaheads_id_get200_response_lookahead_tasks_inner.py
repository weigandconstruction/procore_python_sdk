# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_assignees_inner import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerAssigneesInner
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_resources_inner import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerResourcesInner
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_segments_inner import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSegmentsInner
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_subtasks_inner import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSubtasksInner
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_task import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerTask
from procore_sdk.models.rest_v11_projects_project_id_schedule_lookaheads_id_get200_response_lookahead_tasks_inner_vendors_inner import RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerVendorsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInner(BaseModel):
    """
    Schedule Lookahead Task, with subtasks
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Lookahead Task ID")
    parent_id: Optional[StrictInt] = None
    name: Optional[StrictStr] = Field(default=None, description="Task name")
    row_number: Optional[StrictInt] = Field(default=None, description="Number of the task row within the project schedule")
    critical_path: Optional[StrictBool] = Field(default=None, description="Whether or not the task is included in critical path")
    comment: Optional[StrictStr] = Field(default=None, description="Additional comments")
    activity_id: Optional[StrictStr] = Field(default=None, description="Activity ID")
    wbs: Optional[StrictStr] = Field(default=None, description="WBS")
    segments: Optional[List[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSegmentsInner]] = Field(default=None, description="Segments define the set of days for the entire date range of the task, and the completion status of each day in the task")
    resources: Optional[List[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerResourcesInner]] = Field(default=None, description="Resource(s) assigned to this Lookahead Task")
    assignees: Optional[List[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerAssigneesInner]] = Field(default=None, description="Contact(s) assigned to this Lookahead Task")
    vendors: Optional[List[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerVendorsInner]] = Field(default=None, description="Company(s) assigned to this Lookahead Task")
    task: Optional[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerTask] = None
    subtasks: Optional[List[RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSubtasksInner]] = None
    __properties: ClassVar[List[str]] = ["id", "parent_id", "name", "row_number", "critical_path", "comment", "activity_id", "wbs", "segments", "resources", "assignees", "vendors", "task", "subtasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vendors (list)
        _items = []
        if self.vendors:
            for _item_vendors in self.vendors:
                if _item_vendors:
                    _items.append(_item_vendors.to_dict())
            _dict['vendors'] = _items
        # override the default output from pydantic by calling `to_dict()` of task
        if self.task:
            _dict['task'] = self.task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subtasks (list)
        _items = []
        if self.subtasks:
            for _item_subtasks in self.subtasks:
                if _item_subtasks:
                    _items.append(_item_subtasks.to_dict())
            _dict['subtasks'] = _items
        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict['parent_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parent_id": obj.get("parent_id"),
            "name": obj.get("name"),
            "row_number": obj.get("row_number"),
            "critical_path": obj.get("critical_path"),
            "comment": obj.get("comment"),
            "activity_id": obj.get("activity_id"),
            "wbs": obj.get("wbs"),
            "segments": [RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSegmentsInner.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None,
            "resources": [RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerResourcesInner.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "assignees": [RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerAssigneesInner.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "vendors": [RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerVendorsInner.from_dict(_item) for _item in obj["vendors"]] if obj.get("vendors") is not None else None,
            "task": RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerTask.from_dict(obj["task"]) if obj.get("task") is not None else None,
            "subtasks": [RestV11ProjectsProjectIdScheduleLookaheadsIdGet200ResponseLookaheadTasksInnerSubtasksInner.from_dict(_item) for _item in obj["subtasks"]] if obj.get("subtasks") is not None else None
        })
        return _obj


