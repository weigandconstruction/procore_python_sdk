# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class ChangeOrderBatch(BaseModel):
    """
    Change Order Batch object
    """ # noqa: E501
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Uploads to attach to the response")
    contract_id: StrictInt = Field(description="Unique identifier for the contract.")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    due_date: Optional[date] = Field(default=None, description="Due Date")
    executed: Optional[StrictBool] = Field(default=None, description="Whether or not the Change Order Batch is executed")
    invoiced_date: Optional[date] = Field(default=None, description="Invoiced Date")
    number: Optional[StrictStr] = Field(default=None, description="Number of the Change Order Batch")
    paid_date: Optional[date] = Field(default=None, description="Paid Date")
    private: Optional[StrictBool] = Field(default=None, description="Whether or not the Change Order Batch is private")
    revised_substantial_completion_date: Optional[date] = Field(default=None, description="Revised substantial completion date")
    revision: Optional[StrictInt] = Field(default=None, description="Revision Number")
    schedule_impact_amount: Optional[StrictInt] = Field(default=None, description="Schedule impact in days")
    signature_required: Optional[StrictBool] = Field(default=None, description="Whether a signature will be required for this Change Order Batch")
    signed_change_order_received_date: Optional[date] = Field(default=None, description="Signed Change Order Batch Received Date")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    title: Optional[StrictStr] = Field(default=None, description="Title of the Change Order Batch")
    designated_reviewer_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the designated reviewer. This field is only supported for single-tier projects. Behavior is undefined in multi-tier projects.")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids", "contract_id", "description", "due_date", "executed", "invoiced_date", "number", "paid_date", "private", "revised_substantial_completion_date", "revision", "schedule_impact_amount", "signature_required", "signed_change_order_received_date", "status", "title", "designated_reviewer_id", "custom_field_%{custom_field_definition_id}"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeOrderBatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if due_date (nullable) is None
        # and model_fields_set contains the field
        if self.due_date is None and "due_date" in self.model_fields_set:
            _dict['due_date'] = None

        # set to None if invoiced_date (nullable) is None
        # and model_fields_set contains the field
        if self.invoiced_date is None and "invoiced_date" in self.model_fields_set:
            _dict['invoiced_date'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if paid_date (nullable) is None
        # and model_fields_set contains the field
        if self.paid_date is None and "paid_date" in self.model_fields_set:
            _dict['paid_date'] = None

        # set to None if schedule_impact_amount (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_impact_amount is None and "schedule_impact_amount" in self.model_fields_set:
            _dict['schedule_impact_amount'] = None

        # set to None if signed_change_order_received_date (nullable) is None
        # and model_fields_set contains the field
        if self.signed_change_order_received_date is None and "signed_change_order_received_date" in self.model_fields_set:
            _dict['signed_change_order_received_date'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeOrderBatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids"),
            "contract_id": obj.get("contract_id"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "executed": obj.get("executed"),
            "invoiced_date": obj.get("invoiced_date"),
            "number": obj.get("number"),
            "paid_date": obj.get("paid_date"),
            "private": obj.get("private"),
            "revised_substantial_completion_date": obj.get("revised_substantial_completion_date"),
            "revision": obj.get("revision"),
            "schedule_impact_amount": obj.get("schedule_impact_amount"),
            "signature_required": obj.get("signature_required"),
            "signed_change_order_received_date": obj.get("signed_change_order_received_date"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "designated_reviewer_id": obj.get("designated_reviewer_id"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


