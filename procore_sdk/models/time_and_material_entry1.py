# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TimeAndMaterialEntry1(BaseModel):
    """
    Time and Material Entry Object
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The title of T&M ticket")
    reference_number: Optional[StrictStr] = Field(default=None, description="The refrence number associate with T&M ticket")
    description: Optional[StrictStr] = Field(default=None, description="The description of job")
    status: Optional[StrictStr] = Field(default=None, description="Current status of T&M ticket")
    private: Optional[StrictBool] = Field(default=None, description="If the T&M ticket is private")
    number: Optional[StrictInt] = Field(default=None, description="Unique number for the T&M ticket")
    customer_signature_id: Optional[StrictInt] = Field(default=None, description="The ID associate with customer's signature")
    company_signature_id: Optional[StrictInt] = Field(default=None, description="The ID associate with company's signature")
    company_signee_party_id: Optional[StrictInt] = Field(default=None, description="The ID associate with company's signature party")
    customer_signee_party_id: Optional[StrictInt] = Field(default=None, description="The ID associate with customer's signature party")
    work_performed_on_date: Optional[StrictStr] = Field(default=None, description="Date work performed on")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    __properties: ClassVar[List[str]] = ["name", "reference_number", "description", "status", "private", "number", "customer_signature_id", "company_signature_id", "company_signee_party_id", "customer_signee_party_id", "work_performed_on_date", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeAndMaterialEntry1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeAndMaterialEntry1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "reference_number": obj.get("reference_number"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "private": obj.get("private"),
            "number": obj.get("number"),
            "customer_signature_id": obj.get("customer_signature_id"),
            "company_signature_id": obj.get("company_signature_id"),
            "company_signee_party_id": obj.get("company_signee_party_id"),
            "customer_signee_party_id": obj.get("customer_signee_party_id"),
            "work_performed_on_date": obj.get("work_performed_on_date"),
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids")
        })
        return _obj


