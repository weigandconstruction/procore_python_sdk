# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdSpecificationUploadsPostRequest(BaseModel):
    """
    RestV10ProjectsProjectIdSpecificationUploadsPostRequest
    """ # noqa: E501
    specification_set_id: StrictInt = Field(description="The ID of the specification set to upload to")
    specification_section_id: Optional[StrictInt] = Field(default=None, description="The ID of a Specification Section to apply to all pages in the attached file. If present, the upload will not require review unless the Specification Section is deleted during processing.")
    default_revision: Optional[StrictStr] = Field(default=None, description="A default revision designation to be applied to Specification Section Revisions generated from this upload")
    files: Optional[List[StrictStr]] = Field(default=None, description="One or more files in PDF format to include in the upload (limited to one if specification_section_id is set). *To upload drawings you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `files[]` as files. *Required only if upload_uuids is empty")
    upload_uuids: Optional[List[StrictStr]] = Field(default=None, description="Array of uploaded files UUIDs. *Required only if files is empty")
    issued_date: Optional[StrictStr] = Field(default=None, description="The date when the specifications were issued by the design team")
    received_date: Optional[StrictStr] = Field(default=None, description="The date when the specifications were received by the GC")
    ignore_number: Optional[StrictStr] = Field(default=None, description="Numbers that resemble a spec section number can make it difficult to accurately split up and auto-label the spec sections. This field contains a number flagged to be ignored by the OCR technology and therefore not read as a spec section number, which should improve upload results")
    spec_format: StrictStr = Field(description="Specification format to apply to the upload.")
    __properties: ClassVar[List[str]] = ["specification_set_id", "specification_section_id", "default_revision", "files", "upload_uuids", "issued_date", "received_date", "ignore_number", "spec_format"]

    @field_validator('spec_format')
    def spec_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CSI', 'NCS', 'no_format']):
            raise ValueError("must be one of enum values ('CSI', 'NCS', 'no_format')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdSpecificationUploadsPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdSpecificationUploadsPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "specification_set_id": obj.get("specification_set_id"),
            "specification_section_id": obj.get("specification_section_id"),
            "default_revision": obj.get("default_revision"),
            "files": obj.get("files"),
            "upload_uuids": obj.get("upload_uuids"),
            "issued_date": obj.get("issued_date"),
            "received_date": obj.get("received_date"),
            "ignore_number": obj.get("ignore_number"),
            "spec_format": obj.get("spec_format")
        })
        return _obj


