# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v10_projects_project_id_budget_changes_post201_response_data_all_of_adjustment_line_items_inner_change_event_line_item import RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInnerChangeEventLineItem
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_currency_configuration import RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_line_items_inner_wbs_code import RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInner(BaseModel):
    """
    Budget Change Adjustment line item
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ID of this adjustment")
    ref: Optional[StrictStr] = Field(default=None, description="Identifier used to map line items in the request to their respective objects or errors in the response")
    adjustment_number: Optional[StrictInt] = Field(default=None, description="Number of this adjustment. When creating a line item with type 'change_event', this is optional and it will be auto-assigned an adjustment_number. However, it is required when creating a line item with type 'budget_change'.")
    wbs_code: Optional[RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode] = None
    description: Optional[StrictStr] = Field(default=None, description="Description of the adjustment")
    comment: Optional[StrictStr] = Field(default=None, description="Comment of the adjustment")
    calculation_strategy: Optional[StrictStr] = Field(default=None, description="Cost calculation strategy")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated cost quantity")
    type: Optional[StrictStr] = Field(default=None, description="used to identify type of line item. id uniqueness is guaranteed per type")
    uom: Optional[StrictStr] = Field(default=None, description="Unit of measure used")
    unit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated unit cost")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated cost amount")
    change_event_line_item_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ID of the associated change event line item if it exists (To be deprecated, use change_event_line_item instead)")
    change_event_line_item: Optional[RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInnerChangeEventLineItem] = None
    currency_configuration: Optional[RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration] = None
    __properties: ClassVar[List[str]] = ["id", "ref", "adjustment_number", "wbs_code", "description", "comment", "calculation_strategy", "quantity", "type", "uom", "unit_cost", "amount", "change_event_line_item_id", "change_event_line_item", "currency_configuration"]

    @field_validator('calculation_strategy')
    def calculation_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['automatic', 'manual']):
            raise ValueError("must be one of enum values ('automatic', 'manual')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['budget_change', 'change_event']):
            raise ValueError("must be one of enum values ('budget_change', 'change_event')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wbs_code
        if self.wbs_code:
            _dict['wbs_code'] = self.wbs_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_event_line_item
        if self.change_event_line_item:
            _dict['change_event_line_item'] = self.change_event_line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        # set to None if ref (nullable) is None
        # and model_fields_set contains the field
        if self.ref is None and "ref" in self.model_fields_set:
            _dict['ref'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if change_event_line_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.change_event_line_item_id is None and "change_event_line_item_id" in self.model_fields_set:
            _dict['change_event_line_item_id'] = None

        # set to None if change_event_line_item (nullable) is None
        # and model_fields_set contains the field
        if self.change_event_line_item is None and "change_event_line_item" in self.model_fields_set:
            _dict['change_event_line_item'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ref": obj.get("ref"),
            "adjustment_number": obj.get("adjustment_number"),
            "wbs_code": RestV10WorkOrderContractsPost201ResponseLineItemsInnerWbsCode.from_dict(obj["wbs_code"]) if obj.get("wbs_code") is not None else None,
            "description": obj.get("description"),
            "comment": obj.get("comment"),
            "calculation_strategy": obj.get("calculation_strategy"),
            "quantity": obj.get("quantity"),
            "type": obj.get("type"),
            "uom": obj.get("uom"),
            "unit_cost": obj.get("unit_cost"),
            "amount": obj.get("amount"),
            "change_event_line_item_id": obj.get("change_event_line_item_id"),
            "change_event_line_item": RestV10ProjectsProjectIdBudgetChangesPost201ResponseDataAllOfAdjustmentLineItemsInnerChangeEventLineItem.from_dict(obj["change_event_line_item"]) if obj.get("change_event_line_item") is not None else None,
            "currency_configuration": RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None
        })
        return _obj


