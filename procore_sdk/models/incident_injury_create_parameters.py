# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class IncidentInjuryCreateParameters(BaseModel):
    """
    IncidentInjuryCreateParameters
    """ # noqa: E501
    incident_id: StrictInt = Field(description="The ID of the Incident")
    date_of_death: Optional[date] = Field(default=None, description="Date of death")
    description: Optional[StrictStr] = Field(default=None, description="Description of event in Rich Text format")
    date_returned_to_work: Optional[date] = Field(default=None, description="Date returned to work")
    filing_type: Optional[StrictStr] = Field(default=None, description="Filing Type - The 'recordable' filing_type value is deprecated. When a filing type of 'recordable' is provided, the `recordable` attribute of the Injury will instead be set to 'true'.")
    hospitalized_overnight: Optional[StrictBool] = Field(default=None, description="Represents whether the injured person was hospitalized overnight")
    recordable: Optional[StrictBool] = Field(default=None, description="Represents whether the Injury record is recordable")
    treated_in_er: Optional[StrictBool] = Field(default=None, description="Represents whether the injured person was treated in the ER")
    treatment_facility_address: Optional[StrictStr] = Field(default=None, description="The street address of the treatment facility")
    treatment_facility: Optional[StrictStr] = Field(default=None, description="The name of the treatment facility")
    treatment_provider: Optional[StrictStr] = Field(default=None, description="The name of the treatment provider")
    work_days_absent: Optional[StrictInt] = Field(default=None, description="The number of days absent from work")
    work_days_restricted: Optional[StrictInt] = Field(default=None, description="The number of days on restricted work")
    work_days_transferred: Optional[StrictInt] = Field(default=None, description="The number of days transferred")
    affliction_type_id: Optional[StrictInt] = Field(default=None, description="The ID of the Affliction Type. This cannot be cleared if there is an affected_body_part.")
    body_diagram_type: Optional[StrictStr] = None
    affected_body_parts: Optional[List[StrictStr]] = Field(default=None, description="DEPRECATED - Use body_part_ids instead. The body parts affected by the affliction. This requires an affliction_type to be set.")
    affected_person_id: Optional[StrictInt] = Field(default=None, description="The ID of the Affected Person. This only supports full Users from the Users endpoints.")
    affected_party_id: Optional[StrictInt] = Field(default=None, description="The ID of the Affected Person. This supports full and reference Users from the People endpoints.")
    body_part_ids: Optional[List[StrictInt]] = Field(default=None, description="The IDs of body parts affected by the affliction. This requires an affliction_type to be set.")
    harm_source_id: Optional[StrictInt] = Field(default=None, description="The ID of the Harm Source")
    affected_company_id: Optional[StrictInt] = Field(default=None, description="The ID of the Affected Company")
    managed_equipment_id: Optional[StrictInt] = Field(default=None, description="The ID of the Managed Equipment")
    work_activity_id: Optional[StrictInt] = Field(default=None, description="The ID of the Work Activity")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    __properties: ClassVar[List[str]] = ["incident_id", "date_of_death", "description", "date_returned_to_work", "filing_type", "hospitalized_overnight", "recordable", "treated_in_er", "treatment_facility_address", "treatment_facility", "treatment_provider", "work_days_absent", "work_days_restricted", "work_days_transferred", "affliction_type_id", "body_diagram_type", "affected_body_parts", "affected_person_id", "affected_party_id", "body_part_ids", "harm_source_id", "affected_company_id", "managed_equipment_id", "work_activity_id", "custom_field_%{custom_field_definition_id}"]

    @field_validator('filing_type')
    def filing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fatality', 'first_aid', 'lost_time', 'medically_treated', 'refused_care', 'report_only', 'restricted_work']):
            raise ValueError("must be one of enum values ('fatality', 'first_aid', 'lost_time', 'medically_treated', 'refused_care', 'report_only', 'restricted_work')")
        return value

    @field_validator('body_diagram_type')
    def body_diagram_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['feminine', 'masculine']):
            raise ValueError("must be one of enum values ('feminine', 'masculine')")
        return value

    @field_validator('affected_body_parts')
    def affected_body_parts_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right']):
                raise ValueError("each list item must be one of ('abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncidentInjuryCreateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncidentInjuryCreateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "incident_id": obj.get("incident_id"),
            "date_of_death": obj.get("date_of_death"),
            "description": obj.get("description"),
            "date_returned_to_work": obj.get("date_returned_to_work"),
            "filing_type": obj.get("filing_type"),
            "hospitalized_overnight": obj.get("hospitalized_overnight"),
            "recordable": obj.get("recordable"),
            "treated_in_er": obj.get("treated_in_er"),
            "treatment_facility_address": obj.get("treatment_facility_address"),
            "treatment_facility": obj.get("treatment_facility"),
            "treatment_provider": obj.get("treatment_provider"),
            "work_days_absent": obj.get("work_days_absent"),
            "work_days_restricted": obj.get("work_days_restricted"),
            "work_days_transferred": obj.get("work_days_transferred"),
            "affliction_type_id": obj.get("affliction_type_id"),
            "body_diagram_type": obj.get("body_diagram_type"),
            "affected_body_parts": obj.get("affected_body_parts"),
            "affected_person_id": obj.get("affected_person_id"),
            "affected_party_id": obj.get("affected_party_id"),
            "body_part_ids": obj.get("body_part_ids"),
            "harm_source_id": obj.get("harm_source_id"),
            "affected_company_id": obj.get("affected_company_id"),
            "managed_equipment_id": obj.get("managed_equipment_id"),
            "work_activity_id": obj.get("work_activity_id"),
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None
        })
        return _obj


