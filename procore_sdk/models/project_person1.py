# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.normal_contact import NormalContact
from typing import Optional, Set
from typing_extensions import Self

class ProjectPerson1(BaseModel):
    """
    Project Person
    """ # noqa: E501
    contact: Optional[NormalContact] = None
    employee_id: Optional[StrictStr] = Field(default=None, description="Employee ID for the Project Person")
    first_name: Optional[StrictStr] = Field(default=None, description="Project Person first name")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the Project Person.")
    is_employee: Optional[StrictBool] = Field(default=None, description="Employee status for the Project Person")
    last_name: Optional[StrictStr] = Field(default=None, description="Project Person last name")
    user_id: Optional[StrictInt] = Field(default=None, description="User ID if this Project Person represents a User. NULL for a Reference user. User.")
    user_uuid: Optional[StrictInt] = Field(default=None, description="The user UUID for if this Company Person represents a user. This value is set to NULL for a Reference User.")
    work_classification_id: Optional[StrictInt] = Field(default=None, description="Work Classification ID for the Project Person")
    origin_id: Optional[StrictInt] = Field(default=None, description="The ID of the External Data associated with the Project Person")
    __properties: ClassVar[List[str]] = ["contact", "employee_id", "first_name", "id", "is_employee", "last_name", "user_id", "user_uuid", "work_classification_id", "origin_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectPerson1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # set to None if employee_id (nullable) is None
        # and model_fields_set contains the field
        if self.employee_id is None and "employee_id" in self.model_fields_set:
            _dict['employee_id'] = None

        # set to None if is_employee (nullable) is None
        # and model_fields_set contains the field
        if self.is_employee is None and "is_employee" in self.model_fields_set:
            _dict['is_employee'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if user_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.user_uuid is None and "user_uuid" in self.model_fields_set:
            _dict['user_uuid'] = None

        # set to None if work_classification_id (nullable) is None
        # and model_fields_set contains the field
        if self.work_classification_id is None and "work_classification_id" in self.model_fields_set:
            _dict['work_classification_id'] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict['origin_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectPerson1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contact": NormalContact.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "employee_id": obj.get("employee_id"),
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "is_employee": obj.get("is_employee"),
            "last_name": obj.get("last_name"),
            "user_id": obj.get("user_id"),
            "user_uuid": obj.get("user_uuid"),
            "work_classification_id": obj.get("work_classification_id"),
            "origin_id": obj.get("origin_id")
        })
        return _obj


