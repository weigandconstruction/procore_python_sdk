# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.line_item_type3 import LineItemType3
from procore_sdk.models.rest_v10_change_order_packages_post201_response_line_items_inner_markup_line_items_inner_markup_destination_cost_code import RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode
from procore_sdk.models.rest_v10_sub_jobs_get200_response_inner import RestV10SubJobsGet200ResponseInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkup(BaseModel):
    """
    RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkup
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Markup ID")
    position: Optional[StrictInt] = Field(default=None, description="Position")
    markup_set: Optional[StrictStr] = Field(default=None, description="Markup set")
    name: Optional[StrictStr] = Field(default=None, description="name")
    percentage: Optional[StrictStr] = Field(default=None, description="Percentage")
    compounds_markups_above: Optional[StrictBool] = Field(default=None, description="Compounds markups above?")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    destination_cost_code: Optional[RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode] = None
    destination_line_item_type: Optional[LineItemType3] = None
    desitination_budget_line_item_id: Optional[StrictInt] = Field(default=None, description="Destination Budget Line Item ID")
    destination_sub_job: Optional[RestV10SubJobsGet200ResponseInner] = None
    __properties: ClassVar[List[str]] = ["id", "position", "markup_set", "name", "percentage", "compounds_markups_above", "created_at", "updated_at", "destination_cost_code", "destination_line_item_type", "desitination_budget_line_item_id", "destination_sub_job"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_cost_code
        if self.destination_cost_code:
            _dict['destination_cost_code'] = self.destination_cost_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_line_item_type
        if self.destination_line_item_type:
            _dict['destination_line_item_type'] = self.destination_line_item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_sub_job
        if self.destination_sub_job:
            _dict['destination_sub_job'] = self.destination_sub_job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "position": obj.get("position"),
            "markup_set": obj.get("markup_set"),
            "name": obj.get("name"),
            "percentage": obj.get("percentage"),
            "compounds_markups_above": obj.get("compounds_markups_above"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "destination_cost_code": RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode.from_dict(obj["destination_cost_code"]) if obj.get("destination_cost_code") is not None else None,
            "destination_line_item_type": LineItemType3.from_dict(obj["destination_line_item_type"]) if obj.get("destination_line_item_type") is not None else None,
            "desitination_budget_line_item_id": obj.get("desitination_budget_line_item_id"),
            "destination_sub_job": RestV10SubJobsGet200ResponseInner.from_dict(obj["destination_sub_job"]) if obj.get("destination_sub_job") is not None else None
        })
        return _obj


