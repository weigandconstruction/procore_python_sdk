# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_punch_item_assignments_id_get200_response_login_information import RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseLoginInformation
from procore_sdk.models.rest_v10_projects_project_id_punch_item_assignments_id_get200_response_vendor import RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_attachments_inner import RestV10WorkOrderContractsPost201ResponseAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200Response(BaseModel):
    """
    RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200Response
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    approved: Optional[StrictBool] = Field(default=None, description="Resolution status")
    status: Optional[StrictStr] = Field(default=None, description="Status of Assignment")
    name: Optional[StrictStr] = Field(default=None, description="Assignment's name")
    comment: Optional[StrictStr] = Field(default=None, description="Comment")
    login_information_id: Optional[StrictInt] = None
    login_information_name: Optional[StrictStr] = None
    login_information: Optional[RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseLoginInformation] = None
    attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = None
    vendor: Optional[RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor] = None
    notified_at: Optional[StrictStr] = Field(default=None, description="Date assignee was notified of Punch Item")
    responded_at: Optional[StrictStr] = Field(default=None, description="Date Assignee responded to the Punch Item")
    manager_accepted_at: Optional[StrictStr] = Field(default=None, description="Date Punch Item Manager resolved the Punch Item Assignment")
    user_name: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = Field(default=None, description="Date Assignment was updated")
    __properties: ClassVar[List[str]] = ["id", "approved", "status", "name", "comment", "login_information_id", "login_information_name", "login_information", "attachments", "vendor", "notified_at", "responded_at", "manager_accepted_at", "user_name", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of login_information
        if self.login_information:
            _dict['login_information'] = self.login_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # set to None if vendor (nullable) is None
        # and model_fields_set contains the field
        if self.vendor is None and "vendor" in self.model_fields_set:
            _dict['vendor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "approved": obj.get("approved"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "comment": obj.get("comment"),
            "login_information_id": obj.get("login_information_id"),
            "login_information_name": obj.get("login_information_name"),
            "login_information": RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseLoginInformation.from_dict(obj["login_information"]) if obj.get("login_information") is not None else None,
            "attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "vendor": RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "notified_at": obj.get("notified_at"),
            "responded_at": obj.get("responded_at"),
            "manager_accepted_at": obj.get("manager_accepted_at"),
            "user_name": obj.get("user_name"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


