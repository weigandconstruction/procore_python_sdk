# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_work_order_contracts_post201_response_attachments_inner import RestV10WorkOrderContractsPost201ResponseAttachmentsInner
from procore_sdk.models.work_order_contract_custom_field_custom_field_definition_id import WorkOrderContractCustomFieldCustomFieldDefinitionId
from typing import Optional, Set
from typing_extensions import Self

class TheGenericToolItemObject(BaseModel):
    """
    TheGenericToolItemObject
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the generic tool item.")
    due_date: Optional[date] = Field(default=None, description="The due date for the generic tool item.")
    position: Optional[StrictStr] = Field(default=None, description="The position/number of the generic tool item.")
    private: Optional[StrictBool] = Field(default=None, description="If this property is set to true, the generic tool item is private. If this property is set to false, the generic tool item is not private.")
    skip_emails: Optional[StrictBool] = Field(default=None, description="If true creating and updating the item will not send emails to the users on the item.")
    schedule_impact: Optional[StrictStr] = Field(default=None, description="The schedule impact status for the generic tool item.")
    schedule_impact_value: Optional[StrictStr] = Field(default=None, description="Specifies a value for the schedue impact of the generic tool item.")
    cost_impact: Optional[StrictStr] = Field(default=None, description="The cost impact of the generic tool item.")
    cost_impact_value: Optional[StrictStr] = Field(default=None, description="Specifies a value for the cost impact of the generic tool item.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the generic tool item.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the generic tool item.")
    received_from_id: Optional[StrictInt] = Field(default=None, description="The unique identifier for the Received From entity.")
    location_id: Optional[StrictInt] = Field(default=None, description="The location identifier for the generic tool item.")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="The cost code identifier for the generic tool item.")
    specification_section_id: Optional[StrictInt] = Field(default=None, description="The specification section identifier for the generic tool item.")
    trade_id: Optional[StrictInt] = Field(default=None, description="The trade identifier for the generic tool item.")
    distribution_member_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of distribution member identifiers for the generic tool item.")
    assignee_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of assignee identifiers for the generic tool item.")
    attachments: Optional[List[RestV10WorkOrderContractsPost201ResponseAttachmentsInner]] = Field(default=None, description="Specifies an array of generic tool item attachments. To upload attachments you must upload the entire payload as a `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.")
    custom_field_custom_field_definition_id: Optional[WorkOrderContractCustomFieldCustomFieldDefinitionId] = Field(default=None, alias="custom_field_%{custom_field_definition_id}")
    drawing_revision_ids: Optional[List[StrictInt]] = Field(default=None, description="Drawing Revisions to attach to the response")
    file_version_ids: Optional[List[StrictInt]] = Field(default=None, description="File Versions to attach to the response")
    form_ids: Optional[List[StrictInt]] = Field(default=None, description="Forms to attach to the response")
    image_ids: Optional[List[StrictInt]] = Field(default=None, description="Images to attach to the response")
    upload_ids: Optional[List[StrictStr]] = Field(default=None, description="Uploads to attach to the response")
    __properties: ClassVar[List[str]] = ["description", "due_date", "position", "private", "skip_emails", "schedule_impact", "schedule_impact_value", "cost_impact", "cost_impact_value", "status", "title", "received_from_id", "location_id", "cost_code_id", "specification_section_id", "trade_id", "distribution_member_ids", "assignee_ids", "attachments", "custom_field_%{custom_field_definition_id}", "drawing_revision_ids", "file_version_ids", "form_ids", "image_ids", "upload_ids"]

    @field_validator('schedule_impact')
    def schedule_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a']):
            raise ValueError("must be one of enum values ('yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a')")
        return value

    @field_validator('cost_impact')
    def cost_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a']):
            raise ValueError("must be one of enum values ('yes_known', 'yes_unknown', 'no_impact', 'tbd', 'n_a')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TheGenericToolItemObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_field_custom_field_definition_id
        if self.custom_field_custom_field_definition_id:
            _dict['custom_field_%{custom_field_definition_id}'] = self.custom_field_custom_field_definition_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TheGenericToolItemObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "position": obj.get("position"),
            "private": obj.get("private"),
            "skip_emails": obj.get("skip_emails"),
            "schedule_impact": obj.get("schedule_impact"),
            "schedule_impact_value": obj.get("schedule_impact_value"),
            "cost_impact": obj.get("cost_impact"),
            "cost_impact_value": obj.get("cost_impact_value"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "received_from_id": obj.get("received_from_id"),
            "location_id": obj.get("location_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "specification_section_id": obj.get("specification_section_id"),
            "trade_id": obj.get("trade_id"),
            "distribution_member_ids": obj.get("distribution_member_ids"),
            "assignee_ids": obj.get("assignee_ids"),
            "attachments": [RestV10WorkOrderContractsPost201ResponseAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "custom_field_%{custom_field_definition_id}": WorkOrderContractCustomFieldCustomFieldDefinitionId.from_dict(obj["custom_field_%{custom_field_definition_id}"]) if obj.get("custom_field_%{custom_field_definition_id}") is not None else None,
            "drawing_revision_ids": obj.get("drawing_revision_ids"),
            "file_version_ids": obj.get("file_version_ids"),
            "form_ids": obj.get("form_ids"),
            "image_ids": obj.get("image_ids"),
            "upload_ids": obj.get("upload_ids")
        })
        return _obj


