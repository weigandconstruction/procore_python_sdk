# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.webhooks_delivery_event import WebhooksDeliveryEvent
from typing import Optional, Set
from typing_extensions import Self

class WebhooksDelivery(BaseModel):
    """
    WebhooksDelivery
    """ # noqa: E501
    event: Optional[WebhooksDeliveryEvent] = None
    event_id: Optional[StrictInt] = Field(default=None, description="ID of the audited API event")
    outcome: Optional[StrictStr] = Field(default=None, description="Outcome of the delivery")
    response_body: Optional[StrictStr] = Field(default=None, description="Reponse body returned from the request, if any.")
    response_error: Optional[StrictStr] = Field(default=None, description="Error response message, if any.")
    started_at: Optional[datetime] = Field(default=None, description="Start time of the request")
    completed_at: Optional[datetime] = Field(default=None, description="Completion time of the request")
    response_status: Optional[StrictInt] = Field(default=None, description="Status code returned from the request.")
    response_headers: Optional[Dict[str, Any]] = Field(default=None, description="Headers returned from the request.")
    __properties: ClassVar[List[str]] = ["event", "event_id", "outcome", "response_body", "response_error", "started_at", "completed_at", "response_status", "response_headers"]

    @field_validator('outcome')
    def outcome_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ok', 'retried', 'failed', 'discarded']):
            raise ValueError("must be one of enum values ('ok', 'retried', 'failed', 'discarded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhooksDelivery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhooksDelivery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event": WebhooksDeliveryEvent.from_dict(obj["event"]) if obj.get("event") is not None else None,
            "event_id": obj.get("event_id"),
            "outcome": obj.get("outcome"),
            "response_body": obj.get("response_body"),
            "response_error": obj.get("response_error"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "response_status": obj.get("response_status"),
            "response_headers": obj.get("response_headers")
        })
        return _obj


