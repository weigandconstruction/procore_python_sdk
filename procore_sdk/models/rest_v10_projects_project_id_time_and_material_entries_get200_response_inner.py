# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.extended_view import ExtendedView
from procore_sdk.models.extended_view1 import ExtendedView1
from procore_sdk.models.rest_v10_projects_project_id_time_and_material_entries_get200_response_inner_company_signature import RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerCompanySignature
from procore_sdk.models.rest_v10_projects_project_id_time_and_material_entries_get200_response_inner_customer_signature import RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerCustomerSignature
from procore_sdk.models.rest_v10_projects_project_id_time_and_material_entries_get200_response_inner_time_and_material_entry_attachments_inner import RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerTimeAndMaterialEntryAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInner(BaseModel):
    """
    Time and Material Entry
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    name: Optional[StrictStr] = Field(default=None, description="The title of T&M ticket")
    reference_number: Optional[StrictStr] = Field(default=None, description="The refrence number associate with T&M ticket")
    description: Optional[StrictStr] = Field(default=None, description="The description of job")
    status: Optional[StrictInt] = Field(default=None, description="Current status of T&M ticket")
    private: Optional[StrictBool] = Field(default=None, description="If the T&M ticket is private")
    number: Optional[StrictInt] = Field(default=None, description="Unique number for the T&M ticket")
    company_signee_party: Optional[ExtendedView] = None
    company_signature: Optional[RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerCompanySignature] = None
    customer_signature: Optional[RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerCustomerSignature] = None
    customer_signee_party: Optional[ExtendedView1] = None
    project_id: Optional[StrictInt] = Field(default=None, description="ID of the project the T&M ticket was logged for")
    company_id: Optional[StrictInt] = Field(default=None, description="ID of the company the T&M ticket was logged for")
    location_id: Optional[StrictInt] = Field(default=None, description="ID of the location the T&M ticket was logged for")
    customer_id: Optional[StrictInt] = Field(default=None, description="ID of the costomer who asked for T&M ticket")
    work_performed_on_date: Optional[StrictStr] = Field(default=None, description="Date work performed on")
    updated_at: Optional[datetime] = Field(default=None, description="Date the T&M ticket was updated")
    created_at: Optional[datetime] = Field(default=None, description="Date the T&M ticket was created")
    deleted_at: Optional[datetime] = Field(default=None, description="Date the T&M ticket was deleted")
    created_by_id: Optional[StrictInt] = Field(default=None, description="The user ID the T&M ticket was created with")
    time_and_material_entry_attachments: Optional[List[RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerTimeAndMaterialEntryAttachmentsInner]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "reference_number", "description", "status", "private", "number", "company_signee_party", "company_signature", "customer_signature", "customer_signee_party", "project_id", "company_id", "location_id", "customer_id", "work_performed_on_date", "updated_at", "created_at", "deleted_at", "created_by_id", "time_and_material_entry_attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company_signee_party
        if self.company_signee_party:
            _dict['company_signee_party'] = self.company_signee_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_signature
        if self.company_signature:
            _dict['company_signature'] = self.company_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_signature
        if self.customer_signature:
            _dict['customer_signature'] = self.customer_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_signee_party
        if self.customer_signee_party:
            _dict['customer_signee_party'] = self.customer_signee_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in time_and_material_entry_attachments (list)
        _items = []
        if self.time_and_material_entry_attachments:
            for _item_time_and_material_entry_attachments in self.time_and_material_entry_attachments:
                if _item_time_and_material_entry_attachments:
                    _items.append(_item_time_and_material_entry_attachments.to_dict())
            _dict['time_and_material_entry_attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "reference_number": obj.get("reference_number"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "private": obj.get("private"),
            "number": obj.get("number"),
            "company_signee_party": ExtendedView.from_dict(obj["company_signee_party"]) if obj.get("company_signee_party") is not None else None,
            "company_signature": RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerCompanySignature.from_dict(obj["company_signature"]) if obj.get("company_signature") is not None else None,
            "customer_signature": RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerCustomerSignature.from_dict(obj["customer_signature"]) if obj.get("customer_signature") is not None else None,
            "customer_signee_party": ExtendedView1.from_dict(obj["customer_signee_party"]) if obj.get("customer_signee_party") is not None else None,
            "project_id": obj.get("project_id"),
            "company_id": obj.get("company_id"),
            "location_id": obj.get("location_id"),
            "customer_id": obj.get("customer_id"),
            "work_performed_on_date": obj.get("work_performed_on_date"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "created_by_id": obj.get("created_by_id"),
            "time_and_material_entry_attachments": [RestV10ProjectsProjectIdTimeAndMaterialEntriesGet200ResponseInnerTimeAndMaterialEntryAttachmentsInner.from_dict(_item) for _item in obj["time_and_material_entry_attachments"]] if obj.get("time_and_material_entry_attachments") is not None else None
        })
        return _obj


