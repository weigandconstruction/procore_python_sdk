# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SeverityLevel(BaseModel):
    """
    SeverityLevel
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the Incident Severity Level")
    procore_default_name: Optional[StrictStr] = Field(default=None, description="Procore default name of the Incident Severity Level")
    active: Optional[StrictBool] = Field(default=None, description="Denotes whether the Incident Severity Level is active")
    email_trigger: Optional[StrictBool] = Field(default=None, description="Denotes whether an email should be sent")
    push_notification_trigger: Optional[StrictBool] = Field(default=None, description="Denotes whether a push notification should be sent")
    order: Optional[StrictInt] = Field(default=None, description="Ranking order of the Incident Severity Level")
    created_at: Optional[datetime] = Field(default=None, description="iso8601 timestamp of creation")
    updated_at: Optional[datetime] = Field(default=None, description="iso8601 timestamp of last update")
    __properties: ClassVar[List[str]] = ["id", "name", "procore_default_name", "active", "email_trigger", "push_notification_trigger", "order", "created_at", "updated_at"]

    @field_validator('procore_default_name')
    def procore_default_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['insignificant', 'minor', 'major', 'critical', 'moderate']):
            raise ValueError("must be one of enum values ('insignificant', 'minor', 'major', 'critical', 'moderate')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeverityLevel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeverityLevel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "procore_default_name": obj.get("procore_default_name"),
            "active": obj.get("active"),
            "email_trigger": obj.get("email_trigger"),
            "push_notification_trigger": obj.get("push_notification_trigger"),
            "order": obj.get("order"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


