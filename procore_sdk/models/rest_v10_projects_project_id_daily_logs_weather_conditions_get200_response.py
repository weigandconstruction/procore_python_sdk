# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get200_response_calamity_inner import RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseCalamityInner
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get200_response_ground_inner import RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseGroundInner
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get200_response_sky_inner import RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseSkyInner
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get200_response_temperature_inner import RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseTemperatureInner
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_weather_conditions_get200_response_wind_inner import RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseWindInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response(BaseModel):
    """
    Accepted weather conditions
    """ # noqa: E501
    sky: Optional[List[RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseSkyInner]] = None
    ground: Optional[List[RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseGroundInner]] = None
    calamity: Optional[List[RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseCalamityInner]] = None
    wind: Optional[List[RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseWindInner]] = None
    temperature: Optional[List[RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseTemperatureInner]] = None
    __properties: ClassVar[List[str]] = ["sky", "ground", "calamity", "wind", "temperature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sky (list)
        _items = []
        if self.sky:
            for _item_sky in self.sky:
                if _item_sky:
                    _items.append(_item_sky.to_dict())
            _dict['sky'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ground (list)
        _items = []
        if self.ground:
            for _item_ground in self.ground:
                if _item_ground:
                    _items.append(_item_ground.to_dict())
            _dict['ground'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calamity (list)
        _items = []
        if self.calamity:
            for _item_calamity in self.calamity:
                if _item_calamity:
                    _items.append(_item_calamity.to_dict())
            _dict['calamity'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wind (list)
        _items = []
        if self.wind:
            for _item_wind in self.wind:
                if _item_wind:
                    _items.append(_item_wind.to_dict())
            _dict['wind'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in temperature (list)
        _items = []
        if self.temperature:
            for _item_temperature in self.temperature:
                if _item_temperature:
                    _items.append(_item_temperature.to_dict())
            _dict['temperature'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sky": [RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseSkyInner.from_dict(_item) for _item in obj["sky"]] if obj.get("sky") is not None else None,
            "ground": [RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseGroundInner.from_dict(_item) for _item in obj["ground"]] if obj.get("ground") is not None else None,
            "calamity": [RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseCalamityInner.from_dict(_item) for _item in obj["calamity"]] if obj.get("calamity") is not None else None,
            "wind": [RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseWindInner.from_dict(_item) for _item in obj["wind"]] if obj.get("wind") is not None else None,
            "temperature": [RestV10ProjectsProjectIdDailyLogsWeatherConditionsGet200ResponseTemperatureInner.from_dict(_item) for _item in obj["temperature"]] if obj.get("temperature") is not None else None
        })
        return _obj


