# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.company_managed_equipment_user_permission_permission_template import CompanyManagedEquipmentUserPermissionPermissionTemplate
from procore_sdk.models.company_managed_equipment_user_permission_user_access_level import CompanyManagedEquipmentUserPermissionUserAccessLevel
from procore_sdk.models.rest_v10_projects_project_id_waste_logs_get200_response_inner_vendor import RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor
from typing import Optional, Set
from typing_extensions import Self

class CompanyManagedEquipmentUserPermission(BaseModel):
    """
    Company Managed Equipment User Permission
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    company_directory_admin: Optional[StrictBool] = Field(default=None, description="User is a Company directory admin")
    name: Optional[StrictStr] = Field(default=None, description="Full name of user")
    user_access_level: Optional[CompanyManagedEquipmentUserPermissionUserAccessLevel] = None
    permission_template: Optional[CompanyManagedEquipmentUserPermissionPermissionTemplate] = None
    vendor: Optional[RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor] = None
    __properties: ClassVar[List[str]] = ["id", "company_directory_admin", "name", "user_access_level", "permission_template", "vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompanyManagedEquipmentUserPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_access_level
        if self.user_access_level:
            _dict['user_access_level'] = self.user_access_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permission_template
        if self.permission_template:
            _dict['permission_template'] = self.permission_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompanyManagedEquipmentUserPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "company_directory_admin": obj.get("company_directory_admin"),
            "name": obj.get("name"),
            "user_access_level": CompanyManagedEquipmentUserPermissionUserAccessLevel.from_dict(obj["user_access_level"]) if obj.get("user_access_level") is not None else None,
            "permission_template": CompanyManagedEquipmentUserPermissionPermissionTemplate.from_dict(obj["permission_template"]) if obj.get("permission_template") is not None else None,
            "vendor": RestV10ProjectsProjectIdWasteLogsGet200ResponseInnerVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None
        })
        return _obj


