# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_companies_company_id_workflow_permanent_logs_get200_response_inner_attachments_inner import RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner
from procore_sdk.models.rest_v10_projects_project_id_work_logs_get200_response_inner_created_by import RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy
from typing import Optional, Set
from typing_extensions import Self

class RestV10CommunicationsCommunicationIdThreadsIdGet200Response(BaseModel):
    """
    RestV10CommunicationsCommunicationIdThreadsIdGet200Response
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="Body")
    cc: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = None
    bcc: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = None
    attachments: Optional[List[RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner]] = None
    from_external_email: Optional[StrictBool] = Field(default=None, description="Flag indicating whether the communication originated outside of Procore")
    var_from: Optional[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy] = Field(default=None, alias="from")
    to: Optional[List[RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy]] = None
    id: Optional[StrictInt] = Field(default=None, description="ID")
    subject: Optional[StrictStr] = Field(default=None, description="Subject")
    email_sent_at: Optional[datetime] = Field(default=None, description="Date email sent")
    __properties: ClassVar[List[str]] = ["body", "cc", "bcc", "attachments", "from_external_email", "from", "to", "id", "subject", "email_sent_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CommunicationsCommunicationIdThreadsIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cc (list)
        _items = []
        if self.cc:
            for _item_cc in self.cc:
                if _item_cc:
                    _items.append(_item_cc.to_dict())
            _dict['cc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bcc (list)
        _items = []
        if self.bcc:
            for _item_bcc in self.bcc:
                if _item_bcc:
                    _items.append(_item_bcc.to_dict())
            _dict['bcc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in to (list)
        _items = []
        if self.to:
            for _item_to in self.to:
                if _item_to:
                    _items.append(_item_to.to_dict())
            _dict['to'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CommunicationsCommunicationIdThreadsIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "cc": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["cc"]] if obj.get("cc") is not None else None,
            "bcc": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["bcc"]] if obj.get("bcc") is not None else None,
            "attachments": [RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "from_external_email": obj.get("from_external_email"),
            "from": RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "to": [RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.from_dict(_item) for _item in obj["to"]] if obj.get("to") is not None else None,
            "id": obj.get("id"),
            "subject": obj.get("subject"),
            "email_sent_at": obj.get("email_sent_at")
        })
        return _obj


