# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.bid_attachments_inner import BidAttachmentsInner
from procore_sdk.models.bid_bid_items_inner import BidBidItemsInner
from procore_sdk.models.bid_bid_requester import BidBidRequester
from procore_sdk.models.bid_links import BidLinks
from procore_sdk.models.bid_project import BidProject
from procore_sdk.models.bid_recipient_list_inner import BidRecipientListInner
from procore_sdk.models.bid_vendor import BidVendor
from procore_sdk.models.timecard_entry_full_cost_code import TimecardEntryFullCostCode
from typing import Optional, Set
from typing_extensions import Self

class Bid(BaseModel):
    """
    Bid
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    bid_package_id: Optional[StrictInt] = Field(default=None, description="Bid Package ID")
    bid_package_title: Optional[StrictStr] = Field(default=None, description="Package Title")
    bid_form_title: Optional[StrictStr] = Field(default=None, description="Bid Form Title")
    awarded: Optional[StrictBool] = Field(default=None, description="Bid awarded to vendor")
    bidders_can_add_line_items: Optional[StrictBool] = Field(default=None, description="Bidders can add line items")
    bid_status: Optional[StrictStr] = Field(default=None, description="This status is combination of the `invitation_last_sent_at`, `is_bidder_committed`, `submitted`, & `awarded` values. The `not_invited`  status is the same as `invitation_last_sent_at` being null,     `is_bidder_committed` being null,  `submitted` being false, & `awarded` not being true. The `undecided`    status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being null,  `submitted` being false, & `awarded` not being true. The `will_not_bid` status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being false, `submitted` being false, & `awarded` not being true. The `will_bid`     status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being false, & `awarded` not being true. The `submitted`    status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being true,  & `awarded` not being true. The `awarded`      status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being true,  & `awarded` being true. ")
    company_id: Optional[StrictInt] = Field(default=None, description="Company ID")
    invitation_last_sent_at: Optional[datetime] = Field(default=None, description="Date/time the Bid invitation was last sent")
    is_bidder_committed: Optional[StrictBool] = Field(default=None, description="Bidder committed")
    lump_sum_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lump sum (overall) amount. It's an optional parameter when the blind bidding is on.")
    lump_sum_enabled: Optional[StrictBool] = Field(default=None, description="Lump sum bidding enabled")
    submitted: Optional[StrictBool] = Field(default=None, description="Vendor submitted bid")
    created_at: Optional[datetime] = Field(default=None, description="Created at")
    updated_at: Optional[datetime] = Field(default=None, description="Updated at")
    due_date: Optional[datetime] = Field(default=None, description="Due date")
    bidder_comments: Optional[StrictStr] = Field(default=None, description="Comments made on bid sheet. It's an optional parameter when the blind bidding is on.")
    bid_requester: Optional[BidBidRequester] = None
    deleted_at: Optional[datetime] = Field(default=None, description="Deleted at")
    bidder_notes: Optional[StrictStr] = Field(default=None, description="Notes. It's an optional parameter when the blind bidding is on.")
    attachments_count: Optional[StrictInt] = Field(default=None, description="Attachment count. It's an optional parameter when the blind bidding is on.")
    recipient_ids: Optional[List[StrictInt]] = Field(default=None, description="Login IDs of all recipients on a bid")
    recipient_list: Optional[List[BidRecipientListInner]] = Field(default=None, description="Detailed recipient informations on bid")
    recipient_list_with_email_and_number: Optional[List[StrictStr]] = Field(default=None, description="Recipient emails and phone numbers")
    mailto: Optional[StrictStr] = Field(default=None, description="Email address associated with creating communications for bid")
    bidder_inclusion: Optional[StrictStr] = Field(default=None, description="Inclusion comments made on bid sheet. It's an optional parameter when the blind bidding is on.")
    bidder_exclusion: Optional[StrictStr] = Field(default=None, description="Exclusion comments made on bid sheet. It's an optional parameter when the blind bidding is on.")
    bid_convertible_to_subcontract: Optional[StrictBool] = Field(default=None, description="Bid Convertible to Subcontract")
    bid_convertible_to_purchase_order: Optional[StrictBool] = Field(default=None, description="Bid Convertible to Purchase Order")
    contract_button_disabled_reason: Optional[StrictStr] = Field(default=None, description="Contract button disabled reason")
    po_button_disabled_reason: Optional[StrictStr] = Field(default=None, description="Purchase Order button disabled reason")
    links: Optional[BidLinks] = None
    vendor: Optional[BidVendor] = None
    project: Optional[BidProject] = None
    bid_items: Optional[List[BidBidItemsInner]] = Field(default=None, description="Items")
    cost_codes: Optional[List[TimecardEntryFullCostCode]] = Field(default=None, description="Cost Codes associated with items")
    attachments: Optional[List[BidAttachmentsInner]] = Field(default=None, description="Attachments. To upload attachments you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.")
    attachments_zip_streaming_url: Optional[StrictStr] = Field(default=None, description="Streaming URL to download all attachments. It's an optional parameter when the blind bidding is on.")
    __properties: ClassVar[List[str]] = ["id", "bid_package_id", "bid_package_title", "bid_form_title", "awarded", "bidders_can_add_line_items", "bid_status", "company_id", "invitation_last_sent_at", "is_bidder_committed", "lump_sum_amount", "lump_sum_enabled", "submitted", "created_at", "updated_at", "due_date", "bidder_comments", "bid_requester", "deleted_at", "bidder_notes", "attachments_count", "recipient_ids", "recipient_list", "recipient_list_with_email_and_number", "mailto", "bidder_inclusion", "bidder_exclusion", "bid_convertible_to_subcontract", "bid_convertible_to_purchase_order", "contract_button_disabled_reason", "po_button_disabled_reason", "links", "vendor", "project", "bid_items", "cost_codes", "attachments", "attachments_zip_streaming_url"]

    @field_validator('bid_status')
    def bid_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_invited', 'undecided', 'will_not_bid', 'will_bid', 'submitted', 'awarded']):
            raise ValueError("must be one of enum values ('not_invited', 'undecided', 'will_not_bid', 'will_bid', 'submitted', 'awarded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bid_requester
        if self.bid_requester:
            _dict['bid_requester'] = self.bid_requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipient_list (list)
        _items = []
        if self.recipient_list:
            for _item_recipient_list in self.recipient_list:
                if _item_recipient_list:
                    _items.append(_item_recipient_list.to_dict())
            _dict['recipient_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bid_items (list)
        _items = []
        if self.bid_items:
            for _item_bid_items in self.bid_items:
                if _item_bid_items:
                    _items.append(_item_bid_items.to_dict())
            _dict['bid_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cost_codes (list)
        _items = []
        if self.cost_codes:
            for _item_cost_codes in self.cost_codes:
                if _item_cost_codes:
                    _items.append(_item_cost_codes.to_dict())
            _dict['cost_codes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if awarded (nullable) is None
        # and model_fields_set contains the field
        if self.awarded is None and "awarded" in self.model_fields_set:
            _dict['awarded'] = None

        # set to None if invitation_last_sent_at (nullable) is None
        # and model_fields_set contains the field
        if self.invitation_last_sent_at is None and "invitation_last_sent_at" in self.model_fields_set:
            _dict['invitation_last_sent_at'] = None

        # set to None if is_bidder_committed (nullable) is None
        # and model_fields_set contains the field
        if self.is_bidder_committed is None and "is_bidder_committed" in self.model_fields_set:
            _dict['is_bidder_committed'] = None

        # set to None if bidder_comments (nullable) is None
        # and model_fields_set contains the field
        if self.bidder_comments is None and "bidder_comments" in self.model_fields_set:
            _dict['bidder_comments'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if bidder_inclusion (nullable) is None
        # and model_fields_set contains the field
        if self.bidder_inclusion is None and "bidder_inclusion" in self.model_fields_set:
            _dict['bidder_inclusion'] = None

        # set to None if bidder_exclusion (nullable) is None
        # and model_fields_set contains the field
        if self.bidder_exclusion is None and "bidder_exclusion" in self.model_fields_set:
            _dict['bidder_exclusion'] = None

        # set to None if bid_convertible_to_subcontract (nullable) is None
        # and model_fields_set contains the field
        if self.bid_convertible_to_subcontract is None and "bid_convertible_to_subcontract" in self.model_fields_set:
            _dict['bid_convertible_to_subcontract'] = None

        # set to None if bid_convertible_to_purchase_order (nullable) is None
        # and model_fields_set contains the field
        if self.bid_convertible_to_purchase_order is None and "bid_convertible_to_purchase_order" in self.model_fields_set:
            _dict['bid_convertible_to_purchase_order'] = None

        # set to None if contract_button_disabled_reason (nullable) is None
        # and model_fields_set contains the field
        if self.contract_button_disabled_reason is None and "contract_button_disabled_reason" in self.model_fields_set:
            _dict['contract_button_disabled_reason'] = None

        # set to None if po_button_disabled_reason (nullable) is None
        # and model_fields_set contains the field
        if self.po_button_disabled_reason is None and "po_button_disabled_reason" in self.model_fields_set:
            _dict['po_button_disabled_reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bid_package_id": obj.get("bid_package_id"),
            "bid_package_title": obj.get("bid_package_title"),
            "bid_form_title": obj.get("bid_form_title"),
            "awarded": obj.get("awarded"),
            "bidders_can_add_line_items": obj.get("bidders_can_add_line_items"),
            "bid_status": obj.get("bid_status"),
            "company_id": obj.get("company_id"),
            "invitation_last_sent_at": obj.get("invitation_last_sent_at"),
            "is_bidder_committed": obj.get("is_bidder_committed"),
            "lump_sum_amount": obj.get("lump_sum_amount"),
            "lump_sum_enabled": obj.get("lump_sum_enabled"),
            "submitted": obj.get("submitted"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "due_date": obj.get("due_date"),
            "bidder_comments": obj.get("bidder_comments"),
            "bid_requester": BidBidRequester.from_dict(obj["bid_requester"]) if obj.get("bid_requester") is not None else None,
            "deleted_at": obj.get("deleted_at"),
            "bidder_notes": obj.get("bidder_notes"),
            "attachments_count": obj.get("attachments_count"),
            "recipient_ids": obj.get("recipient_ids"),
            "recipient_list": [BidRecipientListInner.from_dict(_item) for _item in obj["recipient_list"]] if obj.get("recipient_list") is not None else None,
            "recipient_list_with_email_and_number": obj.get("recipient_list_with_email_and_number"),
            "mailto": obj.get("mailto"),
            "bidder_inclusion": obj.get("bidder_inclusion"),
            "bidder_exclusion": obj.get("bidder_exclusion"),
            "bid_convertible_to_subcontract": obj.get("bid_convertible_to_subcontract"),
            "bid_convertible_to_purchase_order": obj.get("bid_convertible_to_purchase_order"),
            "contract_button_disabled_reason": obj.get("contract_button_disabled_reason"),
            "po_button_disabled_reason": obj.get("po_button_disabled_reason"),
            "links": BidLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "vendor": BidVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "project": BidProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "bid_items": [BidBidItemsInner.from_dict(_item) for _item in obj["bid_items"]] if obj.get("bid_items") is not None else None,
            "cost_codes": [TimecardEntryFullCostCode.from_dict(_item) for _item in obj["cost_codes"]] if obj.get("cost_codes") is not None else None,
            "attachments": [BidAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "attachments_zip_streaming_url": obj.get("attachments_zip_streaming_url")
        })
        return _obj


