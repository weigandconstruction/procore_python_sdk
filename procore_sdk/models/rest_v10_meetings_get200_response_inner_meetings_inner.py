# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10MeetingsGet200ResponseInnerMeetingsInner(BaseModel):
    """
    Meeting
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Meeting id")
    title: Optional[StrictStr] = Field(default=None, description="Meeting title")
    position: Optional[StrictInt] = Field(default=None, description="Meeting position")
    created_by_id: Optional[StrictInt] = Field(default=None, description="Id of the user who created the meeting (returned only for meetings created after Dec 2023)")
    description: Optional[StrictStr] = Field(default=None, description="Meeting description")
    mode: Optional[StrictStr] = Field(default=None, description="Meeting mode")
    meeting_date: Optional[date] = Field(default=None, description="Meeting date")
    parent_id: Optional[StrictInt] = Field(default=None, description="Meeting parent id")
    location: Optional[StrictStr] = Field(default=None, description="Meeting location")
    meeting_topics_count: Optional[StrictInt] = Field(default=None, description="The number of agendas associated with this meeting")
    occurred: Optional[StrictBool] = Field(default=None, description="Indicates whether this meeting has already taken place")
    is_private: Optional[StrictBool] = Field(default=None, description="Indicates whether this meeting is only visible to scheduled attendees and users with 'Admin' level permissions to the Meetings tool.")
    created_at: Optional[datetime] = Field(default=None, description="Meeting created at")
    updated_at: Optional[datetime] = Field(default=None, description="Meeting updated at")
    __properties: ClassVar[List[str]] = ["id", "title", "position", "created_by_id", "description", "mode", "meeting_date", "parent_id", "location", "meeting_topics_count", "occurred", "is_private", "created_at", "updated_at"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['minutes', 'agenda']):
            raise ValueError("must be one of enum values ('minutes', 'agenda')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10MeetingsGet200ResponseInnerMeetingsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10MeetingsGet200ResponseInnerMeetingsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "position": obj.get("position"),
            "created_by_id": obj.get("created_by_id"),
            "description": obj.get("description"),
            "mode": obj.get("mode"),
            "meeting_date": obj.get("meeting_date"),
            "parent_id": obj.get("parent_id"),
            "location": obj.get("location"),
            "meeting_topics_count": obj.get("meeting_topics_count"),
            "occurred": obj.get("occurred"),
            "is_private": obj.get("is_private"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


