# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BusinessNormalViewAddressesInner(BaseModel):
    """
    BusinessNormalViewAddressesInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="UUID for the address")
    name: Optional[StrictStr] = Field(default=None, description="Address Name")
    address1: Optional[StrictStr] = Field(default=None, description="Business Street Address")
    address2: Optional[StrictStr] = Field(default=None, description="Street Address Line 2")
    city: Optional[StrictStr] = Field(default=None, description="Address City")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the Address")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude of the Address")
    province: Optional[StrictStr] = Field(default=None, description="Address State or Province")
    postal_code1: Optional[StrictStr] = Field(default=None, description="Address Primary Zip Code or Other Postal Code")
    country_code: Optional[StrictStr] = Field(default=None, description="Country Code")
    phone_number: Optional[StrictStr] = Field(default=None, description="Business Phone Number")
    fax_number: Optional[StrictStr] = Field(default=None, description="Business Fax Number")
    primary: Optional[StrictBool] = Field(default=None, description="Indicates whether this is the primary address for the Business. This is also the Main Office of the company.")
    address_types: Optional[List[StrictStr]] = Field(default=None, description="Address Types")
    __properties: ClassVar[List[str]] = ["id", "name", "address1", "address2", "city", "latitude", "longitude", "province", "postal_code1", "country_code", "phone_number", "fax_number", "primary", "address_types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessNormalViewAddressesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessNormalViewAddressesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "province": obj.get("province"),
            "postal_code1": obj.get("postal_code1"),
            "country_code": obj.get("country_code"),
            "phone_number": obj.get("phone_number"),
            "fax_number": obj.get("fax_number"),
            "primary": obj.get("primary"),
            "address_types": obj.get("address_types")
        })
        return _obj


