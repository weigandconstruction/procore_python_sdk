# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Image1(BaseModel):
    """
    At least one attribute is required even when an 'upload_uuid' key is provided. If an 'upload_uuid' is not provided above, then the 'data' key must be provided
    """ # noqa: E501
    private: Optional[StrictBool] = Field(default=None, description="The Private status of the Image. Defaults to a project configuration.")
    provider_type: Optional[StrictStr] = Field(default=None, description="Provider type. Currently supports only `MarkupLayer`, and should only be used when adding an Image to markup.")
    provider_id: Optional[StrictInt] = Field(default=None, description="Provider ID. Currently supports only MarkupLayer IDs, and should only be used when adding an Image to markup.")
    data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="File to use as image data. Note that it's only possible to post a file using a multipart/form-data body (see RFC 2388). Most HTTP libraries will do the right thing when you pass in an open file or IO stream. Alternatively you can use an upload_uuid (see Company Uploads or Project Uploads). You should not use both file and upload_uuid fields in the same request.")
    source: Optional[StrictStr] = Field(default=None, description="Image source")
    description: Optional[StrictStr] = Field(default=None, description="Image description")
    image_category_id: Optional[StrictInt] = Field(default=None, description="Image Category ID")
    location_id: Optional[StrictInt] = Field(default=None, description="If you want to use an existing location and you have the ID of that existing location use this. `location_id` takes precedence over `mt_location`")
    mt_location: Optional[List[StrictStr]] = Field(default=None, description="Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.")
    trade_ids: Optional[List[StrictInt]] = Field(default=None, description="An array of IDs of the Trades of the Image")
    log_date: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["private", "provider_type", "provider_id", "data", "source", "description", "image_category_id", "location_id", "mt_location", "trade_ids", "log_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "private": obj.get("private"),
            "provider_type": obj.get("provider_type"),
            "provider_id": obj.get("provider_id"),
            "data": obj.get("data"),
            "source": obj.get("source"),
            "description": obj.get("description"),
            "image_category_id": obj.get("image_category_id"),
            "location_id": obj.get("location_id"),
            "mt_location": obj.get("mt_location"),
            "trade_ids": obj.get("trade_ids"),
            "log_date": obj.get("log_date")
        })
        return _obj


