# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestV10ChangeEventsGet200ResponseInnerChangeEventLineItemsInnerStatuses(BaseModel):
    """
    RestV10ChangeEventsGet200ResponseInnerChangeEventLineItemsInnerStatuses
    """ # noqa: E501
    contract: Optional[StrictStr] = Field(default=None, description="Contract status")
    commitment_contract_cost: Optional[StrictStr] = Field(default=None, description="Commitment Contract Cost status")
    commitment_contract_tooltip: Optional[StrictStr] = Field(default=None, description="Commitment Contract tooltip")
    commitment_pco_cost: Optional[StrictStr] = Field(default=None, description="Commitment PCO cost status")
    commitment_pco_tooltip: Optional[StrictStr] = Field(default=None, description="Commitment PCO tooltip")
    rfq_amount: Optional[StrictStr] = Field(default=None, description="RFQ Amount status")
    rfq_tooltip: Optional[StrictStr] = Field(default=None, description="RFQ tooltip")
    prime_pco_cost: Optional[StrictStr] = Field(default=None, description="Prime PCO Cost status")
    prime_pco_tooltip: Optional[StrictStr] = Field(default=None, description="Prime PCO tooltip")
    __properties: ClassVar[List[str]] = ["contract", "commitment_contract_cost", "commitment_contract_tooltip", "commitment_pco_cost", "commitment_pco_tooltip", "rfq_amount", "rfq_tooltip", "prime_pco_cost", "prime_pco_tooltip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ChangeEventsGet200ResponseInnerChangeEventLineItemsInnerStatuses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ChangeEventsGet200ResponseInnerChangeEventLineItemsInnerStatuses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contract": obj.get("contract"),
            "commitment_contract_cost": obj.get("commitment_contract_cost"),
            "commitment_contract_tooltip": obj.get("commitment_contract_tooltip"),
            "commitment_pco_cost": obj.get("commitment_pco_cost"),
            "commitment_pco_tooltip": obj.get("commitment_pco_tooltip"),
            "rfq_amount": obj.get("rfq_amount"),
            "rfq_tooltip": obj.get("rfq_tooltip"),
            "prime_pco_cost": obj.get("prime_pco_cost"),
            "prime_pco_tooltip": obj.get("prime_pco_tooltip")
        })
        return _obj


