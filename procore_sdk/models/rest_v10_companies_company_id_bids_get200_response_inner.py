# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.bid_bid_requester import BidBidRequester
from procore_sdk.models.bid_project import BidProject
from procore_sdk.models.bid_vendor import BidVendor
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdBidsGet200ResponseInner(BaseModel):
    """
    Summary
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    bid_package_id: Optional[StrictInt] = Field(default=None, description="Bid Package ID")
    bid_package_title: Optional[StrictStr] = Field(default=None, description="Bid Package title")
    bid_form_title: Optional[StrictStr] = Field(default=None, description="Bid Form Title")
    bid_status: Optional[StrictStr] = Field(default=None, description="Bid status")
    awarded: Optional[StrictBool] = Field(default=None, description="Bid awarded to vendor")
    company_id: Optional[StrictInt] = Field(default=None, description="Company ID")
    invitation_last_sent_at: Optional[datetime] = Field(default=None, description="Date/time the Bid Package invitation was last sent")
    is_bidder_committed: Optional[StrictBool] = Field(default=None, description="Bidder committed")
    lump_sum_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lump sum (overall) amount")
    lump_sum_enabled: Optional[StrictBool] = Field(default=None, description="Lump sum bidding enabled")
    submitted: Optional[StrictBool] = Field(default=None, description="Vendor submitted Bid")
    created_at: Optional[datetime] = Field(default=None, description="Date/time the Bid Package was created")
    updated_at: Optional[datetime] = Field(default=None, description="Date/time the Bid Package was last updated")
    due_date: Optional[datetime] = Field(default=None, description="Due Date")
    bidder_comments: Optional[StrictStr] = Field(default=None, description="Comments")
    bid_requester: Optional[BidBidRequester] = None
    vendor: Optional[BidVendor] = None
    project: Optional[BidProject] = None
    __properties: ClassVar[List[str]] = ["id", "bid_package_id", "bid_package_title", "bid_form_title", "bid_status", "awarded", "company_id", "invitation_last_sent_at", "is_bidder_committed", "lump_sum_amount", "lump_sum_enabled", "submitted", "created_at", "updated_at", "due_date", "bidder_comments", "bid_requester", "vendor", "project"]

    @field_validator('bid_status')
    def bid_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['undecided', 'will_not_bid', 'will_bid', 'not_invited', 'submitted']):
            raise ValueError("must be one of enum values ('undecided', 'will_not_bid', 'will_bid', 'not_invited', 'submitted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdBidsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bid_requester
        if self.bid_requester:
            _dict['bid_requester'] = self.bid_requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # set to None if awarded (nullable) is None
        # and model_fields_set contains the field
        if self.awarded is None and "awarded" in self.model_fields_set:
            _dict['awarded'] = None

        # set to None if invitation_last_sent_at (nullable) is None
        # and model_fields_set contains the field
        if self.invitation_last_sent_at is None and "invitation_last_sent_at" in self.model_fields_set:
            _dict['invitation_last_sent_at'] = None

        # set to None if is_bidder_committed (nullable) is None
        # and model_fields_set contains the field
        if self.is_bidder_committed is None and "is_bidder_committed" in self.model_fields_set:
            _dict['is_bidder_committed'] = None

        # set to None if bidder_comments (nullable) is None
        # and model_fields_set contains the field
        if self.bidder_comments is None and "bidder_comments" in self.model_fields_set:
            _dict['bidder_comments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdBidsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bid_package_id": obj.get("bid_package_id"),
            "bid_package_title": obj.get("bid_package_title"),
            "bid_form_title": obj.get("bid_form_title"),
            "bid_status": obj.get("bid_status"),
            "awarded": obj.get("awarded"),
            "company_id": obj.get("company_id"),
            "invitation_last_sent_at": obj.get("invitation_last_sent_at"),
            "is_bidder_committed": obj.get("is_bidder_committed"),
            "lump_sum_amount": obj.get("lump_sum_amount"),
            "lump_sum_enabled": obj.get("lump_sum_enabled"),
            "submitted": obj.get("submitted"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "due_date": obj.get("due_date"),
            "bidder_comments": obj.get("bidder_comments"),
            "bid_requester": BidBidRequester.from_dict(obj["bid_requester"]) if obj.get("bid_requester") is not None else None,
            "vendor": BidVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "project": BidProject.from_dict(obj["project"]) if obj.get("project") is not None else None
        })
        return _obj


