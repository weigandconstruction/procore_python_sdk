# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v11_projects_project_id_bid_packages_bid_package_id_bids_id_patch_request_bid_bid_items_inner import RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBidBidItemsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBid(BaseModel):
    """
    RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBid
    """ # noqa: E501
    lump_sum_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lump sum (overall) amount")
    bidder_comments: Optional[StrictStr] = Field(default=None, description="Comments")
    bidder_inclusion: Optional[StrictStr] = Field(default=None, description="Inclusions")
    bidder_exclusion: Optional[StrictStr] = Field(default=None, description="Exclusions")
    bid_status: Optional[StrictStr] = Field(default=None, description="This status is combination of the `invitation_last_sent_at`, `is_bidder_committed`, `submitted`, & `awarded` values. The `not_invited`  status is the same as `invitation_last_sent_at` being null,     `is_bidder_committed` being null,  `submitted` being false, & `awarded` not being true. The `undecided`    status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being null,  `submitted` being false, & `awarded` not being true. The `will_not_bid` status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being false, `submitted` being false, & `awarded` not being true. The `will_bid`     status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being false, & `awarded` not being true. The `submitted`    status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being true,  & `awarded` not being true. The `awarded`      status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being true,  & `awarded` being true. ")
    is_bidder_committed: Optional[StrictBool] = Field(default=None, description="Bidder committed")
    submitted: Optional[StrictBool] = Field(default=False, description="Vendor submitted Bid")
    prostore_file_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of Prostore File IDs for attachments")
    recipient_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of Login IDs to add as recipients")
    bid_items: Optional[List[RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBidBidItemsInner]] = Field(default=None, description="Bid Items for a Bid")
    bid_items_to_delete: Optional[List[StrictInt]] = Field(default=None, description="IDs of Bid Items that need to be deleted")
    __properties: ClassVar[List[str]] = ["lump_sum_amount", "bidder_comments", "bidder_inclusion", "bidder_exclusion", "bid_status", "is_bidder_committed", "submitted", "prostore_file_ids", "recipient_ids", "bid_items", "bid_items_to_delete"]

    @field_validator('bid_status')
    def bid_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_invited', 'undecided', 'will_not_bid', 'will_bid', 'submitted', 'awarded']):
            raise ValueError("must be one of enum values ('not_invited', 'undecided', 'will_not_bid', 'will_bid', 'submitted', 'awarded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bid_items (list)
        _items = []
        if self.bid_items:
            for _item_bid_items in self.bid_items:
                if _item_bid_items:
                    _items.append(_item_bid_items.to_dict())
            _dict['bid_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lump_sum_amount": obj.get("lump_sum_amount"),
            "bidder_comments": obj.get("bidder_comments"),
            "bidder_inclusion": obj.get("bidder_inclusion"),
            "bidder_exclusion": obj.get("bidder_exclusion"),
            "bid_status": obj.get("bid_status"),
            "is_bidder_committed": obj.get("is_bidder_committed"),
            "submitted": obj.get("submitted") if obj.get("submitted") is not None else False,
            "prostore_file_ids": obj.get("prostore_file_ids"),
            "recipient_ids": obj.get("recipient_ids"),
            "bid_items": [RestV11ProjectsProjectIdBidPackagesBidPackageIdBidsIdPatchRequestBidBidItemsInner.from_dict(_item) for _item in obj["bid_items"]] if obj.get("bid_items") is not None else None,
            "bid_items_to_delete": obj.get("bid_items_to_delete")
        })
        return _obj


