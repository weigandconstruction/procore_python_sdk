# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v10_bim_models_get200_response_inner_one_of1_current_revision import RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevision
from typing import Optional, Set
from typing_extensions import Self

class RestV10BimModelsGet200ResponseInnerOneOf1(BaseModel):
    """
    BIM Model
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    title: Optional[StrictStr] = Field(default=None, description="BIM Model title.")
    auto_publish: Optional[StrictBool] = Field(default=None, description="Model auto publishing setting. When set to true, a new model revision is automatically published when a new version of the input model file is uploaded")
    project_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    revisions_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="No. of model revisions published")
    web_url: Optional[StrictStr] = Field(default=None, description="Deep link to Procore's Models Web Viewer.")
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    current_revision: Optional[RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevision] = None
    __properties: ClassVar[List[str]] = ["id", "title", "auto_publish", "project_id", "revisions_count", "web_url", "created_at", "updated_at", "current_revision"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10BimModelsGet200ResponseInnerOneOf1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_revision
        if self.current_revision:
            _dict['current_revision'] = self.current_revision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10BimModelsGet200ResponseInnerOneOf1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "auto_publish": obj.get("auto_publish"),
            "project_id": obj.get("project_id"),
            "revisions_count": obj.get("revisions_count"),
            "web_url": obj.get("web_url"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "current_revision": RestV10BimModelsGet200ResponseInnerOneOf1CurrentRevision.from_dict(obj["current_revision"]) if obj.get("current_revision") is not None else None
        })
        return _obj


