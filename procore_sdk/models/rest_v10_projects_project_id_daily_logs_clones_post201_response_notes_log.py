# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_clones_post201_response_notes_log_created_by import RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLogCreatedBy
from procore_sdk.models.rest_v10_projects_project_id_daily_logs_clones_post201_response_notes_log_permissions import RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLogPermissions
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLog(BaseModel):
    """
    RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLog
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    comment: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    created_by_collaborator: Optional[StrictBool] = None
    custom_fields: Optional[Dict[str, Any]] = None
    var_date: Optional[date] = Field(default=None, alias="date")
    datetime: Optional[datetime] = None
    daily_log_header_id: Optional[Union[StrictFloat, StrictInt]] = None
    deleted_at: Optional[StrictStr] = None
    is_issue_day: Optional[StrictStr] = None
    permissions: Optional[RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLogPermissions] = None
    position: Optional[Union[StrictFloat, StrictInt]] = None
    updated_at: Optional[datetime] = None
    status: Optional[StrictStr] = None
    attachments: Optional[List[Dict[str, Any]]] = None
    created_by: Optional[RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLogCreatedBy] = None
    location: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "comment", "created_at", "created_by_collaborator", "custom_fields", "date", "datetime", "daily_log_header_id", "deleted_at", "is_issue_day", "permissions", "position", "updated_at", "status", "attachments", "created_by", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if is_issue_day (nullable) is None
        # and model_fields_set contains the field
        if self.is_issue_day is None and "is_issue_day" in self.model_fields_set:
            _dict['is_issue_day'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "comment": obj.get("comment"),
            "created_at": obj.get("created_at"),
            "created_by_collaborator": obj.get("created_by_collaborator"),
            "custom_fields": obj.get("custom_fields"),
            "date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "daily_log_header_id": obj.get("daily_log_header_id"),
            "deleted_at": obj.get("deleted_at"),
            "is_issue_day": obj.get("is_issue_day"),
            "permissions": RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLogPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "position": obj.get("position"),
            "updated_at": obj.get("updated_at"),
            "status": obj.get("status"),
            "attachments": obj.get("attachments"),
            "created_by": RestV10ProjectsProjectIdDailyLogsClonesPost201ResponseNotesLogCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "location": obj.get("location")
        })
        return _obj


