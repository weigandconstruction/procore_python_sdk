# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_projects_project_id_schedule_settings_get200_response_email_settings import RestV10ProjectsProjectIdScheduleSettingsGet200ResponseEmailSettings
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdScheduleSettingsGet200Response(BaseModel):
    """
    Schedule Project Settings
    """ # noqa: E501
    project_id: Optional[StrictInt] = Field(default=None, description="Project")
    company_id: Optional[StrictInt] = Field(default=None, description="Company")
    primavera_schedule_id: Optional[StrictStr] = Field(default=None, description="Primavera schedule")
    schedule_type: Optional[StrictStr] = Field(default=None, description="Schedule type")
    schedule_file_pattern: Optional[StrictStr] = Field(default=None, description="Schedule file pattern")
    project_integration: Optional[StrictBool] = Field(default=None, description="Project integration")
    display_task_names_with_full_outline_path: Optional[StrictBool] = Field(default=None, description="Display task names with full outline path")
    schedule_show_resources_on_calendar: Optional[StrictBool] = Field(default=None, description="Schedule show resources on calendar")
    schedule_allow_task_updates: Optional[StrictBool] = Field(default=None, description="Schedule allow task updates")
    schedule_task_auto_formatting: Optional[StrictBool] = Field(default=None, description="Schedule task auto formatting")
    create_calendar_item_enabled: Optional[StrictBool] = Field(default=None, description="Create calendar item enabled")
    calendar_people_filters_enabled: Optional[StrictBool] = Field(default=None, description="Calendar people filters enabled")
    schedule_use_project_admin_working_days: Optional[StrictBool] = Field(default=None, description="Schedule use project admin working days")
    email_settings: Optional[RestV10ProjectsProjectIdScheduleSettingsGet200ResponseEmailSettings] = None
    __properties: ClassVar[List[str]] = ["project_id", "company_id", "primavera_schedule_id", "schedule_type", "schedule_file_pattern", "project_integration", "display_task_names_with_full_outline_path", "schedule_show_resources_on_calendar", "schedule_allow_task_updates", "schedule_task_auto_formatting", "create_calendar_item_enabled", "calendar_people_filters_enabled", "schedule_use_project_admin_working_days", "email_settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdScheduleSettingsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_settings
        if self.email_settings:
            _dict['email_settings'] = self.email_settings.to_dict()
        # set to None if primavera_schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.primavera_schedule_id is None and "primavera_schedule_id" in self.model_fields_set:
            _dict['primavera_schedule_id'] = None

        # set to None if schedule_type (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_type is None and "schedule_type" in self.model_fields_set:
            _dict['schedule_type'] = None

        # set to None if schedule_file_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_file_pattern is None and "schedule_file_pattern" in self.model_fields_set:
            _dict['schedule_file_pattern'] = None

        # set to None if project_integration (nullable) is None
        # and model_fields_set contains the field
        if self.project_integration is None and "project_integration" in self.model_fields_set:
            _dict['project_integration'] = None

        # set to None if display_task_names_with_full_outline_path (nullable) is None
        # and model_fields_set contains the field
        if self.display_task_names_with_full_outline_path is None and "display_task_names_with_full_outline_path" in self.model_fields_set:
            _dict['display_task_names_with_full_outline_path'] = None

        # set to None if schedule_show_resources_on_calendar (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_show_resources_on_calendar is None and "schedule_show_resources_on_calendar" in self.model_fields_set:
            _dict['schedule_show_resources_on_calendar'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdScheduleSettingsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "company_id": obj.get("company_id"),
            "primavera_schedule_id": obj.get("primavera_schedule_id"),
            "schedule_type": obj.get("schedule_type"),
            "schedule_file_pattern": obj.get("schedule_file_pattern"),
            "project_integration": obj.get("project_integration"),
            "display_task_names_with_full_outline_path": obj.get("display_task_names_with_full_outline_path"),
            "schedule_show_resources_on_calendar": obj.get("schedule_show_resources_on_calendar"),
            "schedule_allow_task_updates": obj.get("schedule_allow_task_updates"),
            "schedule_task_auto_formatting": obj.get("schedule_task_auto_formatting"),
            "create_calendar_item_enabled": obj.get("create_calendar_item_enabled"),
            "calendar_people_filters_enabled": obj.get("calendar_people_filters_enabled"),
            "schedule_use_project_admin_working_days": obj.get("schedule_use_project_admin_working_days"),
            "email_settings": RestV10ProjectsProjectIdScheduleSettingsGet200ResponseEmailSettings.from_dict(obj["email_settings"]) if obj.get("email_settings") is not None else None
        })
        return _obj


