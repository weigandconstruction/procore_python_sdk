# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BidBidItemsInner(BaseModel):
    """
    Bid Item
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount in cents. It's an optional parameter when the blind bidding is on.")
    bid_form_item_id: Optional[StrictInt] = Field(default=None, description="Bid Form Item ID")
    cost_code_id: Optional[StrictInt] = Field(default=None, description="Cost Code ID")
    cost_code_name: Optional[StrictStr] = Field(default=None, description="Cost Code name")
    cost_code_number: Optional[StrictStr] = Field(default=None, description="Cost Code number")
    id: Optional[StrictInt] = Field(default=None, description="ID")
    included: Optional[StrictBool] = Field(default=None, description="Included")
    quantity: Optional[StrictStr] = Field(default=None, description="Quantity. It's an optional parameter when the blind bidding is on.")
    unit_cost: Optional[StrictStr] = Field(default=None, description="Unit cost of bid item. It's an optional parameter when the blind bidding is on.")
    uom: Optional[StrictStr] = Field(default=None, description="Unit of Measure. It's an optional parameter when the blind bidding is on.")
    __properties: ClassVar[List[str]] = ["amount", "bid_form_item_id", "cost_code_id", "cost_code_name", "cost_code_number", "id", "included", "quantity", "unit_cost", "uom"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BidBidItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if included (nullable) is None
        # and model_fields_set contains the field
        if self.included is None and "included" in self.model_fields_set:
            _dict['included'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BidBidItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "bid_form_item_id": obj.get("bid_form_item_id"),
            "cost_code_id": obj.get("cost_code_id"),
            "cost_code_name": obj.get("cost_code_name"),
            "cost_code_number": obj.get("cost_code_number"),
            "id": obj.get("id"),
            "included": obj.get("included"),
            "quantity": obj.get("quantity"),
            "unit_cost": obj.get("unit_cost"),
            "uom": obj.get("uom")
        })
        return _obj


