# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.segmented_upload_segments_inner import SegmentedUploadSegmentsInner
from typing import Optional, Set
from typing_extensions import Self

class SegmentedUpload(BaseModel):
    """
    An Upload resource contains instructions on how to upload files directly to Procore's storage service.
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="Reference to the upload that stays valid during the lifecycle of the upload. After uploading to the storage service you will use this reference to associate the upload to another resource.")
    status: Optional[StrictStr] = Field(default=None, description="Upload status.")
    segments: Optional[List[SegmentedUploadSegmentsInner]] = Field(default=None, description="Upload segments. Optional.")
    __properties: ClassVar[List[str]] = ["uuid", "status", "segments"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['non_segmented', 'ready', 'receiving', 'complete']):
            raise ValueError("must be one of enum values ('non_segmented', 'ready', 'receiving', 'complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentedUpload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentedUpload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "status": obj.get("status"),
            "segments": [SegmentedUploadSegmentsInner.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None
        })
        return _obj


