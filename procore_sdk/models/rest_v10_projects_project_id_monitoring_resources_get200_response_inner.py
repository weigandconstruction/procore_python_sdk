# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.rest_v10_work_order_contracts_get200_response_inner_currency_configuration import RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdMonitoringResourcesGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdMonitoringResourcesGet200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date, formatted based on the project's locale")
    end_date: Optional[StrictStr] = Field(default=None, description="End date, formatted based on the project's locale")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="Unit of measure")
    unit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit cost")
    units_remaining: Optional[StrictInt] = Field(default=None, description="Units remaining, calculated as of today or as of the provided forecast_start_date parameter")
    forecast_to_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Forecast to complete")
    planned_total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Planned total cost")
    total_units: Optional[StrictInt] = Field(default=None, description="Total units")
    utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Utilization")
    budget_line_item_id: Optional[StrictInt] = Field(default=None, description="ID of the associated Budget Line Item")
    currency_configuration: Optional[RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration] = None
    __properties: ClassVar[List[str]] = ["id", "description", "start_date", "end_date", "unit_of_measure", "unit_cost", "units_remaining", "forecast_to_complete", "planned_total_cost", "total_units", "utilization", "budget_line_item_id", "currency_configuration"]

    @field_validator('unit_of_measure')
    def unit_of_measure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['weeks', 'months']):
            raise ValueError("must be one of enum values ('weeks', 'months')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdMonitoringResourcesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency_configuration
        if self.currency_configuration:
            _dict['currency_configuration'] = self.currency_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdMonitoringResourcesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "unit_of_measure": obj.get("unit_of_measure"),
            "unit_cost": obj.get("unit_cost"),
            "units_remaining": obj.get("units_remaining"),
            "forecast_to_complete": obj.get("forecast_to_complete"),
            "planned_total_cost": obj.get("planned_total_cost"),
            "total_units": obj.get("total_units"),
            "utilization": obj.get("utilization"),
            "budget_line_item_id": obj.get("budget_line_item_id"),
            "currency_configuration": RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.from_dict(obj["currency_configuration"]) if obj.get("currency_configuration") is not None else None
        })
        return _obj


