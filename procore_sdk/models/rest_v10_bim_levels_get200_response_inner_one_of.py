# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from procore_sdk.models.location1 import Location1
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_assignee import RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_coordination_issue_file import RestV10CoordinationIssuesGet200ResponseInnerAllOfCoordinationIssueFile
from typing import Optional, Set
from typing_extensions import Self

class RestV10BimLevelsGet200ResponseInnerOneOf(BaseModel):
    """
    RestV10BimLevelsGet200ResponseInnerOneOf
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    elevation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Level elevation")
    name: Optional[StrictStr] = Field(default=None, description="Level name")
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    bim_file: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfCoordinationIssueFile] = None
    location: Optional[Location1] = None
    created_by: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee] = None
    __properties: ClassVar[List[str]] = ["id", "elevation", "name", "created_at", "updated_at", "bim_file", "location", "created_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10BimLevelsGet200ResponseInnerOneOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bim_file
        if self.bim_file:
            _dict['bim_file'] = self.bim_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10BimLevelsGet200ResponseInnerOneOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "elevation": obj.get("elevation"),
            "name": obj.get("name"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "bim_file": RestV10CoordinationIssuesGet200ResponseInnerAllOfCoordinationIssueFile.from_dict(obj["bim_file"]) if obj.get("bim_file") is not None else None,
            "location": Location1.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "created_by": RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None
        })
        return _obj


