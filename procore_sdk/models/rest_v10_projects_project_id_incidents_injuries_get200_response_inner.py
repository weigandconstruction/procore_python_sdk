# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.affliction_type import AfflictionType
from procore_sdk.models.array_of_task_items_that_were_sent_out_inner_all_of_assignee import ArrayOfTaskItemsThatWereSentOutInnerAllOfAssignee
from procore_sdk.models.body_part import BodyPart
from procore_sdk.models.harm_source import HarmSource
from procore_sdk.models.incident_affliction import IncidentAffliction
from procore_sdk.models.party1 import Party1
from procore_sdk.models.rest_v10_projects_project_id_incidents_injuries_get200_response_inner_all_of_affected_person import RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInnerAllOfAffectedPerson
from procore_sdk.models.rest_v10_projects_project_id_incidents_property_damages_get200_response_inner_all_of_managed_equipment import RestV10ProjectsProjectIdIncidentsPropertyDamagesGet200ResponseInnerAllOfManagedEquipment
from procore_sdk.models.rest_v10_projects_project_id_punch_item_assignments_id_get200_response_vendor import RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor
from procore_sdk.models.rest_v11_projects_project_id_recycle_bin_incidents_witness_statements_get200_response_inner_custom_fields import RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields
from procore_sdk.models.work_activity1 import WorkActivity1
from typing import Optional, Set
from typing_extensions import Self

class RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner(BaseModel):
    """
    RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="The record type, i.e. 'injury', 'near_miss', 'environmental', or 'property_damage'")
    date_returned_to_work: Optional[date] = Field(default=None, description="Date returned to work")
    affected_party: Optional[Party1] = None
    affected_person: Optional[RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInnerAllOfAffectedPerson] = None
    harm_source: Optional[HarmSource] = None
    date_of_death: Optional[date] = Field(default=None, description="Date of death")
    filing_type: Optional[StrictStr] = Field(default=None, description="Filing Type")
    hospitalized_overnight: Optional[StrictBool] = Field(default=None, description="Represents whether the injured person was hospitalized overnight")
    recordable: Optional[StrictBool] = Field(default=None, description="Represents whether the Injury record is recordable")
    treated_in_er: Optional[StrictBool] = Field(default=None, description="Represents whether the injured person was treated in the ER")
    treatment_facility_address: Optional[StrictStr] = Field(default=None, description="The street address of the treatment facility")
    treatment_facility: Optional[StrictStr] = Field(default=None, description="The name of the treatment facility")
    treatment_provider: Optional[StrictStr] = Field(default=None, description="The name of the treatment provider")
    work_days_absent: Optional[StrictInt] = Field(default=None, description="The number of days absent from work")
    work_days_restricted: Optional[StrictInt] = Field(default=None, description="The number of days on restricted work")
    work_days_transferred: Optional[StrictInt] = Field(default=None, description="The number of days transferred")
    body_diagram_type: Optional[StrictStr] = Field(default=None, description="Body Type displayed in Body Diagram")
    affliction_type: Optional[AfflictionType] = None
    affected_body_part: Optional[StrictStr] = Field(default=None, description="DEPRECATED. The body part affected by the affliction")
    affected_body_parts: Optional[List[StrictStr]] = Field(default=None, description="Array of body parts affected by the affliction")
    afflictions: Optional[List[IncidentAffliction]] = Field(default=None, description="DEPRECATED. Array of afflictions affecting the injured person. Currently this is limited to one.")
    custom_fields: Optional[RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields] = None
    body_parts: Optional[List[BodyPart]] = Field(default=None, description="Body parts affected by the injury")
    id: Optional[StrictInt] = Field(default=None, description="Incident Record ID")
    number: Optional[StrictInt] = Field(default=None, description="The number of the Record")
    full_number: Optional[StrictStr] = Field(default=None, description="The Incident Number combined with the Record Number")
    incident_id: Optional[StrictInt] = Field(default=None, description="The id of the Incident to which the record belongs")
    incident_title: Optional[StrictStr] = Field(default=None, description="The title of the Incident to which the record belongs")
    incident_private: Optional[StrictBool] = Field(default=None, description="Indicates whether the Incident to which the record belongs is private")
    summary: Optional[StrictStr] = Field(default=None, description="Summary combining the affliction type, body part affected, and source of harm.")
    description_plain_text: Optional[StrictStr] = Field(default=None, description="Description of event")
    description: Optional[StrictStr] = Field(default=None, description="Description of event in Rich Text format")
    affected_company: Optional[RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor] = None
    created_at: Optional[datetime] = Field(default=None, description="Timestamp of creation")
    deleted_at: Optional[datetime] = Field(default=None, description="Timestamp of deletion")
    managed_equipment: Optional[RestV10ProjectsProjectIdIncidentsPropertyDamagesGet200ResponseInnerAllOfManagedEquipment] = None
    incident_created_by: Optional[ArrayOfTaskItemsThatWereSentOutInnerAllOfAssignee] = None
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp of last update")
    work_activity: Optional[WorkActivity1] = None
    __properties: ClassVar[List[str]] = ["type", "date_returned_to_work", "affected_party", "affected_person", "harm_source", "date_of_death", "filing_type", "hospitalized_overnight", "recordable", "treated_in_er", "treatment_facility_address", "treatment_facility", "treatment_provider", "work_days_absent", "work_days_restricted", "work_days_transferred", "body_diagram_type", "affliction_type", "affected_body_part", "affected_body_parts", "afflictions", "custom_fields", "body_parts", "id", "number", "full_number", "incident_id", "incident_title", "incident_private", "summary", "description_plain_text", "description", "affected_company", "created_at", "deleted_at", "managed_equipment", "incident_created_by", "updated_at", "work_activity"]

    @field_validator('filing_type')
    def filing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fatality', 'first_aid', 'lost_time', 'medically_treated', 'refused_care', 'report_only', 'restricted_work']):
            raise ValueError("must be one of enum values ('fatality', 'first_aid', 'lost_time', 'medically_treated', 'refused_care', 'report_only', 'restricted_work')")
        return value

    @field_validator('body_diagram_type')
    def body_diagram_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['feminine', 'masculine', 'null']):
            raise ValueError("must be one of enum values ('feminine', 'masculine', 'null')")
        return value

    @field_validator('affected_body_part')
    def affected_body_part_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right', 'null']):
            raise ValueError("must be one of enum values ('abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right', 'null')")
        return value

    @field_validator('affected_body_parts')
    def affected_body_parts_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right']):
                raise ValueError("each list item must be one of ('abdomen', 'ankle', 'ankle_left', 'ankle_right', 'arm', 'arm_left', 'arm_right', 'back', 'body_systems', 'breast', 'breast_left', 'breast_right', 'buttock', 'chest', 'circulatory_system', 'cranium', 'digestive_system', 'ear', 'ear_left', 'ear_right', 'elbow', 'elbow_left', 'elbow_right', 'entire_body_systemic', 'eye', 'eye_left', 'eye_right', 'face', 'finger', 'finger_index', 'finger_index_left', 'finger_index_right', 'finger_middle', 'finger_middle_left', 'finger_middle_right', 'finger_pinky', 'finger_pinky_left', 'finger_pinky_right', 'finger_ring', 'finger_ring_left', 'finger_ring_right', 'foot', 'foot_left', 'foot_right', 'foot_top_left', 'foot_top_right', 'forearm', 'forearm_left', 'forearm_right', 'groin', 'hand', 'hand_back_left', 'hand_back_right', 'hand_left', 'hand_right', 'head', 'head_back', 'heart', 'heel_left', 'heel_right', 'hip', 'hip_left', 'hip_right', 'internal_organs', 'knee', 'knee_left', 'knee_right', 'leg', 'leg_left', 'leg_right', 'lower_back', 'lower_back_left', 'lower_back_right', 'lower_leg', 'lower_leg_left', 'lower_leg_right', 'lungs', 'mouth', 'neck', 'neck_back', 'neck_left', 'neck_right', 'nervous_system', 'nose', 'palm_left', 'palm_right', 'pec', 'pec_left', 'pec_right', 'pelvis', 'pelvis_front', 'psychological', 'reproductive_system', 'respiratory_system', 'ribs', 'ribs_left', 'ribs_right', 'shoulder', 'shoulder_left', 'shoulder_right', 'skin', 'tailbone', 'teeth', 'throat', 'thumb', 'thumb_left', 'thumb_right', 'toe', 'toe_fifth', 'toe_fifth_left', 'toe_fifth_right', 'toe_first', 'toe_first_left', 'toe_first_right', 'toe_fourth', 'toe_fourth_left', 'toe_fourth_right', 'toe_second', 'toe_second_left', 'toe_second_right', 'toe_third', 'toe_third_left', 'toe_third_right', 'torso', 'upper_arm', 'upper_arm_left', 'upper_arm_right', 'upper_back', 'upper_back_left', 'upper_back_right', 'upper_leg', 'upper_leg_left', 'upper_leg_right', 'urinary_system', 'vertebrae', 'wrist', 'wrist_left', 'wrist_right')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affected_party
        if self.affected_party:
            _dict['affected_party'] = self.affected_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affected_person
        if self.affected_person:
            _dict['affected_person'] = self.affected_person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of harm_source
        if self.harm_source:
            _dict['harm_source'] = self.harm_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affliction_type
        if self.affliction_type:
            _dict['affliction_type'] = self.affliction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in afflictions (list)
        _items = []
        if self.afflictions:
            for _item_afflictions in self.afflictions:
                if _item_afflictions:
                    _items.append(_item_afflictions.to_dict())
            _dict['afflictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict['custom_fields'] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in body_parts (list)
        _items = []
        if self.body_parts:
            for _item_body_parts in self.body_parts:
                if _item_body_parts:
                    _items.append(_item_body_parts.to_dict())
            _dict['body_parts'] = _items
        # override the default output from pydantic by calling `to_dict()` of affected_company
        if self.affected_company:
            _dict['affected_company'] = self.affected_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_equipment
        if self.managed_equipment:
            _dict['managed_equipment'] = self.managed_equipment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incident_created_by
        if self.incident_created_by:
            _dict['incident_created_by'] = self.incident_created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_activity
        if self.work_activity:
            _dict['work_activity'] = self.work_activity.to_dict()
        # set to None if affected_party (nullable) is None
        # and model_fields_set contains the field
        if self.affected_party is None and "affected_party" in self.model_fields_set:
            _dict['affected_party'] = None

        # set to None if affected_person (nullable) is None
        # and model_fields_set contains the field
        if self.affected_person is None and "affected_person" in self.model_fields_set:
            _dict['affected_person'] = None

        # set to None if harm_source (nullable) is None
        # and model_fields_set contains the field
        if self.harm_source is None and "harm_source" in self.model_fields_set:
            _dict['harm_source'] = None

        # set to None if treatment_provider (nullable) is None
        # and model_fields_set contains the field
        if self.treatment_provider is None and "treatment_provider" in self.model_fields_set:
            _dict['treatment_provider'] = None

        # set to None if body_diagram_type (nullable) is None
        # and model_fields_set contains the field
        if self.body_diagram_type is None and "body_diagram_type" in self.model_fields_set:
            _dict['body_diagram_type'] = None

        # set to None if affliction_type (nullable) is None
        # and model_fields_set contains the field
        if self.affliction_type is None and "affliction_type" in self.model_fields_set:
            _dict['affliction_type'] = None

        # set to None if affected_body_part (nullable) is None
        # and model_fields_set contains the field
        if self.affected_body_part is None and "affected_body_part" in self.model_fields_set:
            _dict['affected_body_part'] = None

        # set to None if affected_company (nullable) is None
        # and model_fields_set contains the field
        if self.affected_company is None and "affected_company" in self.model_fields_set:
            _dict['affected_company'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if managed_equipment (nullable) is None
        # and model_fields_set contains the field
        if self.managed_equipment is None and "managed_equipment" in self.model_fields_set:
            _dict['managed_equipment'] = None

        # set to None if work_activity (nullable) is None
        # and model_fields_set contains the field
        if self.work_activity is None and "work_activity" in self.model_fields_set:
            _dict['work_activity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "date_returned_to_work": obj.get("date_returned_to_work"),
            "affected_party": Party1.from_dict(obj["affected_party"]) if obj.get("affected_party") is not None else None,
            "affected_person": RestV10ProjectsProjectIdIncidentsInjuriesGet200ResponseInnerAllOfAffectedPerson.from_dict(obj["affected_person"]) if obj.get("affected_person") is not None else None,
            "harm_source": HarmSource.from_dict(obj["harm_source"]) if obj.get("harm_source") is not None else None,
            "date_of_death": obj.get("date_of_death"),
            "filing_type": obj.get("filing_type"),
            "hospitalized_overnight": obj.get("hospitalized_overnight"),
            "recordable": obj.get("recordable"),
            "treated_in_er": obj.get("treated_in_er"),
            "treatment_facility_address": obj.get("treatment_facility_address"),
            "treatment_facility": obj.get("treatment_facility"),
            "treatment_provider": obj.get("treatment_provider"),
            "work_days_absent": obj.get("work_days_absent"),
            "work_days_restricted": obj.get("work_days_restricted"),
            "work_days_transferred": obj.get("work_days_transferred"),
            "body_diagram_type": obj.get("body_diagram_type"),
            "affliction_type": AfflictionType.from_dict(obj["affliction_type"]) if obj.get("affliction_type") is not None else None,
            "affected_body_part": obj.get("affected_body_part"),
            "affected_body_parts": obj.get("affected_body_parts"),
            "afflictions": [IncidentAffliction.from_dict(_item) for _item in obj["afflictions"]] if obj.get("afflictions") is not None else None,
            "custom_fields": RestV11ProjectsProjectIdRecycleBinIncidentsWitnessStatementsGet200ResponseInnerCustomFields.from_dict(obj["custom_fields"]) if obj.get("custom_fields") is not None else None,
            "body_parts": [BodyPart.from_dict(_item) for _item in obj["body_parts"]] if obj.get("body_parts") is not None else None,
            "id": obj.get("id"),
            "number": obj.get("number"),
            "full_number": obj.get("full_number"),
            "incident_id": obj.get("incident_id"),
            "incident_title": obj.get("incident_title"),
            "incident_private": obj.get("incident_private"),
            "summary": obj.get("summary"),
            "description_plain_text": obj.get("description_plain_text"),
            "description": obj.get("description"),
            "affected_company": RestV10ProjectsProjectIdPunchItemAssignmentsIdGet200ResponseVendor.from_dict(obj["affected_company"]) if obj.get("affected_company") is not None else None,
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "managed_equipment": RestV10ProjectsProjectIdIncidentsPropertyDamagesGet200ResponseInnerAllOfManagedEquipment.from_dict(obj["managed_equipment"]) if obj.get("managed_equipment") is not None else None,
            "incident_created_by": ArrayOfTaskItemsThatWereSentOutInnerAllOfAssignee.from_dict(obj["incident_created_by"]) if obj.get("incident_created_by") is not None else None,
            "updated_at": obj.get("updated_at"),
            "work_activity": WorkActivity1.from_dict(obj["work_activity"]) if obj.get("work_activity") is not None else None
        })
        return _obj


