# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.bim_file_extraction_item_artifact_grid import BIMFileExtractionItemArtifactGrid
from procore_sdk.models.bim_file_extraction_item_artifact_object_search import BIMFileExtractionItemArtifactObjectSearch
from procore_sdk.models.bim_file_extraction_item_artifact_web_format import BIMFileExtractionItemArtifactWebFormat
from procore_sdk.models.rest_v11_projects_project_id_daily_logs_weather_logs_get200_response_inner_attachments_inner import RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class BIMFileExtractionItemArtifact(BaseModel):
    """
    Artifact extracted from a 3d model. Only one of grid, mobile_format, properties, web_format, ifc, object_search, and viewpoint_collection will have data associated to the artifact extracted
    """ # noqa: E501
    grid: Optional[BIMFileExtractionItemArtifactGrid] = None
    mobile_format: Optional[RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner] = None
    properties: Optional[RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner] = None
    web_format: Optional[BIMFileExtractionItemArtifactWebFormat] = None
    ifc: Optional[RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner] = None
    object_search: Optional[BIMFileExtractionItemArtifactObjectSearch] = None
    viewpoint_collection: Optional[RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner] = None
    __properties: ClassVar[List[str]] = ["grid", "mobile_format", "properties", "web_format", "ifc", "object_search", "viewpoint_collection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIMFileExtractionItemArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of grid
        if self.grid:
            _dict['grid'] = self.grid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_format
        if self.mobile_format:
            _dict['mobile_format'] = self.mobile_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_format
        if self.web_format:
            _dict['web_format'] = self.web_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ifc
        if self.ifc:
            _dict['ifc'] = self.ifc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_search
        if self.object_search:
            _dict['object_search'] = self.object_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viewpoint_collection
        if self.viewpoint_collection:
            _dict['viewpoint_collection'] = self.viewpoint_collection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIMFileExtractionItemArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "grid": BIMFileExtractionItemArtifactGrid.from_dict(obj["grid"]) if obj.get("grid") is not None else None,
            "mobile_format": RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner.from_dict(obj["mobile_format"]) if obj.get("mobile_format") is not None else None,
            "properties": RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "web_format": BIMFileExtractionItemArtifactWebFormat.from_dict(obj["web_format"]) if obj.get("web_format") is not None else None,
            "ifc": RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner.from_dict(obj["ifc"]) if obj.get("ifc") is not None else None,
            "object_search": BIMFileExtractionItemArtifactObjectSearch.from_dict(obj["object_search"]) if obj.get("object_search") is not None else None,
            "viewpoint_collection": RestV11ProjectsProjectIdDailyLogsWeatherLogsGet200ResponseInnerAttachmentsInner.from_dict(obj["viewpoint_collection"]) if obj.get("viewpoint_collection") is not None else None
        })
        return _obj


