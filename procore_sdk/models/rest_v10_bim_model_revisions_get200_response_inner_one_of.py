# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.body125_bim_plan_one_of_model_map_start import Body125BimPlanOneOfModelMapStart
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_assignee import RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee
from procore_sdk.models.rest_v10_coordination_issues_get200_response_inner_all_of_viewpoints_inner import RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10BimModelRevisionsGet200ResponseInnerOneOf(BaseModel):
    """
    Published BIM Model Revision
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    bim_file_id: Optional[StrictInt] = Field(default=None, description="ID of the associated BIM File")
    bim_gridline_id: Optional[StrictInt] = Field(default=None, description="ID of the associated Gridline")
    bim_model_id: Optional[StrictInt] = Field(default=None, description="ID of the associated BIM Model")
    geometry_file_bundle_id: Optional[StrictInt] = Field(default=None, description="ID of the associated geometry file bundle")
    suitability: Optional[StrictStr] = Field(default=None, description="Suitability of the revision")
    publish_status: Optional[StrictStr] = Field(default=None, description="Status of the revision")
    revision: Optional[StrictInt] = Field(default=None, description="The sequential revision count")
    publisher_name: Optional[StrictStr] = Field(default=None, description="Name of application publishing the model revision")
    publisher_version: Optional[StrictStr] = Field(default=None, description="Version of application publishing the model revision")
    min_boundary: Optional[Body125BimPlanOneOfModelMapStart] = None
    max_boundary: Optional[Body125BimPlanOneOfModelMapStart] = None
    rotation: Optional[Body125BimPlanOneOfModelMapStart] = None
    viewpoints: Optional[List[RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner]] = Field(default=None, description="An array of viewpoints")
    created_by: Optional[RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee] = None
    created_at: Optional[datetime] = Field(default=None, description="Created date")
    updated_at: Optional[datetime] = Field(default=None, description="Updated date")
    __properties: ClassVar[List[str]] = ["id", "bim_file_id", "bim_gridline_id", "bim_model_id", "geometry_file_bundle_id", "suitability", "publish_status", "revision", "publisher_name", "publisher_version", "min_boundary", "max_boundary", "rotation", "viewpoints", "created_by", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10BimModelRevisionsGet200ResponseInnerOneOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of min_boundary
        if self.min_boundary:
            _dict['min_boundary'] = self.min_boundary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_boundary
        if self.max_boundary:
            _dict['max_boundary'] = self.max_boundary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotation
        if self.rotation:
            _dict['rotation'] = self.rotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in viewpoints (list)
        _items = []
        if self.viewpoints:
            for _item_viewpoints in self.viewpoints:
                if _item_viewpoints:
                    _items.append(_item_viewpoints.to_dict())
            _dict['viewpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if bim_gridline_id (nullable) is None
        # and model_fields_set contains the field
        if self.bim_gridline_id is None and "bim_gridline_id" in self.model_fields_set:
            _dict['bim_gridline_id'] = None

        # set to None if geometry_file_bundle_id (nullable) is None
        # and model_fields_set contains the field
        if self.geometry_file_bundle_id is None and "geometry_file_bundle_id" in self.model_fields_set:
            _dict['geometry_file_bundle_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10BimModelRevisionsGet200ResponseInnerOneOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bim_file_id": obj.get("bim_file_id"),
            "bim_gridline_id": obj.get("bim_gridline_id"),
            "bim_model_id": obj.get("bim_model_id"),
            "geometry_file_bundle_id": obj.get("geometry_file_bundle_id"),
            "suitability": obj.get("suitability"),
            "publish_status": obj.get("publish_status"),
            "revision": obj.get("revision"),
            "publisher_name": obj.get("publisher_name"),
            "publisher_version": obj.get("publisher_version"),
            "min_boundary": Body125BimPlanOneOfModelMapStart.from_dict(obj["min_boundary"]) if obj.get("min_boundary") is not None else None,
            "max_boundary": Body125BimPlanOneOfModelMapStart.from_dict(obj["max_boundary"]) if obj.get("max_boundary") is not None else None,
            "rotation": Body125BimPlanOneOfModelMapStart.from_dict(obj["rotation"]) if obj.get("rotation") is not None else None,
            "viewpoints": [RestV10CoordinationIssuesGet200ResponseInnerAllOfViewpointsInner.from_dict(_item) for _item in obj["viewpoints"]] if obj.get("viewpoints") is not None else None,
            "created_by": RestV10CoordinationIssuesGet200ResponseInnerAllOfAssignee.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


