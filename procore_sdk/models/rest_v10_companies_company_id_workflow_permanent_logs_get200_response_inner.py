# coding: utf-8

"""
    Procore Rest API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Contact: apisupport@procore.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from procore_sdk.models.rest_v10_companies_company_id_workflow_permanent_logs_get200_response_inner_attachments_inner import RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInner(BaseModel):
    """
    Workflow Permanent Log
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID")
    activity: Optional[StrictStr] = Field(default=None, description="Name of the activity logged")
    attachments: Optional[List[RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner]] = None
    ball_in_court_duration: Optional[StrictStr] = Field(default=None, description="How long the assignee was responsible prior to acting")
    comments: Optional[StrictStr] = Field(default=None, description="Comments provided by the assignee when acting in the workflow")
    created_at: Optional[datetime] = Field(default=None, description="Log recorded at")
    performed_by: Optional[StrictStr] = Field(default=None, description="Name of the user performing the activity")
    user_role: Optional[StrictStr] = Field(default=None, description="Name of the workflow role")
    __properties: ClassVar[List[str]] = ["id", "activity", "attachments", "ball_in_court_duration", "comments", "created_at", "performed_by", "user_role"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "activity": obj.get("activity"),
            "attachments": [RestV10CompaniesCompanyIdWorkflowPermanentLogsGet200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "ball_in_court_duration": obj.get("ball_in_court_duration"),
            "comments": obj.get("comments"),
            "created_at": obj.get("created_at"),
            "performed_by": obj.get("performed_by"),
            "user_role": obj.get("user_role")
        })
        return _obj


